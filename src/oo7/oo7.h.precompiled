#include "ShoreApp.h"
#ifndef oo7_mod
#define oo7_mod 1
INTERFACE_PREDEFS(AtomicPart)
INTERFACE_PREDEFS(Connection)
INTERFACE_PREDEFS(CompositePart)
INTERFACE_PREDEFS(Document)
INTERFACE_PREDEFS(Manual)
INTERFACE_PREDEFS(Assembly)
INTERFACE_PREDEFS(ComplexAssembly)
INTERFACE_PREDEFS(BaseAssembly)
INTERFACE_PREDEFS(Module)
INTERFACE_PREDEFS(oo7Indices)
const  long TypeSize = 10 ;
const  long TitleSize = 40 ;
const  long DummySize = 1000 ;
enum AssemblyType {	Complex ,
	Base }
;
enum BenchmarkOp {	Trav1 ,
	Trav1WW ,
	Trav2a ,
	Trav2b ,
	Trav2c ,
	Trav3a ,
	Trav3b ,
	Trav3c ,
	Trav4 ,
	Trav5do ,
	Trav5undo ,
	Trav6 ,
	Trav7 ,
	Trav8 ,
	Trav9 ,
	Trav10 ,
	Query1 ,
	Query2 ,
	Query3 ,
	Query4 ,
	Query5 ,
	Query6 ,
	Query7 ,
	Query8 ,
	Insert ,
	Delete ,
	Reorg1 ,
	Reorg2 ,
	WarmUpdate ,
	MultiTrav1 ,
	MultiTrav2 ,
	MultiTrav3 ,
	MultiTrav4 ,
	MultiTrav5 ,
	MultiTrav6 }
;
enum UpdateType {	UpdateOne ,
	UpdateAll ,
	UpdateRepeat }
;
enum UpdateDirectionType {	UpdateDirectionDo ,
	UpdateDirectionUndo }
;
class PartIdSet ;
class CompositePart ;
class Connection ;
class Document ;
class Module ;
class Assembly ;
class ComplexAssembly ;
class AtomicPart {
COMMON_FCT_DECLS(AtomicPart)
public:
 long id ;
 char type [ TypeSize ];
 long buildDate ;
 long x ;
 long y ;
 long docId ;
BAG_INV_DECL(Connection,from,AtomicPart,32) to;
;
BAG_INV_DECL(Connection,to,AtomicPart,44) from;
;
 REF(CompositePart)  partOf ;
virtual  void  swapXY ();
virtual  void  toggleDate ();
virtual  void  DoNothing () const ;
virtual  long traverse ( BenchmarkOp op , PartIdSet &visitedIds ) const ;
virtual  void  init ( long ptId , REF(CompositePart)  cp );
virtual  void  Delete ();
};
class Connection {
COMMON_FCT_DECLS(Connection)
public:
 char type [ TypeSize ];
 long length ;
REF_INV_DECL(AtomicPart,to,Connection,16) from;
;
REF_INV_DECL(AtomicPart,from,Connection,20) to;
;
virtual  void  init ( REF(AtomicPart)  fromPart , REF(AtomicPart)  toPart );
};
class CompositePart {
COMMON_FCT_DECLS(CompositePart)
public:
 long id ;
 char type [ TypeSize ];
 long buildDate ;
 REF(Document)  documentation ;
 BAG(AtomicPart)  parts ;
 REF(AtomicPart)  rootPart ;
 BAG(BaseAssembly)  usedInPriv ;
 BAG(BaseAssembly)  usedInShar ;
virtual  long traverse ( BenchmarkOp op ) const ;
virtual  long traverse7 () const ;
virtual  long reorg1 () const ;
virtual  long reorg2 () const ;
virtual  void  init ( long cpId );
virtual  void  Delete ();
};
class Document {
COMMON_FCT_DECLS(Document)
public:
 char title [ TitleSize ];
 long id ;
sdl_string Text ;
 long textLen ;
 REF(CompositePart)  part ;
virtual  long searchText ( char c ) const ;
virtual  long replaceText ( LREF(char)  oldString , LREF(char)  newString );
virtual  void  init ( long cpId , REF(CompositePart)  cref );
virtual  void  Delete ();
};
class Manual {
COMMON_FCT_DECLS(Manual)
public:
 char title [ TitleSize ];
 long id ;
sdl_string Text ;
 long textLen ;
 REF(Module)  mod ;
virtual  long searchText ( char c ) const ;
virtual  long replaceText ( LREF(char)  oldString , LREF(char)  newString );
virtual  long firstLast () const ;
virtual  void  init ( long modId , REF(Module)  myMod );
virtual  void  Delete ();
};
class Assembly {
COMMON_FCT_DECLS(Assembly)
public:
 long id ;
 char type [ TypeSize ];
 long buildDate ;
 AssemblyType assmType ;
 REF(ComplexAssembly)  superAssembly ;
 REF(Module)  oModule ;
virtual  long traverse ( BenchmarkOp op ) const ;
virtual  long traverse7 ( PartIdSet &visitedComplexIds ) const ;
virtual  AssemblyType mytype () const ;
virtual  void  DoNothing () const ;
};
class ComplexAssembly :public Assembly  {
COMMON_FCT_DECLS(ComplexAssembly)
public:
 BAG(Assembly)  subAssemblies ;
virtual  long traverse ( BenchmarkOp op ) const ;
virtual  long traverse7 ( PartIdSet &visitedComplexIds ) const ;
virtual  AssemblyType mytype () const ;
virtual  void  init ( long asId , REF(Module)  mod , REF(ComplexAssembly)  parentAssembly , long levelNo );
};
class BaseAssembly :public Assembly  {
COMMON_FCT_DECLS(BaseAssembly)
public:
 BAG(CompositePart)  componentsPriv ;
 BAG(CompositePart)  componentsShar ;
virtual  long traverse ( BenchmarkOp op ) const ;
virtual  long traverse7 ( PartIdSet &visitedComplexIds ) const ;
virtual  AssemblyType mytype () const ;
virtual  void  init ( long asId , REF(Module)  mod , REF(ComplexAssembly)  parentAssembly );
};
class Module {
COMMON_FCT_DECLS(Module)
public:
 long id ;
 char type [ TypeSize ];
 long buildDate ;
 REF(Manual)  man ;
 REF(ComplexAssembly)  designRoot ;
 BAG(BaseAssembly)  allBases ;
virtual  long traverse ( BenchmarkOp op ) const ;
virtual  long scanManual () const ;
virtual  long firstLast () const ;
virtual  void  init ( long modId );
virtual  void  Delete ();
};
class oo7Indices {
COMMON_FCT_DECLS(oo7Indices)
public:
 REF_INDEX(long,AtomicPart)  AtomicPartIdx ;
 REF_INDEX(long,CompositePart)  CompPartIdx ;
 STR_REF_INDEX(SDL_STRING,Document)  DocumentIdx ;
 REF_INDEX(long,Document)  DocumentIdIdx ;
 REF_INDEX(long,BaseAssembly)  BaseAssemblyIdx ;
 STR_REF_INDEX(SDL_STRING,Module)  ModuleIdx ;
 REF_INDEX(long,AtomicPart)  BuildDateIndex ;
 SET(Module)  AllModules ;
virtual  void  init ();
};
const int AtomicPart_OID = 20283;
INTERFACE_POSTDEFS(AtomicPart)
const int Connection_OID = 20219;
INTERFACE_POSTDEFS(Connection)
const int CompositePart_OID = 20241;
INTERFACE_POSTDEFS(CompositePart)
const int Document_OID = 20363;
INTERFACE_POSTDEFS(Document)
const int Manual_OID = 20569;
INTERFACE_POSTDEFS(Manual)
const int Assembly_OID = 20637;
INTERFACE_POSTDEFS(Assembly)
const int ComplexAssembly_OID = 20601;
INTERFACE_POSTDEFS(ComplexAssembly)
const int BaseAssembly_OID = 20389;
INTERFACE_POSTDEFS(BaseAssembly)
const int Module_OID = 20525;
INTERFACE_POSTDEFS(Module)
const int oo7Indices_OID = 20873;
INTERFACE_POSTDEFS(oo7Indices)

#ifdef MODULE_CODE
struct rModule oo7 = { "oo7", 0, 10,20045 };
#define CUR_MOD oo7
INTERFACE_CODEDEFS(AtomicPart,0)
TYPE_CAST_DEF(AtomicPart)
TYPE_CAST_END(AtomicPart)
APPLY_DEF(AtomicPart)
to.__apply(fpt);
from.__apply(fpt);
partOf.__apply(fpt);
END_APPLY_DEF(AtomicPart)
BAG_INV_IMPL(Connection,from,AtomicPart,32)
BAG_INV_IMPL(Connection,to,AtomicPart,44)
INTERFACE_CODEDEFS(Connection,0)
TYPE_CAST_DEF(Connection)
TYPE_CAST_END(Connection)
APPLY_DEF(Connection)
from.__apply(fpt);
to.__apply(fpt);
END_APPLY_DEF(Connection)
REF_INV_IMPL(AtomicPart,to,Connection)
REF_INV_IMPL(AtomicPart,from,Connection)
INTERFACE_CODEDEFS(CompositePart,0)
TYPE_CAST_DEF(CompositePart)
TYPE_CAST_END(CompositePart)
APPLY_DEF(CompositePart)
documentation.__apply(fpt);
parts.__apply(fpt);
rootPart.__apply(fpt);
usedInPriv.__apply(fpt);
usedInShar.__apply(fpt);
END_APPLY_DEF(CompositePart)
INTERFACE_CODEDEFS(Document,0)
TYPE_CAST_DEF(Document)
TYPE_CAST_END(Document)
APPLY_DEF(Document)
Text.__apply(fpt);
part.__apply(fpt);
END_APPLY_DEF(Document)
INTERFACE_CODEDEFS(Manual,0)
TYPE_CAST_DEF(Manual)
TYPE_CAST_END(Manual)
APPLY_DEF(Manual)
Text.__apply(fpt);
mod.__apply(fpt);
END_APPLY_DEF(Manual)
INTERFACE_CODEDEFS(Assembly,0)
TYPE_CAST_DEF(Assembly)
TYPE_CAST_END(Assembly)
APPLY_DEF(Assembly)
superAssembly.__apply(fpt);
oModule.__apply(fpt);
END_APPLY_DEF(Assembly)
INTERFACE_CODEDEFS(ComplexAssembly,0)
TYPE_CAST_DEF(ComplexAssembly)
TYPE_CAST_CASE(ComplexAssembly,Assembly)
TYPE_CAST_END(ComplexAssembly)
APPLY_DEF(ComplexAssembly)
	Assembly::__apply(fpt);
subAssemblies.__apply(fpt);
END_APPLY_DEF(ComplexAssembly)
INTERFACE_CODEDEFS(BaseAssembly,0)
TYPE_CAST_DEF(BaseAssembly)
TYPE_CAST_CASE(BaseAssembly,Assembly)
TYPE_CAST_END(BaseAssembly)
APPLY_DEF(BaseAssembly)
	Assembly::__apply(fpt);
componentsPriv.__apply(fpt);
componentsShar.__apply(fpt);
END_APPLY_DEF(BaseAssembly)
INTERFACE_CODEDEFS(Module,0)
TYPE_CAST_DEF(Module)
TYPE_CAST_END(Module)
APPLY_DEF(Module)
man.__apply(fpt);
designRoot.__apply(fpt);
allBases.__apply(fpt);
END_APPLY_DEF(Module)
INTERFACE_CODEDEFS(oo7Indices,7)
TYPE_CAST_DEF(oo7Indices)
TYPE_CAST_END(oo7Indices)
APPLY_DEF(oo7Indices)
AtomicPartIdx.__apply(fpt);
CompPartIdx.__apply(fpt);
DocumentIdx.__apply(fpt);
DocumentIdIdx.__apply(fpt);
BaseAssemblyIdx.__apply(fpt);
ModuleIdx.__apply(fpt);
BuildDateIndex.__apply(fpt);
AllModules.__apply(fpt);
END_APPLY_DEF(oo7Indices)
#undef CUR_MOD oo7

#endif MODULE_CODE
#endif oo7
