/*<std-header style='imakefile' orig-src='shore'>

 $Id: Imakefile,v 1.106 1999/08/25 01:06:47 kupsch Exp $

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

  -- do not edit anything above this line --   </std-header>*/

init_file_group(libfc)
init_file_group(solaris_stats)
init_file_group(unix_stats)
init_file_group(unix_error)
init_file_group(win32_error)
init_file_group(w_form)
init_file_group(w_unused)

w_unused.cpp += w_uio.cpp
w_unused.h += w_uio.h
unused_group(w_unused)

solaris_stats.cpp += solaris_stats.cpp
solaris_stats.h += solaris_stats.h

unix_stats.cpp += unix_stats.cpp
unix_stats.h += unix_stats.h

#if defined(IS_SOLARIS2) && defined(USE_SLASH_PROC)
add_to_group(libfc, solaris_stats)
unused_group(unix_stats)
#else
add_to_group(libfc, unix_stats)
unused_group(solaris_stats)
#endif

w_form.cpp += w_form.cpp

#if defined(FC_USE_FORM) || (defined(IS_NT) && !defined(USE_GCC))
add_to_group(libfc, w_form)
#else
unused_group(w_form)
#endif

libfc.h += \
        cat.h errlog.h errlog_s.h getopt.h nbox.h stime.h		\
        vtable_enum.h vtable_info.h w.h w_autodel.h			\
        w_base.h w_bitmap.h w_bitmap_space.h w_cirqueue.h w_debug.h	\
        w_error.h w_factory.h w_factory_fast.h w_factory_thread.h	\
        w_gettimeofday.h w_hash.h w_heap.h w_list.h w_minmax.h		\
        w_random.h w_rc.h w_rusage.h w_shmem.h w_shore_alloc.h		\
        w_signal.h w_sptr.h w_statistics.h w_stream.h w_strstream.h	\
        w_timer.h w_vector.h w_windows.h w_workaround.h			\
        w_dynarray.h os_types.h extTraceEvents.h w_defines.h		\
	ncrTraceEvents.h

libfc.cpp += \
        common_tmpl.cpp debug.cpp errlog.cpp getopt.cpp nbox.cpp	\
        stime.cpp vtable_info.cpp w_base.cpp w_bitmap.cpp w_error.cpp	\
        w_factory.cpp w_factory_fast.cpp w_factory_thread.cpp		\
        w_gettimeofday.cpp w_listm.cpp w_random.cpp w_rc.cpp		\
        w_shmem.cpp w_shore_alloc.cpp w_statistics.cpp			\
        w_timer.cpp w_input.cpp


unix_error.cpp += unix_error.cpp
unix_error.h += unix_error.h
#if 1   /* Eventually to be replaced with Posix errors required */
add_to_group(libfc, unix_error)
#else
unused_group(unix_error)
#endif

win32_error.cpp += win32_error.cpp
win32_error.h += win32_error.h

#ifdef IS_NT
add_to_group(libfc, win32_error)
#else
unused_group(win32_error)
#endif

libfc.other += \
        README w_hash.doc

install_copy(include/fc, fc_error_enum_gen.h)
install_copy(include/fc, sm2pc_stats_t_collect_enum_gen.h)
install_copy(include/fc, sm_stats_t_collect_enum_gen.h)
install_copy(include/fc, smthread_stats_t_collect_enum_gen.h)
install_copy(include/fc, $(libfc.h))
install_copy(lib, $(FC_LIB))

ERROR_FILES += fc_error_enum_gen.h fc_einfo_gen.h fc_errmsg_gen.h
gen_error_codes(libfc, fc_error.dat, -e, $(ERROR_FILES))

STAT_FILES += \
        smthread_stats_t_collect_enum_gen.h     \
        sm2pc_stats_t_collect_enum_gen.h        \
        sm_stats_t_collect_enum_gen.h
gen_statistics_enum_only(libfc, $(SM_DIR)/sm_stats_info.dat, $(STAT_FILES))

DEFINES_FILE = PlatformDefines_gen.h
gen_defines(libfc, $(DEFINES_FILE), $(CCDEFINES))
install_copy(include/fc, $(DEFINES_FILE))

libfc.lib_name = $(FC_LIB)
build_library(libfc)


/**********  Handle Subdirectories ***********/
#if defined(BUILD_DEFAULT_SMLAYER_TESTS) || defined(BUILD_EVERYTHING)
POST_SUBDIRS += $(FC_TESTS_BUILD_DIR)
#else
nondefault_subdirs($(FC_TESTS_BUILD_DIR))
#endif
