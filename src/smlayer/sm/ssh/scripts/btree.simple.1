# <std-header style='tcl' orig-src='shore'>
#
#  $Id: btree.simple.1,v 1.4 1999/06/07 19:05:22 kupsch Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
# This script demonstrates many xcts causing SMOs
# by inserting and removing large entries into btrees
# At some point, if we crash or abort, and if -y flag is
# used, this should demonstrate recovery's effort to order
# the undone xcts so that the one(s) in the middle of SMOs
# get run first.
#
# NB: this is for use with runtests.pl (crash testing)
#

source $script_dir/vol.init

set ntries 50
set nxct 10

set mx [expr $max_btree_entry_size / 2]
set elem [format "zvec%d" $mx]

proc T3 {ndx key} {
    # T2 scans
    verbose T3 sync
    sync

    sm begin_xct
    set elem T3
    verbose T3 addding entry: $key $elem
    sm create_assoc $ndx $key $elem
    sm commit_xct

    verbose T3 sync
    sync
    # T2 scans

    verbose T3 done.
}

proc T2 { ndx key } {

    verbose T2 scan ...
    sm begin_xct
    # 10 is plenty
    set nrec 10 
    # scan index
    set scan [sm create_scan $ndx >= neg_inf <= pos_inf]
    for {set i 1} {$i <= $nrec} {incr i}  {
	set r [sm scan_next $scan]
	if {[string compare $r eof] == 0} then { break }
	set key [string trimleft [lindex $r 0] 0]
	set el [lindex $r 1]
	verbose "scanned ($key, $el)"
    }
    verbose "eof"
    sm destroy_scan $scan

    verbose T2 sync 
    sync
    # T3 inserts

    verbose T2 sync again
    sync

    verbose T2 scan again
    # scan index again
    set nrec 10
    set scan [sm create_scan $ndx >= neg_inf <= pos_inf]
    for {set i 1} {$i <= $nrec} {incr i}  {
	set r [sm scan_next $scan]
	if {[string compare $r eof] == 0} then { break }
	set key [string trimleft [lindex $r 0] 0]
	set el [lindex $r 1]
	verbose "scanned ($key, $el)"
    }
    verbose "eof"
    sm destroy_scan $scan
    sm commit_xct

    verbose T2 done.
}


foreach cc {t_cc_kvl t_cc_im } {
    verbose "******************************************" $cc
    sm begin_xct
    set ndx [sm create_index $volid btree regular b*1000 $cc]

    # insert one item with key=valu1
    set key 1
    set elem T1
    sm create_assoc $ndx $key $elem

    sm commit_xct

    set i 1
    set t($i) [fork_thread T2 $ndx $key ]
    incr i
    set t($i) [fork_thread T3 $ndx $key ]

    sync_thread $t(1) $t(2)
    sync_thread $t(1) $t(2)
    join_thread $t(1) $t(2)

    sm begin_xct
    sm destroy_index $ndx
    sm commit_xct
}

verbose threads done

unset t mx elem
unset ntries nxct ndx

