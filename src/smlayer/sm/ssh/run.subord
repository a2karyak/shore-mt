#!/bin/csh  -f 

# <std-header style='shell' orig-src='shore'>
#
#  $Id: run.subord,v 1.11 1999/06/07 19:04:55 kupsch Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

 
# Script for running subordinates with crashes
# USES tcl scripts subord.start subonly.3

set me=`pwd`
set me=$me:t

set ok=0

echo "STARTING WITH CLEAN DISK"
/bin/rm -f log/* volumes/* ssh.log

echo creating file
set file=`ssh -f scripts/subord.start`
set file=`echo $file | awk '{print $(NF)}'`
if ($0 =~ gdb.subord) then
  set quote=\"
  echo FILE $file
  set file=$quote$file$quote
  echo FILE $file
endif

echo FILE=$file

set always="-t subname=$me -t coname=coord -t f0=$file -f scripts/subonly.3"
set forward="$always"
set crashrecovery="-t nocrash=1 $always"


echo "STARTING LOOP. FILE=$file"

set badnews=0
while ($badnews == 0)
	echo RUNNING ssh $forward
	if ($0 =~ gdb.subord) then
	    echo run $forward > .gdbrun
	    gdb ssh -x .gdbrun
	    set ok=$status
	else
	    ssh $forward
	    set ok=$status
	endif
	echo F-EXIT STATUS $ok

	if ($ok == 44) then 
		ssh $crashrecovery
		if ($0 =~ gdb.subord) then
		    echo run $crashrecovery > .gdbrun
		    gdb ssh -x .gdbrun
		else
		    echo RUNNING FOR RECOVERY ssh $crashrecovery
		    ssh $crashrecovery
		endif
		ssh $crashrecovery
		set ok=$status
		echo R-EXIT STATUS $ok
		if ($ok == 44) then 
		    echo PREVENTION OF CRASHING FAILED! Stopping.
		else if($ok != 0) then
		    set badnews=1
		endif
	else if ($ok != 0) then 
		echo STOPPED: EXIT STATUS: $ok
		set badnews=1
        endif
end
