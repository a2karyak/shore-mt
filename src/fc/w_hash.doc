<std-header style='plain' orig-src='shore'>

 $Id: w_hash.doc,v 1.7 1999/06/07 19:02:53 kupsch Exp $

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

  -- do not edit anything above this line --   </std-header>

Template Class: w_hash_t

w_hash_t implements a hash table with chaining on collisions.  An
entry (type T) in the table must have a list link for chaining and a
function that returns the key.  The number of hash "points" is fixed
when the constructor is called, but any number of entries can be
inserted into the table.

Construction:
    A w_hash_t<T, K> is constructed by supplying the following:
	1. the intended size of the hash table (implicitly 
	   rounded up to power of 2)
	2. the offset of the key in T
	3. the offset of the link (w_link_t class for
	    collision resolution).

Possible Uses:
    Anywhere you need a simple hash table in a single threaded
    situation.  However, the entries of the table must be
    able to support the requirements below.

Requirements:
    an == operator must be defined to compare K
    a uint4 hash(const K&) function must be defined

Restrictions:
    w_hash_t is not thread safe 

Implementation issues:
    The implementation is designed to be efficient.  One relatively
    expensive part is the link (w_link_t) that must be in each entry.
    This like supports a doubly linked list and requires (3 pointers).
    The space and time for these pointers is not really needed, but the
    implementation was simplified since we already had a linked list
    class.

