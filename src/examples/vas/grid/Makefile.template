# --------------------------------------------------------------- #
# -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- #
# -- University of Wisconsin-Madison, subject to the terms     -- #
# -- and conditions given in the file COPYRIGHT.  All Rights   -- #
# -- Reserved.                                                 -- #
# --------------------------------------------------------------- #

# $Header: /p/shore/shore_cvs/src/examples/vas/grid/Makefile.template,v 1.17 1996/07/30 19:40:21 kupsch Exp $

#
# Makefile for vas/grid program
#

# See "NOTE" below re: running on Solaris.
#     also see the note re: linking with DEBUG library

# Modify the following line to indicated where gcc is installed
GCC =       gcc

# Modify the following line as appropriate to point to the place where
# Shore is installed
INSTALL_DIR = /p/shore/installed/NEW/debug
INCLUDE     = -I$(INSTALL_DIR)/include
LIBSM       = $(INSTALL_DIR)/lib/libsm.a

# These are set to use the modified RPC shipped with Shore
RPCGEN = $(INSTALL_DIR)/bin/rpcgen
LIBCOMMON   = $(INSTALL_DIR)/lib/librpclib.a $(INSTALL_DIR)/lib/libshorecommon.a

SERVER_SRCS =	grid.C rpc_thread.C server.C command_server.C server_stubs.C
CLIENT_SRCS =	client.C command_client.C
COMMON_SRCS =	options.C command.C grid_basics.C

EXECS = server client

SERVER_OBJS =	$(SERVER_SRCS:.C=.o)
CLIENT_OBJS =	$(CLIENT_SRCS:.C=.o)
COMMON_OBJS =	$(COMMON_SRCS:.C=.o)
OBJS =  $(SERVER_OBJS) $(CLIENT_OBJS) $(COMMON_OBJS)

CXX =		$(GCC) -x c++
CC  = 		$(GCC)
LD =		$(GCC)

LDFLAGS =   -lg++ -lstdc++

# NOTE: if running on a Solaris machine, add this:
LDFLAGS       += -lnsl -lsocket

#
# C/C++ Flags.
#
# Note: if you are linking with a debugging version of the Storage
#       manager libraries, be sure to define DEBUG with -DDEBUG
#
CCFLAGS =	-g -O $(INCLUDE) -Wall
CXXFLAGS =	$(CCFLAGS) -fno-implicit-templates

all:	$(EXECS)

.SUFFIXES: .C .o

.C.o:
	$(CXX) $(CXXFLAGS) -c $<

.c.o:
	$(CC) $(CCFLAGS) -c $<

 
# NB: THIS IS IMPORTANT: we include "ShoreConfig.h" because
# we *NEED* the system-dependent definition of a jmp_buf
# in order to see that the thread data structures that
# that we build here are consistent with those in the library.
# If we don't get the right #defines for the configuration, we
# run the risk of building .o files here with the wrong idea
# about the size of sthread_t (the root of the class hierarchy
# for our threads).

RPC_FILES = msg.h msg_clnt.c msg_svc.c msg_xdr.c
$(RPC_FILES): msg.x
	cp $(INSTALL_DIR)/include/ShoreConfig.h .
	$(RPCGEN) msg.x
	rm -f msg_svc.c
	$(RPCGEN) -m -o msg_svc.c msg.x


server: $(SERVER_OBJS) $(COMMON_OBJS) msg_xdr.o msg_svc.o $(LIBSM) $(LIBCOMMON)
	$(LD) -o $@ msg_svc.o $(SERVER_OBJS) $(COMMON_OBJS) msg_xdr.o \
		    $(LIBSM) $(LIBCOMMON) -lm $(LDFLAGS)

client: $(CLIENT_OBJS) $(COMMON_OBJS) $(LIBCOMMON) msg_clnt.o msg_xdr.o
	$(LD) -o $@ $(CLIENT_OBJS) $(COMMON_OBJS) msg_clnt.o msg_xdr.o \
		    $(LIBCOMMON) $(LDFLAGS)

clean:
	$(RM) $(EXECS) $(OBJS) $(RPC_FILES) a.out core tags 

#dependencies
$(SERVER_OBJS) $(CLIENT_OBJS) $(COMMON_OBJS): msg.h grid_basics.h grid.h
msg.h: grid_basics.h
msg_svc.o msg_clnt.o msg_xdr.o: msg.h grid_basics.h
client.o: command.h command_client.h
rpc_thread.o: rpc_thread.h command.h command_server.h
server.o: rpc_thread.h
command.o: command.h
command_client.o: command.h command_client.h
command_server.o server_stubs.o: command.h command_server.h rpc_thread.h
