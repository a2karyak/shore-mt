#!/bin/ksh 

# <std-header style='shell' orig-src='shore'>
#
#  $Id: testall,v 1.1 2007/05/18 21:39:18 nhall Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>
function execute  {
    print -n "$1\t--> running --> "
    print "running $1" >> $2

    if [[ -a $3 ]]; then
	of=/tmp/$$
	if $1 1> $of 2> $of.err ; then
	    if diff $of $3 >> $2; then
		print "ok"
	    else
		print "diff failed; results in " $of " and " $of.err 
		print "  expected results in " $3
		print "  All diffs in " $2
                exit 1
	    fi
	else
	    print "failed to execute $1 ( $? )"
            exit 1
	fi
	cat $of >> $2
	rm $of

    elif $1 >> $2 2>&1; then
	print "ok"
    else
	print "failed to execute $1 ( $? )"
        exit 1
    fi
}

echo creating log directory
mkdir -p ./log

echo creating volume  directory
mkdir -p ./volumes

echo creating...
execute "./file_scan -i" file_scan-i.out
echo created
echo 

echo scanning ...
execute "./file_scan" file_scan.out
./file_scan
echo scanned

echo removing log dir and volume dir
/bin/rm -rf ./log ./volumes
