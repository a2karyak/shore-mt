# --------------------------------------------------------------- #
# -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- #
# -- University of Wisconsin-Madison, subject to the terms     -- #
# -- and conditions given in the file COPYRIGHT.  All Rights   -- #
# -- Reserved.                                                 -- #
# --------------------------------------------------------------- #

#
#	Test quarks
#
source $script_dir/vol.init

set update_ops {update_rec update_rec_hdr append_rec truncate_rec}

sm begin_xct
set f1 [sm create_file $volid]
echo f1 = $f1

for {set i 0} {$i < [llength $update_ops]} {incr i} {
    set rec($i) [sm create_rec $f1 rec$i 11 rec$i]
    echo rec $i = $rec($i)
}
sm commit_xct

link_to_inter_thread_comm_buffer sync_result
set sync_result "hello"

proc reader {rid1 rid2} {
    global sync_result
    link_to_inter_thread_comm_buffer sync_result

    sync
    sm begin_xct
    echo pinning $rid1
    set pin [sm pin_create]
    sm pin_pin $pin $rid1 0
    sm pin_unpin $pin

    set quark [sm open_quark]
    echo pinning $rid2 in quark
    sm pin_pin $pin $rid2 01
    set sync_result "$rid1 and $rid2 are pinned"
    echo $sync_result

    # pin again an see if blocks writer
    set pin2 [sm pin_create]
    sm pin_pin $pin2 $rid2 0

    # pin rid1 again to make sure it's not freed
    sm pin_pin $pin2 $rid1 0

    sm pin_destroy $pin2
    sync

    sm close_quark $quark release
    # make sure we can open and close again
    set quark [sm open_quark]
    sm close_quark $quark release

    sm pin_destroy $pin
    set sync_result "$rid2 lock released by quark"
    echo $sync_result
    sync
    set sync_result "$rid1 lock released by commit"
    echo $sync_result
    sm commit_xct
}

proc writer {rid1 rid2} {
    global sync_result
    link_to_inter_thread_comm_buffer sync_result

    sync
    sm begin_xct
    echo pinning $rid1 for write
    set pin [sm pin_create]
    sm pin_pin $pin $rid1 0
    sm pin_update_rec $pin 1 "X"
    sm pin_unpin $pin
    set sync_result "$rid1 updated"
    echo $sync_result
    sync

    echo pinning $rid2 for write
    sm pin_pin $pin $rid2 0
    sm pin_update_rec $pin 1 "X"
    set sync_result "$rid2 updated"
    echo $sync_result
    sync

    sm pin_destroy $pin
    echo writer committing
    sm commit_xct
}

#set update_ops {update_rec update_rec_hdr append_rec truncate_rec}


echo forking 1
set t1 [ fork_thread reader $rec(0) $rec(1)]
echo forking 2
set t2 [ fork_thread writer $rec(1) $rec(0)]

echo sync_result: $sync_result
assert {expr [string compare $sync_result hello] == 0}
echo sync1
sync_thread $t1
echo sync_result = $sync_result
echo assert {= "$rec(0) and $rec(1) are pinned"}
assert {expr [string compare $sync_result "$rec(0) and $rec(1) are pinned"] == 0}
echo sync2
sync_thread $t2
# thread 2 should be blocked, so sync has no effect on sync_thread
assert {expr [string compare $sync_result "$rec(0) and $rec(1) are pinned"] == 0}

echo sync3
sync_thread $t1
echo this allows thread 2 to proceed
echo sync_result: $sync_result
assert {expr [string compare $sync_result "$rec(1) lock released by quark"] == 0}

echo sync4
sync_thread $t2
assert {expr [string compare $sync_result "$rec(1) updated"] == 0}
echo sync5
sync_thread $t1
assert {expr [string compare $sync_result "$rec(0) lock released by commit"] == 0}
echo sync6
sync_thread $t2
assert {expr [string compare $sync_result "$rec(0) updated"]==0}

echo joining threads
join_thread $t1 $t2


sm begin_xct
sm destroy_file $f1
sm commit_xct

echo done

unset rec update_ops t1 t2 
unset f1 i
# can't unset sync_result -- it's linked to the comm buffer.
