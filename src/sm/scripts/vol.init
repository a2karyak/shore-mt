# --------------------------------------------------------------- #
# -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- #
# -- University of Wisconsin-Madison, subject to the terms     -- #
# -- and conditions given in the file COPYRIGHT.  All Rights   -- #
# -- Reserved.                                                 -- #
# --------------------------------------------------------------- #

# see if init has not been done

set_config_info
set i 0
set err 0

if {$volid == 0} {
    # establish default volume id
    set volid [lindex [lindex $ssh_device_list 0] 2]

    echo Volid = $volid

    echo creating devices
    foreach i $ssh_device_list {

	set dev  [lindex $i 0]
	set size [lindex $i 1]
	set vol  [lindex $i 2]

	set force_arg force
	set existing 0

	if [ is_set dont_force_reformat ] {
	    set force_arg noforce

	    set err 0
	    if {$Use_logical_id} {
		catch {sm mount_dev $dev} err
	    } else {
		catch {sm mount_dev $dev $vol} err
	    }
	    if {$err == 1} {
		set force_arg noforce
		echo Result of mount: $err ...
		set existing 1
	    } else  {
		set force_arg force
	    }
	    echo "dismounting " $dev "..."
	    catch {sm dismount_dev $dev} err
	}

	echo formatting $dev $force_arg
	catch {sm format_dev $dev $size $force_arg} err

	echo "mounting " $dev "..."
	set err 0
	if {$Use_logical_id} {
	    sm mount_dev $dev
	} else {
	    sm mount_dev $dev $vol
	}
	set vol_list [sm list_volumes $dev]
	assert {expr [llength $vol_list] == 0}

	set quota [sm get_device_quota $dev]
	set size_page_align [expr ($size/($page_size/1024))*($page_size/1024)]

	assert {expr [lindex $quota 0] == $size_page_align}
	assert {expr [lindex $quota 1] == 0}


	echo creating volume $vol size $size on $dev
	if { $existing == 0 } {
	    sm create_vol $dev $vol $size
	    if {$Use_logical_id} {
		echo add logical id index on $vol
		sm add_logical_id_index $vol 100
	    }
	    if {$Use_logical_id} {
		assert {expr [string compare [sm has_logical_id_index $vol] TRUE] == 0}
	    } else {
		assert {expr [string compare [sm has_logical_id_index $vol] TRUE]}
	    }
	}

	set quota [sm get_device_quota $dev]
	echo dev quota: $quota
	assert {expr [lindex $quota 0] == $size_page_align}
	assert {expr [lindex $quota 1] <= $size_page_align}

	set quota [sm get_volume_quota $vol]
	echo volume quota: $quota
	assert {expr [lindex $quota 0] <= $size_page_align}
	assert {expr [lindex $quota 1] > 0}
	echo checking that all volumes are present on device
	set vol_list [sm list_volumes $dev]
	echo volumes on $dev are $vol_list
	assert {expr [llength $vol_list] == 1}
	assert {expr [string compare [lindex $vol_list 0] $vol.0.0.0:0] == 0}
    }
} else {
    echo Volid = $volid

    echo Re-mounting devices
    foreach i $ssh_device_list {

	set dev  [lindex $i 0]
	set size [lindex $i 1]
	set vol  [lindex $i 2]

	set err 0
	if {$Use_logical_id} {
	    echo "mounting " $dev 
	    catch {sm mount_dev $dev} err
	} else {
	    echo "mounting " $dev $vol
	    catch {sm mount_dev $dev $vol} err
	}
	if {$err == 1} {
	    echo Result of mount: $err ...
	}
	set existing 1

	echo checking that all volumes are present on device
	set vol_list [sm list_volumes $dev]
	assert {expr [llength $vol_list] == 1}
	echo volumes on $dev are $vol_list
	assert {expr [string compare [lindex $vol_list 0] $vol.0.0.0:0] == 0}

	set quota [sm get_device_quota $dev]
	set size_page_align [expr ($size/($page_size/1024))*($page_size/1024)]
	assert {expr [lindex $quota 0] == $size_page_align}
    }
}

set id_hdr_width %06d
set id_body_width %08d

unset i err

return "leaving vol.init"

