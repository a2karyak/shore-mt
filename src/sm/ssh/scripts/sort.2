# <std-header style='tcl' orig-src='shore'>
#
#  $Id: sort.2,v 1.27 1999/06/07 19:05:45 kupsch Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#	Test sort on spatial objects (2-dimensional boxes)
#

if {$Use_logical_id} {
    # Bug: sort file seems to leave same logical id mappings
    # for both files -old & new - that is, if you destroy
    # the old file, that action causes the serial#s of all the
    # objects in the file to be removed from the LID index, 
    # making it break when you try to destroy the new file.  The
    # file sort needs to trash the serial#s of the old file somehow.
    echo
    echo "BUG BUG BUG"
    echo "Cannot run sort.2 with logical ids due to BUG in lid support"
    echo 
} else {
source $script_dir/vol.init

set nrec 200
set u "2.-1500.-1500.1500.1500"

#create and load a file with 2-d spatial objects
sm begin_xct
set f1 [sm create_file $volid]
verbose f1 = $f1
for {set i 0} {$i < $nrec} {incr i} {
    set b [sm next_box $u]
    sm create_typed_hdr_rec $f1 $b 16 $i spatial 
}
verbose SCAN ORIGINAL FILE
verbose [sm scan_sorted_recs $f1 spatial i4 $u]
sm commit_xct

#sort and display
sm begin_xct
verbose SPATIAL SORT $f1
set f2 [sm sort_file $f1 $volid 3 spatial hdr normal keep regular $u]
verbose f2 = $f2

verbose SCAN SORTED FILE
verbose scan_sorted_recs $f2 ...
verbose [sm scan_sorted_recs $f2 spatial i4 $u]


verbose destroying $f2
sm destroy_file $f2

verbose destroying $f1
sm destroy_file $f1

verbose commit
sm commit_xct

unset b i u f2 nrec f1
}

