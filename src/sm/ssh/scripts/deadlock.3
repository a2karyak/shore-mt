# <std-header style='tcl' orig-src='shore'>
#
#  $Id: deadlock.3,v 1.16 1999/06/07 19:05:25 kupsch Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

# Test Upgrade deadlock detection
#
#    {1SH, 2SH} <-- 1EX <-- 2EX
#

set o1 "10"

proc t1 {} {
    global o1
    sm begin_xct
    sm lock $o1 SH LONG
    verbose "t1: acquired SH on o1"
    sync
    verbose "t1: attempting to acquire EX on o1"
    sm lock $o1 EX LONG
    sm commit_xct
}

proc t2 {} {
    global o1 verbose_flag
    sm begin_xct
    sm lock $o1 SH LONG
    verbose "t2: acquired SH on o1"
    sync
    sync
    if {$verbose_flag}  {
	sm dump_locks
    }
    verbose "t2: attempting to acquire EX on o1"

    # catch deadlock
    verbose catch deadlock:
    catch {sm lock $o1 EX LONG} errorno
    verbose "(EXPECTED E_DEADLOCK) error is $errorno"
    assert {error_is $errorno E_DEADLOCK}
    sm commit_xct
}

set x [fork_thread t1 {}]
set y [fork_thread t2 {}]

sync_thread $x $y
sync_thread $y
join_thread $x $y


unset x y o1

