# <std-header style='tcl' orig-src='shore'>
#
#  $Id: multi.2,v 1.19 1999/06/07 19:05:38 kupsch Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#  Testing the following multi-thread-per-tx scenarios
#
#  scenario 2 
#  thread 1-m: EX lock o1
#  thread 2-m: EX lock o2
#  thread 1-s: SH lock o2 blocks on cond variable
#  thread 2-s: SH lock o1 detects deadlock
# 

set_config_info

# source $script_dir/vol.init

if {$multi_threaded_xct == 0 } {
	echo "Not configured for multi-threaded xcts"
} else {
set sp [sm preemption_simulated]
sm simulate_preemption off

set o1			"k(s(10.0).100.200)"
set o2			"k(s(10.0).100.340)"

proc tm {name x o1 o2} {
    global aborted_xct
    link_to_inter_thread_comm_buffer aborted_xct

    sm attach_xct $x
    sync
	set tid [sm xct_to_tid [sm xct]]
	verbose $name tm xct=$x tid=$tid locking EX $o1

	catch {sm lock $o1 EX LONG} err
	verbose result of lock is err=$err
	if [error_is $err E_DEADLOCK] {
	   verbose $name tm caught : $err
	   verbose (will have to abort)
	   sm abort_xct
	   set aborted_xct $x
	   return
	}
	verbose $name tm xct $x acquired EX $o1, detaching
	sm detach_xct $x
	verbose $name tm -- detached
}
proc ts {name x o1 o2} {
    global aborted_xct
    link_to_inter_thread_comm_buffer aborted_xct

    sm attach_xct $x
    sync
	set tid [sm xct_to_tid [sm xct]]
	verbose $name ts xct=$x tid=$tid locking SH $o2
	catch {sm lock $o2 SH LONG} err
	verbose result of lock is err=$err
	if [error_is $err E_DEADLOCK] {
	   verbose $name ts caught : $err
	   verbose (will have to abort)
	   sm abort_xct
	   set aborted_xct $x
	   return
	}
	verbose $name ts xct $x acquired SH $o2, detaching
	sm detach_xct $x
	verbose $name ts -- detached
}

##########  main  ##########

	link_to_inter_thread_comm_buffer aborted_xct
	set aborted_xct ""

	# start t1
	sm begin_xct
	set tid [sm xct_to_tid [sm xct]]
	set t1 [sm xct]
	verbose xct $t1 $tid
	sm detach_xct $t1

	verbose forking y1 tm xct=$t1
	set y1 [fork_thread tm {"y1" $t1 $o1 $o2}]

	verbose forking y3 ts xct=$t1
	set y3 [fork_thread ts {"y3" $t1 $o1 $o2}]



	# start t2
	sm begin_xct
	set tid [sm xct_to_tid [sm xct]]
	set t2 [sm xct]
	verbose xct $t2 $tid
	sm detach_xct $t2

	verbose forking y2 tm xct=$t2
	set y2 [fork_thread tm {"y2" $t2 $o2 $o1}]

	verbose forking y4 ts xct=$t2
	set y4 [fork_thread ts {"y4" $t2 $o2 $o1}]

	verbose sync_thread $y1 $y2 $y3 $y4
	sync_thread $y1 $y2 $y3 $y4

	verbose join_thread $y1 $y2 $y3 $y4
	join_thread $y1 $y2 $y3 $y4

	if {$aborted_xct != $t1} {
	    verbose committing $t1
	    sm attach_xct $t1
	    sm commit_xct
	} else {
	    verbose $t1 already aborted
	}

	if {$aborted_xct != $t2} {
	    verbose committing $t2
	    sm attach_xct $t2
	    sm commit_xct
	} else {
	    verbose $t2 already aborted
	}
	 
sm simulate_preemption $sp

verbose "SUCCESS"
unset t1 t2 tid
unset y1 y2 y3 y4
unset o1 o2
unset sp
# can't unset aborted_xct -- it's linked to the comm buffer.
addcleanupvars {aborted_xct}
}

