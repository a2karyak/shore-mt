# <std-header style='tcl' orig-src='shore'>
#
#  $Id: rsrc.bug,v 1.8 1999/06/07 19:05:54 kupsch Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>


# start up
#
source $script_dir/vol.init
if {$volid == 0} {
    set volid 10
    sm create_vol $volid force
    set volid [sm init_vol_logical_id $volid 100]
    sm mount
}

set nrec 4000

proc probe {ndx first last} {
    echo "probing:" $ndx $first $last
    for {set i $first} {$i <= $last} {incr i} {
	set el [sm find_assoc $ndx [format %03d $i] ]
	assert [expr {[format %015d $i] == $el}]
    }
}

#
# create index and load it up 
#
sm begin_xct
set ndx [sm create_index $volid btree]
echo created index $ndx

for {set i 1} {$i <= $nrec} {incr i} {
    #echo inserting $i [format %03d $i] [format %015d $i]
    if {$i%50 == 0} { echo inserting $i [format %03d $i] [format %015d $i] }
    sm create_assoc $ndx [format %03d $i] [format %015d $i]
    #set el [sm find_assoc $ndx [format %03d $i] ]
    #assert [expr {[format %015d $i] == $el}]

    if {$i > 3500 && $i%1 == 0 } {
	probe $ndx [expr {$i - 50}]  $i
    }
    if {$i > 300 && $i%100 == 0 } {
	probe $ndx 1 $i
    }
}
echo "probe:"
for {set i 1} {$i <= $nrec} {incr i} {
    set el [sm find_assoc $ndx [format %03d $i] ]
    assert [expr {[format %015d $i] == $el}]
}
echo probed [expr {$i - 1}]
echo "---- successful"

sm commit_xct

