# <std-header style='tcl' orig-src='shore'>
#
#  $Id: alloc.10,v 1.5 1999/06/07 19:05:07 kupsch Exp $
#
# SHORE -- Scalable Heterogeneous Object REpository
#
# Copyright (c) 1994-99 Computer Sciences Department, University of
#                       Wisconsin -- Madison
# All Rights Reserved.
#
# Permission to use, copy, modify and distribute this software and its
# documentation is hereby granted, provided that both the copyright
# notice and this permission notice appear in all copies of the
# software, derivative works or modified versions, and any portions
# thereof, and that both notices appear in supporting documentation.
#
# THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
# OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
# "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
# FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
#
# This software was developed with support by the Advanced Research
# Project Agency, ARPA order number 018 (formerly 8230), monitored by
# the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
# Further funding for this work was provided by DARPA through
# Rome Research Laboratory Contract No. F30602-97-2-0247.
#
#   -- do not edit anything above this line --   </std-header>

#
#	Test allocation & abort of pages
#	T1: alloc R1/P1
#	T2: alloc R2/P1
#	T1: abort
#	T2: commit
#

source $script_dir/vol.init

# format for body size -- >= one page
set half [expr { $max_small_rec / 2 } ]
# echo max=$max_small_rec half_max=$half

set half [expr { $half - 30 } ]
set hformsize ${half}

set big [expr {$max_small_rec - 30 } ]
set formsize  ${big}

# echo small=$half big=$big

proc t1 {} {
    global volid  f0 formsize hformsize dbf
    sm begin_xct

    verbose t1: consume first page...
    set r1 [sm create_rec $f0 hdr 1000 [formatlong 0 $formsize %010d 10] ]
    set junk [sm read_hdr $r1 0 0 0]
    set sizes [lindex $junk 1]
    verbose t1: created rec $r1 $sizes


    verbose t1: create rec to allocate a new page...
    set r2 [sm create_rec $f0 hdr 1000 [formatlong 0 $hformsize %010d 10] ]
    set junk [sm read_hdr $r2 0 0 0]
    set sizes [lindex $junk 1]
    verbose t1: created rec $r2 $sizes

sync

    verbose t1: aborting
    sm abort_xct
    verbose t1: aborted
}

proc t2 {} {
    global volid  f0 logging hformsize dbf
    sm begin_xct
    verbose t2: create another rec on 2nd page

    set r1 [sm create_rec $f0 hdr 1000 [formatlong 0 $hformsize %010d 10] ]
    set junk [sm read_hdr $r1 0 0 0]
    set sizes [lindex $junk 1]
    verbose t2: created rec $r1 $sizes

sync
    verbose t2: yielding
    yield
    verbose t2: committing
    sm commit_xct
    verbose t2: committed
}

sm begin_xct
set f0 [sm create_file $volid]]
verbose created file $f0
sm commit_xct

set y1 [fork_thread t1 {}]
set y2 [fork_thread t2 {}]

sync_thread $y1 $y2 
join_thread $y1 $y2 

sm begin_xct
sm destroy_file $f0
sm commit_xct

unset f0 
unset y1 y2
unset half big formsize hformsize
