<std-header style='plain' orig-src='shore'>

 $Id: thread_debug,v 1.10 1999/06/07 19:09:23 kupsch Exp $

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

  -- do not edit anything above this line --   </std-header>

This document contains some hints to debugging threads.
Specifically, it focusses on the issue of getting
stack traces from all blocked threads in gdb.
Simply setting the stack pointer register in gdb is not sufficient,
at least on sparcs (where register windows seem to be a problem).

Ultimately we'd like some combination of gdb macro and
thread functions allow us to arbitrarily switch stacks
and run the gdb "where" command.

Dan had the idea of setting a break point just before context switching
is complete and then calling the context switch function with
parameters for the specific thread to switch to.

We discovered that:

The place to set the break point is:

    sthread_core_switch at stcore.c:741

    break stcore.c:741

This is the last line of sthread_core_switch. 

Next, use the output of:
    call dumpthreads()
too find the address of the sthread_t structure for the
thread you want to switch to.  Assume the address is 0xZZZZZZZZ

Then run:
   call sthread_core_switch(&me()->_core, &((sthread_t*)0xZZZZZZZZ)->_core, 0) 

   call sthread_core_switch(&me()->_core, &((sthread_t*)0x829ac50)->_core, 0) 

This switched from "me" to the 0xZZZZZZZZ thread.  You can now
run "where".

At this point you can call sthread_core_switch() again for
a different thread and run where again.

