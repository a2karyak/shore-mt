\documentstyle[html,titlepage,shore]{article}
\pagestyle{plain}
\makeindex
\sloppy

\title{Shore Storage Manager Installation Manual\thanks{
This research is sponsored
by the Advanced Research Project Agency, ARPA order number 018 (formerly
8230), monitored by the U.S. Army Research Laboratory under contract
DAAB07-92-C-Q508.
Further funding for this work was provided by DARPA through Rome
Research Laboratory Contract No. F30602-97-2-0247.
}}
\author{The Shore Project Group \\
Computer Sciences Department \\
UW-Madison \\
Madison, WI  \\
\shoreversion \\
\shorecopyright
}
\date{\today}

\begin{document}
\label{installation:TOP}
\maketitle
\tableofcontents
\pagebreak
\externallabels{}{../../labels.pl}
\externallabels{../installation}{labels.pl}

%% end boilerplate

\SHsection{installation:intro}{Introduction}

The Storage Manager
\shoreversion
distribution consists of documentation and source files.
This document describes how to install the documentation and source
files and how to build the Storage Manager from the sources.  

\label{sec:requirements}
\SHsection{installation:requirements}{Requirements}

To install the 
documentation and source files and build the software, you need:

\begin{itemize}
\item
a Sparcstation or Intel X86 processor  \hfill

\item 
UNIX : Solaris (we use SunOS  5.6) or 
Linux (we use RedHat Linux 2.0.36 - 
For various Linux distributors, see
\htmladdnormallink{http://www.redhat.com/}{http://www.redhat.com/},
\htmladdnormallink{http://www.debian.org/}{http://www.debian.org/},
\htmladdnormallink{http://www.slackware.com/}{http://www.slackware.com/},
and
\htmladdnormallink{http://www.suse.com/}{http://www.suse.com/}); 
with at least 8 MB bytes of {\em shared memory} \hspace*{\fill}
\linebreak OR \linebreak
Windows NT 4.0 with Cygwin installed (we use Cygwin\_nt-3.0 20.1
- see 
\htmladdnormallink{http://www.cygnus.com/}{http://www.cygnus.com/}
)
and with Visual C++ 6.0 (and all its service packs) installed.

\item
Perl 5 (we use 5.004\_04)
See
\htmladdnormallink{http://www.activestate.com/ActivePerl/}
{http://www.activestate.com/ActivePerl/} and
\htmladdnormallink{http://www.perl.com/}
{http://www.perl.com/}.


\item
You will also need the following, which come with Cygwin on NT 
and with RedHat Linux: 

\begin{itemize}
\item
gzip file (de)compression facility to unpack the release.
\item
GNU make.
\item
The Tcl library (version 8.0).  (We have heard reports of
problems using the version that comes wiht Cygwin. If you have
trouble, install the Scriptics version.)
\item
The normal Unix utilities like {\tt csh, sh,
mv, ar, ld, tar, sed}, etc.
\end{itemize}

\item
The following C++ compiler:
\begin{itemize}
\item
on Unix, gcc 2.7.2.3 or egcs (we use version 1.0.3)
\item
on NT (regardless of the build environment you use), you 
must have Visual C++ 6.0 installed to compile and link the Storage
Manager
\end{itemize}

\item
A PDF reader or printer for reading
the documentation.

\item
Lots of free disk space. 
The disk space requirements are roughly:
\begin{itemize}
\item
documents (files in both PDF and PS forms):  4.9 MB 
\item
sources alone: 9 MB.
\item
sources, docs, and space to build from scratch: 

\begin{itemize}
\item
Release version (without debugging symbols and without trace code):
(75 MB on NT, 
135 MB on X86, 
165 MB on Sparcstation)

\item
Debug version (with debugging symbols and with trace code):
(110 MB on NT, 
100 MB on X86, 
100 MB on Sparcstation)
\end{itemize}

\end{itemize}
\end{itemize}


The GNU software for Unix is available via ftp from 
\htmladdnormallink{ftp://prep.ai.mit.edu/pub/gnu}
{ftp://prep.ai.mit.edu/pub/gnu} or
\htmladdnormallink{ftp://gatekeeper.dec.com/pub/GNU}
{ftp://gatekeeper.dec.com/pub/GNU}.

The GNU software for NT comes with the Cygwin 
environment, which is available from
\htmladdnormallink{http://sourceware.cygnus.com/cygwin/}
{http://sourceware.cygnus.com/cygwin/}

If you are unfamiliar with Tcl, it stands for ``tool command language''.
It was developed by Dr. John Ousterhout at UC-Berkeley for
providing interfaces for tools, although it can be used
for more than that.  
It is used in a test shell for the Storage Manager.
You can build the Storage Manager without the tester, in which
case you do not need Tcl.

Tcl is available from
\htmladdnormallink{http://www.scriptics.com/}
{http://www.scriptics.com/}.

\SHsection{installation:warnings}{Warnings}

We recommend that you {\em not} use virus-detection programs with the 
Storage Manager, as they intercept I/O requests and may cause problems that
are difficult to diagnose; they will certainly deteriorate performance.
For similar reasons,  we recommend that logs and data volumes be placed 
on {\em local disks}.

\SHsection{installation:howto}{How to Use These Installation Instructions}

You can build this software in the following environments (and possibly others,
but we have tested only these).  The steps for building in these 
environments have the labels given below.   When following the instructions
in this manual, do not succumb to the temptation to skip over the prose 
between the labelled steps.  The labels only serve to distinguish steps that differ among environments.

\begin{description}
\item[\fbox{\bf UNIX}]  You can build on Linux or Solaris using the GNU utilities
(with the egcs or gcc compiler).
\item[\fbox{\bf NT-VS}] You can build on Windows NT using the Visual Studio 
development environment, with the Visual C++ compiler and linker.
The project files in the release build both Debug and Release versions
by default.   In both versions, the Storage Manager libraries are static (not dynamic link
libraries).  
\item[\fbox{\bf NT-CYG}] 
You can build on Windows NT using the GNU utilities provided with
the Cygwin installation.   This uses GNU Make, but compiles and links with the
native C++ compiler and linker (distributed with Visual C++).\footnote{You 
are welcome to modify the configuration to use the GNU utilities, 
but we have not tested this and do not provide instructions for doing so.
You will have to decipher our configuration scheme, which is admittedly arcane.
You should start by looking at the file {\tt config/shore.def} in the source release.}
\end{description}

To install this software using these instructions, you must use a 
Unix-like shell.  (You can install the software on NT without such a shell,
but these instructions do not help you with that.)
For NT,  we suggest that you use the Bash shell window that comes
with Cygwin (when installed, its icon is labelled "Cygwin B20").   
In our experience, some implementations of  {\tt tcsh}
for NT do not work with our make files.

The installation instructions refer to these two shell variables:

\begin{verbatim}
    set TARDIR=directory-that-holds-tar-files
    set SMROOT=directory-in-which-to-install-sm
\end{verbatim}

If you use the Bourne shell ({\tt /bin/sh}) or 
one of the shells derived from it, such as {\tt ksh} or 
{\tt bash}, omit the word \dblquote{set}:

\begin{verbatim}
    TARDIR=directory-that-holds-tar-files
    SMROOT=directory-in-which-to-install-sm
\end{verbatim}

The directory {\tt \$TARDIR} should already contain the tar files
{\tt doc-2.0.tar.gz} and {\tt src-2.0.tar.gz}
(or {\tt prj-2.0.tar.gz} if you plan to build 
on Windows NT using the Microsoft Visual Studio environment).

Whatever shell you use, make a directory in which to build and install
the Storage Manager.

\vspace*{6mm}

\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-VS} 
\fbox{\bf NT-CYG}
\begin{verbatim}
    mkdir -p $SMROOT
\end{verbatim}
\noindent
\hrulefill 

\SHsection{installation:installingdoc}{Installing the Documentation Release }

You must have
copied the tar files with FTP into the directory  {\tt \$TARDIR}.

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-VS} 
\fbox{\bf NT-CYG}
\begin{verbatim}
    mkdir -p $SMROOT/doc
    cd $SMROOT/doc
    gunzip -c $TARDIR/doc-2.0.tar.gz | tar xvf -
\end{verbatim}
\noindent
\hrulefill 

\vspace*{6mm}

\noindent
This installs a {\tt doc} directory containing the following subdirectories and 
files.  Both PostScript and PDF versions are included.
\begin{description}
\item[{\tt installation.\{pdf,ps\}}] This document.
\item[{\tt README}]  Contains copyright information.
\item[{\tt smdoc.\{pdf,ps\}}]  Hacker's guide to the source code. 
\item[{\tt ssmapi.\{pdf,ps\}}] Brief description of the programmer's interface (API) to the Storage Manager.
\item[{\tt manfc/}]  Manual pages (in Unix man style) for the code found in {\tt src/fc}, foundation classes (this has nothing to do with Microsoft foundation
classes).
\item[{\tt mancommon/}]
Manual pages (in Unix man style) for the code found in {\tt src/common}, more
code likely to be common to client and server sides.
\item[{\tt mansthread/}]
Manual pages (in Unix man style) for the code found in {\tt src/sthread}, the
Shore threads package.
\item[{\tt manssm/}]
Manual pages (in Unix man style) for the code found in {\tt src/sm}, the
Storage Manager proper.
\item[{\tt thread\_debug}]  An ASCII text file describing how to switch threads
when debugging with the GNU debugger, gdb.
\end{description}


\SHsection{installation:compiling}{Building The Storage Manager}

This section describes how to compile and link the Storage Manager.
The first thing you must do is to determine the paths to the utilities you
you will use so that you can set up your environment variables.
If you do not know where things are installed on your machine,
use the {\em Find} tool to identify the paths needed by searching
for the items given below.
\begin{description}

\item[{\tt cl.exe}]  
The native compiler.

\item[{\tt bash.exe}]  
The Cygwin tools.

\item[{\tt perl.exe}]  
Perl.

\item[{\tt STDLIB.H}]  
The system include files.

\item[{\tt MSVCRT.LIB}]  
The C libraries.

\end{description}


\SHsubsection{installation:environ}{Preparing your Environment}

After adjusting the three environment variables (Path, INCLUDE, LIB, and
MAKE\_MODE)
by following the instructions below, 
you must open a new shell to continue your work with the new path. 

\SHsubsubsection{installation:path}{PATH environment variable}

To build the system, {\tt perl, make, tar, } and the normal Unix
utilities must be in your PATH environment variable.  
If you are building on NT (whether {\bf NT-CYG} or {\bf NT-VS}),
be sure the Cygwin utilities 
(e.g., {\tt bash.exe})
are also in your path. 

\vspace*{6mm}

\noindent
\hrulefill \fbox{\bf UNIX} 
\begin{verbatim}
# for Bourne and its family of shells :
PATH=$PATH:<locations of Perl, GNU utils>

# for C and its family of shells :
setenv PATH=$PATH:<locations of Perl, GNU utils>
\end{verbatim}
\noindent
\hrulefill

\vspace*{6mm}
\noindent
\hrulefill \fbox{\bf NT-VS} 

Click on {\em Start - Settings - Control Panel - System - Environment}.
In the list of {\em User Variables},  click on {\em Path} and in the 
{\em Value} window,
add the location of Perl
and the Cygwin tools.
You must open a new shell to continue your work with the new path. 

\noindent
\hrulefill

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf NT-CYG}

If you are building with GNU make under Cygwin, 
your path environment variable must contain the path to the 
native compiler (Visual C++) and linker executables, {\tt cl.exe, link.exe},
as well as the paths to Perl 
and the Cygwin tools.

Click on {\em Start - Settings - Control Panel - System - Environment}.
In the list of {\em User Variables},  click on {\em Path} and in the 
{\em Value} window,
add the location of Perl, the Cygwin utilities and the VC++ compiler. 

\noindent
\hrulefill

\SHsubsubsection{installation:include}{INCLUDE environment variable}

When you build on NT (regardless of the build environment) using the
native VC++ compiler 
the compiler needs to \#include system include files.
It locates these by the paths in the {\tt INCLUDE} environment variable. 

\vspace*{6mm}
\noindent
\hrulefill \fbox{\bf NT-VS} 
\fbox{\bf NT-CYG}

Click on {\em Start - Settings - Control Panel - System - Environment}.
In the list of {\em User Variables},  click on {\em INCLUDE} and in the 
{\em Value} window,
add the paths to the compiler's include files
(e.g., {\tt STDLIB.H}).

\noindent
\hrulefill

\vspace*{6mm}

\SHsubsubsection{installation:lib}{LIB environment variable}

When you build on NT, some of the dynamic link libraries have
to be located.  The {\tt LIB} environment variable takes care
of that.  

\vspace*{6mm}
\noindent
\hrulefill \fbox{\bf NT-VS} 
\fbox{\bf NT-CYG}

Click on {\em Start - Settings - Control Panel - System - Environment}.
In the list of {\em User Variables},  click on {\em LIB} and in the 
{\em Value} window,
add the paths to the C run-time libraries 
(e.g., {\tt MSVCRT.LIB}).

\noindent
\hrulefill

\vspace*{6mm}

\SHsubsubsection{installation:makemode}{MAKE\_MODE environment variable}

When you build on NT with Cygwin Make, 
the {\tt MAKE\_MODE} environment variable should be set to \dblquote{UNIX}.

\vspace*{6mm}
\noindent
\hrulefill \fbox{\bf NT-VS} 
\fbox{\bf NT-CYG}

Click on {\em Start - Settings - Control Panel - System - Environment}.
In the panel labelled {\em Variable},  enter {\tt MAKE\_MODE},
and in the panel labelled {\em Value}, enter {\tt UNIX}.

\noindent
\hrulefill

\vspace*{6mm}


\SHsubsection{installation:untar}{Installing the Sources}

First, un-{\tt tar} the release somewhere. 
Go to a directory where you want to install the sources.
For simpilicity, we let that be {\tt \$SMROOT}.
Users of {\tt sh, ksh}, etc. should omit the word \dblquote{set}:

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-CYG}
\begin{verbatim}
    set SRCDIR=$SMROOT/build
    mkdir -p $SRCDIR
    cd $SRCDIR
    gunzip -c $TARDIR/src-2.0.tar.gz | tar xvf -
\end{verbatim}
\noindent
\hrulefill

\vspace*{6mm}
If you build with NT-VS, instead install the project and source files:
\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf NT-VS} 

\begin{verbatim}
    set SRCDIR=$SMROOT/build
    mkdir -p $SRCDIR
    cd $SRCDIR
    gunzip -c $TARDIR/prj-2.0.tar.gz | tar xvf -
\end{verbatim}

\vspace*{6mm}

\noindent
This installs the sources as described below, 
as well as a directory {\tt \$SRCDIR/nt\_buildsm},
which contains the Visual Studio project files.

\noindent
\hrulefill

\vspace*{6mm}

\noindent
Now you have the following files and directories in 
{\tt \$SRCDIR}:
\begin{description}
\item[{\tt GNUmakefile}]
A bootstrapping Makefile, which invokes {\tt imake}.
\item[{\tt Imakefile}]
Source from which Makefile is generaged by {\tt imake}.
\item[{\tt imake/}]
Sources for {\tt imake} and Perl script to bootstrap building of {\tt imake}.
\item[{\tt config/}]
Configuration files and other files read by {\tt imake}.
\item[{\tt tools/}]
Perl scripts ({\tt *.pl}) used by the build environment, including those that
generate source files ({\tt *\_gen.\{cpp,h\}})
in {\tt src/}.
\item[{\tt src/}]
Sources for Storage Manager, including inputs files ({\tt *.dat}) to Perl 
scripts for generating source files. 
\end{description}

After you have followed the directions below to build the Storage Manager,
you will also find
{\tt \$SRCDIR/installed}.

\SHsubsection{installation:config}{Setting Build-time Configuration Options}

Before you build the Storage Manager, you must give values to some
configuration options.   
The options are located in the file {\tt \$SRCDIR/config/shore.def}.

\begin{quote}
{\bf NOTE} 
The file {\tt shore.def} is \#included by the Makefiles, so
it controls what files are built and what tools are used
when building under {\tt make}, but not when building under
Visual Studio.
It is {\em also} \#included by the sources, so it controls 
conditional compilation in the sources, regardless what build
tools are used to build the software.
\end{quote}

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-VS}
\fbox{\bf NT-CYG}

The release contains several sample {\tt shore.def} files for
different configurations.  Choose the one that best suits your
environment.

\begin{verbatim}
    cd $SRCDIR/config
    ls shore.def.*

    #  choose the ARCH and VERS to suit your environment.
    set ARCH=linux
    set VERS=debug

    #  Use the appropriate shore.def
    cp shore.def.$ARCH.$VERS  shore.def

    # You MUST edit shore.def to provide the correct values for the 
    # PERL_DIR_PATH (see below).

    # You MUST edit shore.def to provide correct values for the 
    # TCL_DIR_PATH, TCL_DIR_VERSION and TCL_LIB_EXTENSION (see below)
    # or else you must undefine BUILD_DEFAULT_SSH (see below)
\end{verbatim}

\noindent
\hrulefill

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-VS} 
\fbox{\bf NT-CYG}

The file {\tt shore.def} 
contains numerous C-preprocessor macros that affect configuration
and compilation.  In the list of macros below, only the ones marked
with an asterisk (*) are required for building under Visual Studio.

Normally the only ones you care about are those described below.
The options controlling debugging support and optimization take one of 
the values {\tt
ON} and {\tt OFF}.  We describe them briefly here.  
More information
about the effects of these options can be found by reading the comments
in {\tt shore.def}.
Some of the \dblquote{options} are not optional (they do not work).
For exampoe, {\tt USE\_COORD} assumes the existence of code that is not
distributed in this release.

\begin{description}
\item [{\tt DEBUGCODE}] controls whether auditing and assert checking
code is generated.  For development and testing purposes we strongly
suggest setting this to {\tt ON}.  Turning it on seems to slow things
down by a factor of two, at least.

\item [{\tt TRACECODE}] controls whether tracing code is installed.
For development and testing purposes we strongly
suggest setting this to {\tt ON}.  Turning it on seems to slow things
down by a factor of two, at least.

\item [{\tt DEBUGGERSYMBOLS}] controls the generation of symbols
for use by debuggers ({\tt -g} flag for {\tt gcc}).

\item [{\tt OPTIMIZE}] controls compiler flags related to
optimization.  
When {\tt OPTIMIZE} is {\tt OFF} and you are compiling with {\tt gcc}, 
{\tt gcc} is called with {\tt -O} because this seems to avoid {\tt
gcc} bugs (at least in earlier versions of {\tt gcc}).

\item [{\tt TCL\_DIR\_PATH}]  You must define this to point to the location of
your installed TCL if you choose to build the tester, {\tt ssh}.
To build the name of the library, the build system appends 
{\tt /lib/lib}{\em VER}{\bf ext} to this path, where
{\em VER} is the value of 
{\tt TCL\_DIR\_VERSION}, below,
and
{\bf ext} is the value of 
{\tt TCL\_DIR\_EXTENSION}, below.

\item [{\tt TCL\_DIR\_VERSION}]  If you choose to build the tester ({\tt ssh}),
you must define this to give the version
number in the name of the Tcl libraries in your installation.  If your 
library is installed as {\tt libtcl8.0.so}, you should define 
TCL\_DIR\_VERSION to be 8.0. 

\item [{\tt TCL\_DIR\_EXTENSION}]  If you choose to build the tester 
({\tt ssh}) on Unix,
you must define this to determine which Tcl library will be linked with 
{\tt ssh}.  On NT, this is ignored.
On Unix, this must be {\tt .a} for the static library 
or it must be {\tt .so} for the dynamic load library.
If it is undefined, the static library is used.  Note the \dblquote{.}.

\item [{\tt INSTALL\_PATH}]  If you want {\tt make install} 
to install anywhere other than {\tt \$SMROOT/installed/}, set this.
This has no effect on builds with Visual Studio.

\item [{\tt *PERL\_DIR\_PATH}]
Location of Perl (needed to build Makefiles and generated sources).
The build system appends {\tt /bin/perl} to this path.
{\em This MUST be set to the proper path before you can create the
generated source files (a prerequisite to building, regardless which 
environment you are using.}

\end{description}

The following options are simply 
{\tt \#define}-d or 
{\tt \#undef}-ed.
\begin{description}
\item [{\tt BUILD\_DEFAULT\_SSH}] If defined, the Storage Manager tester shell 
{\tt ssh} is built automatically (this requires Tcl).  
You can undefine it to avoid building {\tt ssh}\footnote{This shell has nothing
to do with the other {\tt ssh}, the Secure Shell.}.

\item [{\tt BUILD\_DEFAULT\_SMLAYER\_TESTS}] You can define this to cause the
default make target to descend into the various {\tt tests/} directories and
build the unit tests.  WARNING: this consumes lots of disk space!

\item [{\tt FORCE\_EGCS}]  Undefine this if you use {\tt gcc} Version 2.7.3 rather
than {\tt egcs}.

\item [{\tt *DONT\_TRUST\_PAGE\_LSN}]  If this is defined, formatting of volumes
is faster at the expense of longer recovery, as page formats must be redone
during recovery.  If this is undefined, the LSNs on pages are trusted to have
been cleared when the volume was formatted, which means that when
volumes are formatted, each page on the volume is initialized.
With large volumes, this takes a long time.
\end{description}

\noindent
\hrulefill

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf NT-VS} 

For building with Visual Studio, some of the configuration options 
are in the project files, and since there are many projects that 
make up the Storage Manager, it is not easy to change these options.   
For this reason, we have put as many configuratin options as possible
in source files that are included during compilation and generated
by the build system.

The path to 
Tcl {\em must} be provided if the tester {\tt ssh} is to be built, but
it must be provided by editing files other than {\tt config/shore.def}.

Now you must edit two files to locate your installed Tcl.  (These files
are {\em not} generated or edited by the build process.  It is
best if you make a backup copy of these files before you edit them.)

Both files are in {\tt \$SRCDIR/nt\_buildsm/src/smlayer/sm/ssh}:
\begin{description}
\item[{\tt ssh.dsp}]  Locate two instances of the string {\tt tcl80.lib}
and edit the paths as appropriate to your installation of Tcl.
\item[{\tt local\_flags.i}]
Change the last line to reflect the path for your installation of Tcl.
\end{description}

This editing can be done with the 
{\tt sed}  script {\tt fix\_tcl.sh}, which can be {\em sourced} in a {\tt bash}
shell, or the files can be hand-edited.  If you use the script, you must
first edit the variables {\tt TCLINCLUDE} and {\tt TCLLIB}
appropriately.  Be careful to escape backslashes in the paths.

\noindent
\hrulefill

\pagebreak[1]

\SHsubsection{installation:generated}{Creating Generated Files}

\vspace*{2mm}

When building with {\tt make}, you must generate the
Makefiles and several source 
files\footnote{Generated source files are called {\tt *\_gen.h} 
and {\tt *\_gen.cpp}} 
with {\tt imake}.
The source directory contains {\tt imake}, 
along with a Perl script to bootstrap {\tt imake}.   

{\em This step must be taken even if you are building 
with Visual Studio,
because the tar file containing the source and the project files
does not contain the generated files.  
See the section 
\htmlextref{Omitting {\tt ssh}}{installation:regenerate}
below.
}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf NT-VS}
\fbox{\bf NT-CYG}
\begin{verbatim}
    # Do not do these steps on Unix.
    cd $SRCDIR
    make for_vstudio 

\end{verbatim}
\noindent
\hrulefill

\vspace*{6mm}
\noindent
Under Unix, 
this \dblquote{make} step is optional, and the target is 
{\tt automatic}
rather than
{\tt for\_vstudio};
it is optional because it is accomplished by 
the compilation step (in the next subsection).

\SHsubsection{installation:compile}{Building the Storage Manager}

Now that you have installed the sources (and project files, if
building with Visual Studio) and generated any necessary files,
you can build the libraries.  The distribution is configured to build the
libraries and the Storage Manager tester shell {\tt ssh}.  If you do not wish
to build {\tt ssh}, see the  section 
\htmlextref{Omitting {\tt ssh}}{installation:nossh}
below.

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf NT-VS} 


Using the Explorer, navigate to the directory
{\tt \$SRCDIR/nt\_buildsm/src} and 
{\em click on} {\tt src.dsw}
to open the workspace with Visual C++.
The first time you open the workspace, you will see a dialog box 
indicating that Visual Studio cannot find one
or more of the components of the workspace.  This refers to the {\tt .ncb}
file, which is generated by Visual Studio if it is missing.
\footnote{You must have installed Visual C++/Visual Studio 6.0!}

Having opened the workspace, {\em click the following sequence:
Build - Batch Build - Build}.
This 
builds both the Debug and Release versions of the
Storage Manager and its tester, and it takes 2-3 hours.
If you wish to build only one or the other, see
\htmlextref{Building only the Debug or Release Version}{installation:noDebug},
below.


\noindent
\hrulefill

\vspace*{6mm}
\pagebreak[1]
\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-CYG}
\begin{verbatim}
    cd $SRCDIR
    make
\end{verbatim}

\noindent
This takes 30 - 60 minutes, depending on the architecture and your choice of
versions to build (Debug or Release).

\noindent
\hrulefill

\SHsubsection{installation:subsets}{Selecting Subsets to Build}

\SHsubsubsection{installation:nossh}{Omitting {\tt ssh}}
If you do not wish to build the tester ({\tt ssh}):

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-CYG} 

Undefine {\tt BUILD\_DEFAULT\_SSH} in the configuration file
{\tt shore.def} and (re-)start with the step 
\htmlextref{Creating Generated Files}{installation:generated},
above.

\noindent
\hrulefill

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf NT-VS} 

Having opened the workspace with Visual C++, 
{\em click the following sequence: Build - Batch Build}.
Locate the two project conigurations for ssh in the list
({\tt ssh - Win32 Debug} and {\tt ssh - Win32 Release})
and click on them.  The check marks next to them should 
disappear.  Now {\em click on Build}.

\noindent
\hrulefill

\SHsubsubsection{installation:noDebug}{Building only the Debug or Release Version}

\vspace{6mm}
If you wish to build only the Debug or Release versions of the Storage Manager:

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-CYG} 

In the Unix and Cygwin environments, only one of the versions 
(Debug or Release) is built.  If it is not the one you want, do one of the
following:
\begin{itemize}
\item
Go back to the step 
\htmlextref{Setting Configuration Options}{installation:config}
and
choose a different {\tt shore.def} file.  Continue from there.
\item
Change the values for {\tt DEBUGCODE}, {\tt TRACECODE}, and {\tt OPTIMIZE}
in the file
{\tt \$SRCDIR/config/shore.def}, as described in the section
\htmlextref{Setting Configuration Options}{installation:config},
above.
Continue with the step 
\htmlextref{Creating Generated Files}{installation:generated},
above.
\end{itemize}

\noindent
\hrulefill

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf NT-VS} 

Having opened the workspace with Visual C++, 
{\em click the following sequence: Build - Batch Build}.
Locate the all project conigurations labelled 
{\em xxx}{\tt - Win32 Debug} and click on them.  
The check marks next to them should 
disappear.  Now {\em click on Build.}

\noindent
\hrulefill

\vspace*{6mm}

\SHsubsubsection{installation:regenerate}{Regenerating Source Files}

If you choose to modify code and wish to re-build from scratch,
regardless of your build environment, you can do so.
Even if you are building with Visual Studio, you {\em must} use the
Cygwin utilties to regenerated the (generated) source files.

If you want to change the configuration or if you are modifying sources,
you can use
\begin{description}
\item[{\tt make make}] to create the Makefiles.
\item[{\tt make automatic}] on UNIX, to generate Makefiles and
generated source files. 
\item[{\tt make for\_vstudio}] on NT, to generate Makefiles and
generated source files. 
\item[{\tt make depend}] to make dependencies. (UNIX, NT-CYG)
\item[{\tt make clean}] to remove all object and executable files. (UNIX,
NT-CYG)
\item[{\tt make pristine}] to remove all generated files. (UNIX, NT-CYG)
\end{description}


\SHsubsubsection{installation:unit}{Building Unit Tests}

The Storage Manager comes with unit tests for each library.
The directories containing the source for each library also contains a
subdirectory called {\tt tests/}.
{\em By default, these tests are not built.}
You can build them as follows:

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf UNIX}
\fbox{\bf NT-CYG}

Descend to the {\tt tests} directory of choice.  Run
\begin{verbatim}
    make automatic
    make
\end{verbatim}

This builds all the tests in that directory.  You can build a test 
{\tt foo} ({\tt foo.exe} on NT)
with

\begin{verbatim}
    make foo  # make foo.exe on NT
\end{verbatim}

\noindent
\hrulefill

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf NT-VS} 

Open Visual Studio on the workspace {\tt ntbuild\_sm/src/src.dsw}.
Choose the project whose name matches the test of interest.
Select it with a right click, make it the active project if necessary,  
and {\em click Build (selection only)} .
Remember that there are two versions of each project, a Debug and a Release
version.  The easiest way to choose one or the other is by using the sequence
{\em Build - Set Active Configuration}, select the item in the list 
of {\em Project configurations}, then use any of the myriad ways to build
the selected project.

\noindent
\hrulefill
\vspace{6mm}

If you wish to build one or more test programs for the threads layer,
descend to
{\tt src/smlayer/sthread/tests}.
One test of interest is {\tt ioperf}:
It can be used to measure I/O performance through the threads package.
Below is its usage information.

\begin{verbatim}
(prompt): ioperf
Usage: ioperf [-s block_size] [-n block_count] [-R random] [-l local_io] [-f
fastpath_io] [-k keepopen_io] [-c check_flag] [-r read_only] [ -w write_only]
[-b read_and_write] file
\end{verbatim}
\begin{description}
\item[{\tt -s block\_size}]  Determines the size of a write or read request, as
in {\tt dd}.
\item[{\tt -n block\_count}] Determines the total number of blocks read or
written.
\item[{\tt -R }] If used, {\tt ioperf} issues seeks to pseudo-random locations
within the range [0,block\_count].
\item[{\tt -l }] If used, {\tt ioperf} performs I/O requests locally rather than
through the {\tt diskrw} process [Unix only].
\item[{\tt -f }] Ignore. (Not implemented.)
\item[{\tt -k }] Ignore.
\item[{\tt -c }] Perform internal sanity check on seek cursor.
\item[{\tt -r }] Read the file.
\item[{\tt -w }] Write the file.
\item[{\tt -b }] Read and write the file.
\item[{\tt file }]  Name of file (or device).
\end{description}

Before you can run the program under Unix, it must have access to the
{\tt diskrw} program.   (On NT, the diskrw functions run in a thread of
the program rather than in a separate process.)

For example (UNIX) :

\begin{verbatim}
# locate diskrw
ln -s ../diskrw

# create a file called "junk"
ioperf -s 8192 -n 1000 -w junk

# read junk (sequentially)
ioperf -s 8192 -n 1000 -r junk

# read junk (pseudo-randomly)
ioperf -s 8192 -n 1000 -R junk

\end{verbatim}

\SHsection{installation:installing2}{Installing The Storage Manager}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-CYG}

The command {\tt make install} installs the executable files in 
{\tt \$SRCDIR/installed/bin}, the include files in 
{\tt \$SRCDIR/installed/include},
and other
supporting files in 
{\tt \$SRCDIR/installed/lib}.

\begin{verbatim}
    cd $SRCDIR
    make install
\end{verbatim}

To install elsewhere, simply move this directory, or
change the target location by updating the macro {\tt INSTALL\_PATH}
in {\tt shore.def} before you build.  See the section 
\htmlextref{Setting Configuration Options}{installation:config}, above.

\noindent
\hrulefill

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf NT-VS} 

In a Bash shell, you can source the script {\tt install\_all}.
If you want to change the destination directory, edit this script.
You must also edit the script to choose between Debug and Release versions.

\begin{verbatim}
    cd $SRCDIR
    #
    # edit install_all to change the default target of the install
    #
    source install_all
\end{verbatim}

\noindent
\hrulefill

\SHsection{installation:testing}{Testing Your Installation}

This section lists steps to test your installation.
Included are painfully brief instructions for running the 
Storage Manager tester.
We do not include complete documentation for this tester; rather,
we just give a single command to run a large set of test scripts.

\SHsubsection{installation:runningssh}{Running {\tt ssh}}

The Storage Manager shell (tester) is built with the include files
and libraries in the source tree (not with the installed Storage
Manager).
The directories in which {\tt ssh} is built is the easiest place to
run {\tt ssh}.

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-CYG} 
\begin{verbatim}
    cd $SRCDIR/src/smlayer/sm/ssh
\end{verbatim}

\noindent
\hrulefill

\vspace*{6mm}
\pagebreak[1]
\noindent
\hrulefill \fbox{\bf NT-VS} 
\begin{verbatim}
    cd $SRCDIR/nt_buildsm/src/smlayer/sm/ssh
\end{verbatim}

\noindent
\hrulefill

\vspace*{6mm}

\noindent
Now create directories in which to store the data and log,
and copy (and edit, if you like) the configuration file
for the Storage Manager and the startup file for {\tt ssh}.
NOTE: The buffer pool must be fairly large (3.2 MB) to get 
through all the tests, because some of the tests \dblquote{hog} 
buffer pool frames.

\vspace*{6mm}

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-CYG} 
\fbox{\bf NT-VS} 

\begin{verbatim}
    mkdir -p volumes log
    cp .shoreconfig.example .shoreconfig
    cp .sshrc.example .sshrc
\end{verbatim}

\noindent
\hrulefill

\vspace*{6mm}

\noindent
You are ready to run {\tt ssh}.
Be sure that in the context in which you run {\tt ssh},  
{\tt ./volumes} and {\tt ./log} are on a {\em local disk}.
Ssh can be run on a short script just to verify that things are
properly built, or it can be run on a full set of scripts (this takes several hours with a Debug version, and an hour or more with a Release version).

\pagebreak[1]
\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-CYG} 

\begin{verbatim}
    # short test:
    ./ssh -f scripts/vol.init 
    devid_t::devid_t(./volumes/dev1): open:
    1. error in sdisk_unix.cpp:157 Operating system error  --- No such file or directory
    # You can safely ignore the above messages (if you get it), which is
    # a warning message issued when no log files are encountered at 
    # recovery time.
    # Under NT, the message is slightly different: "The system cannot find the
    # file specified."

    # long test:
    ./ssh -f scripts/all 
\end{verbatim}

\noindent
\hrulefill

\vspace*{6mm}

\pagebreak[1]

\noindent
\hrulefill \fbox{\bf NT-VS} 

\begin{verbatim}
    # short test:
    Release/ssh.exe -f scripts/vol.init 
    # The first time you run this, you should see a message
    # akin to the one shown above (in the Unix case).

    # long test:
    Release/ssh.exe -f scripts/all 
\end{verbatim}

\noindent
\hrulefill

\SHsubsection{installation:runningfilescan}{Running {\tt file\_scan}}
In {\tt src/smlayer/sm/tests} is a sample program that populates and
scans a file.   
The directory contains a sample makefile, {\tt Makefile.gcc}
for use with {\tt gcc}.  
This make file builds with the 
{\bf installed} Storage Manager include files and libraries.
You must already have taken the steps in the section
\htmlextref{Installing The Storage Manager}{installation:installing}, above.

Edit the Makefile.gcc to refer to the correct {\tt INSTALL\_DIR}.
{\em It is also important to set the {\tt GCC} macro
to use the same compiler used to build the Storage Manager.}


The file {\tt exampleconfig} is the run-time configuration file read by {\tt
file\_scan}.  
Be sure that in the context in which you run {\tt file\_scan},  
{\tt ./volumes} and {\tt ./log} are on a {\em local disk}.

\vspace*{6mm}

\pagebreak[1]

\noindent
\hrulefill \fbox{\bf UNIX} 
\fbox{\bf NT-CYG} 

\begin{verbatim}
    cd $SRCDIR/src/smlayer/sm/tests

    # Edit Makefile.gcc as needed

    make -f Makefile.gcc
    mkdir -p log volumes

    file_scan -i
    # Ignore message about no such file or directory.

    file_scan
\end{verbatim}

\noindent
\hrulefill

\vspace*{6mm}

\pagebreak[1]

You can build this test with Visual Studio, but the installed workspace
does not build against the libraries and include files that you just installed.
It builds with those found in the source directories.  If you want to
build against those you installed, you must change the dependencies and files
associated with the project.

\noindent
\hrulefill \fbox{\bf NT-VS} 

\begin{verbatim}
    cd $SRCDIR/nt_buildsm/src/smlayer/sm/file_scan
    mkdir -p log volumes
\end{verbatim}

Open the workspace with Visual C++. 
{\em Click the following sequence: Build - Batch Build}.
Locate the two project conigurations for file\_scan in the list
({\tt file\_scan - Win32 Debug} and {\tt file\_scan - Win32 Release})
and click on one or the other.  The check mark next to it should 
appear.  
Now {\em click on Build}.
After it is built, 
{\em click the following sequence: Build - ! Execute file\_scan.exe}.

\noindent
\hrulefill

\SHsection{installation:shoreconfig}{Setting Run-time Configuration Options}

The Storage Manager requires the setting of configuration options, 
which is normally done by reading a configuration file in the 
the {\tt main} program.
The sources for {\tt ssh} show how this is done.  The sample
configuration file {\tt \$SRCDIR/src/smlayer/sm/ssh/.shoreconfig.example}
shows the format of configuration options.

A complete list of the run-time configuration options is in the sources, in
{\tt src/smlayer/sm/sm.cpp}.  In that file, each call to the function {\tt
add\_option} creates a run-time option.   There is also a manual page describing
run-time options; the manual page is {\tt manssm/ssm\_options.pdf}.

\end{document}
