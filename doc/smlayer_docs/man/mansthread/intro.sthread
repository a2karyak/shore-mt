.TH INTRO STHREAD "Jan 1999" Release \*(SV" "Shore Storage Manager" "Release 2.0" "Shore Storage Manager Reference Manual"
.so tmac.man.local
.SH NAME
INTRO \- Introduction to the Shore Threads Package 
.SH SYNOPSIS

The Shore Thread Package (sthread) provides C++ style light-weight
processes.  It provides the following facilities (further
described by documents referenced in the See Also section):
.IP "Threads"
.IP "Mutexes"
.IP "Conditional variables"
.IP "Event semaphores"
.IP "Asynchronous disk I/O"
.IP "Asynchronous file I/O handlers"

.SH DESCRIPTION
.LP
The thread mechanism allows several threads of control to share the
same address space. Each thread is represented by an instance of
.FN sthread_t
class.  Once created, a thread is an independent entity
with its own stack.
.LP
In a C++ program, the sthread initialization code is built into the
library such it will execute before the 
.FN main()
function begins. The
initialization code is responsible for spawning a
.FN main_thread,
such that, when the initialization function returns, it returns in the
context of the 
.FN main_thread.
This ensures that the program
executes in a threaded environment from the beginning.

.SH ENVIRONMENT

Sthread currently runs on the following processors/platforms:
.IP "DecStation 3100 and 5000 series (MIPS, Ultrix)"
.IP "Intel Paragon (i860, OSF/1)"
.IP "HP 700 series (HP-PA, HP-UX 8.0 and 9.0)"
.IP "Sparcstation (SunOS 4.3.1, Solaris)"
.IP "x86 (Linux, Solaris)"
.IP "Silicon Graphics (Irix)"

.SH ERRORS
See
.SA errors(sthread)

.DA
.SH "SEE ALSO"

.LP Thread Class:
.SA sthread_t(sthread)
.LP Mutex Class:
.SA smutex_t(sthread)
.LP Condition Variable Class:
.SA scond_t(sthread)
.LP Event Semaphore Class:
.SA sevsem_t(sthread)
.LP File Descriptor Handler Classes:
.SA file_handlers(sthread)
