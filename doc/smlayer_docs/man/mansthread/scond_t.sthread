.TH SCOND_T STHREAD "Jan 1999" Release \*(SV" "Shore Storage Manager" "Release 2.0" "Shore Storage Manager Reference Manual"
.so tmac.man.local
.SH NAME
scond_t \- Shore Condition Variable Class
.SH SYNOPSIS
.EX
#include <sthread.h>

/*
 *  Condition Variable
 */
class scond_t : public sthread_named_base_t  {
public:
    NORET			scond_t(const char* name = 0);
    NORET			~scond_t();

    w_rc_t			wait(
	smutex_t& 		    m, 
	int4_t			    timeout = WAIT_FOREVER);
    void 			signal();
    void 			broadcast();
    bool			is_hot() const;

};

.EE
.SH DESCRIPTION


Threads usually wait on a
conditional variable because they can only continue after a certain
condition is met (for example, a consumer thread might wait for the
condition that the input queue is not empty).  Every condition
variable should be protected by a
.FN smutex_t.

.LP
.B "scond_t(name)"
.IP
The constructor creates a condition variable.  The
.VA name
parameter is stored in the condition variable for debugging purposes.

.LP
.B "~scond_t()"
.IP

.LP
.B "wait(mutex, timeout)"
.IP
The
.FN wait
method suspends the current thread, which must hold 
.VA mutex,
on the
condition variable and releases 
.VA mutex.
Later, when the condition
variable is
.I signaled,
the thread is awakened and it will reacquire
.VA mutex
before returning from 
.FN wait.

.LP
.B "signal()"
.IP
The
.FN signal
method wakes up
.I "at least one"
thread waiting on the condition variable.

.LP
.B "broadcast()"
.IP
The
.FN broadcast
method wakes up
.I all
threads waiting on the condition variable.

.LP
.B "is_hot()"
.IP
The
.FN is_hot
method returns
.FN true
if at least one thread is waiting on the condition.

.SH ERRORS

TODO.

.SH EXAMPLES

TODO.

.DA

.SH "SEE ALSO"
.SA errors(sthread),
.SA sthread_t(sthread),
.SA smutex_t(sthread),
.SA sevsem_t(sthread),
.SA file_handlers(sthread),
.SA intro(sthread).

