.TH RC FC "Jan 1999" Release \*(SV" "Shore Storage Manager" "Release 2.0" "Shore Storage Manager Reference Manual"
.so tmac.man.local
.SH NAME
w_rc_t \- Shore return code
.SH SYNOPSIS
.EX
.IN w.h
.IN w_rc.h
class w_rc_t;
class w_rc_i;
.EE
.SH DESCRIPTION
.LP
The class
.VA w_rc_t
encapsulates integer error codes,
prints error messages for the error codes,
lets you build and print stack traces when error codes
are returned, and prints an error message if 
the error codes are not evaluated (checked for errors).
.LP
If a function returns a
.VA w_rc_t
that is ignored, the  
.VA w_rc_t
prints the message
.EX
Error not checked
.EE
when the instance is destroyed.  The error message
is printed by the
.FN error_not_checked
method, making it a useful debugging breakpoint.
The 
.VA w_rc_t
maintain reference counts on the various 
.VA w_error_t
structures for the purpose of collecting
garbage.
.SH "MACROS"
.LP
Use the following macros to create and manipulate return codes:
.IP "rc = RC(e)" 10
Constructs an instance of
.VA w_rc_t
containing the current line and file information
and the error code 
.VA e.
If 
.VA e
is the constant
.VA w_error_t::no_error,
the resulting 
return code's Boolean conversion operator returns 
.VA false, 
otherwise it returns 
.VA true.
returns 
.IP RCOK 10  
Constructs an instance of
.VA w_rc_t
that signifies no error;
equivalent to 
.EX
	w_rc_t(w_error_t::no_error);
.EE
.IP "rc = RC_AUGMENT(rc)" 10  
Adds the current line number and file name to the 
information stored in 
.VA rc.
.IP "rc = RC_PUSH(rc, e)" 10  
Pushes a new error code,
.VA e,
onto the stack along with the
current line number and file name.
.SH "DISPLAYING ERROR MESSAGES"
.LP
Printing an instance of 
.VA w_rc_t
descriptive string for the error code to be printed,
along with the stack trace  (line numbers and file names).
.EX
	...
	return RC(eUSERABORT);

	...
	w_rc_t rc = RC(eUSERABORT);

	cerr << rc << endl;
.EE
.SH "REFERENCE COUNTING"
.LP
References to 
.VA w_rc_t
structures are counted.
Return codes that are 
destroyed without being checked
cause this message to be printed to the 
standard error stream:
.EX
Error not checked
.EE
.LP
Checking a return code amounts to seeing if
its Boolean conversion operator is true or false:
.EX
	// call method z, which returns
	// an instance of w_rc_t
	rc = z(); 
	if(rc) {
		// error case
	} else {
		// z() returned RCOK
	}
.EE

.SH "FORGETTING TO RETURN A W_RC_T"

Sometime a function that returns a
.FN w_rc_t
will not due so due to a bug.  The compiler should
catch this, but we've seen gcc miss it.  As a result,
your program may crash with a stack trace something
like this (from gdb):
.EX
    #0  0xef7991dc in strrchr ()
    #1  0x44a0 in __ls__FR7ostreamRC9w_error_t (o=@0x10c33c, obj=@0xa000)
        at w_error.c:197
    #2  0xa8728 in __ls__FR7ostreamRC6w_rc_t (o=@0x10c33c, obj=@0xeffff840)
        at w_rc.c:81
    #3  0xa8690 in fatal__6w_rc_t (this=0xeffff840) at w_rc.c:56
    #4  0x3ba4 in main (argc=-268437392, argv=0xeffff914) at hello.C:154
.EE

.SH "RC-LITE"
.LP
When Shore is configured with -DCHEAP_RC (not the default),
a lighter-weight implementation of the class
.VA w_rc_t
is used (it is found in
.IN w_cheaprc.h
) in order to reduce processing costs.
In this case, all the macros described here are defined, but
many of them do nothing, since the cheaper implementation
of the class maintains no stack trace, line numbers, or file names.
All it stores is a single integer representing a single error,
and it does no reference-counting. 
.DA
.SH "SEE ALSO"
.SA error(fc)
and
.SA intro(fc).
