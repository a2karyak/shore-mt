.TH ss_m::volume ssm "Jan 1999" "Release \*(SV" "Shore Storage Manager" "Release 2.0" "Shore Storage Manager Reference Manual"
.so tmac.man.local
.SH NAME
generate_new_lvid, create_vol, destroy_vol, add_logical_id_index, has_logical_id_index, get_volume_quota, print_lid_index, vol_root_index, get_du_statistics \- Class ss_m Methods for Volume Management

.SH SYNOPSIS
.EX
#include <sm_vas.h>  // which includes sm.h

static rc_t 			generate_new_lvid(lvid_t& lvid);
static rc_t			create_vol(
    const char* 		    device_name,
    const lvid_t&		    lvid,
    uint4			    quota_KB,
    bool 			    skip_raw_init = false,
    vid_t			    local_vid = vid_t::null);
static rc_t			destroy_vol(const lvid_t& lvid);
static rc_t			add_logical_id_index(
    const lvid_t& 		    lvid,
    uint4 			    reserved_local, 
    uint4 			    reserved_remote);
static rc_t			has_logical_id_index(
    const lvid_t& 		    lvid,
    bool&			    has_index);
static rc_t    			get_volume_quota(
    const lvid_t&                   lvid, 
    smksize_t&                      quota_KB, 
    smksize_t&                      quota_used_KB);
static rc_t			print_lid_index(const lvid_t& lvid);

/* Logical-ID version */
static rc_t                  	vol_root_index(
    const lvid_t&                   v,
    serial_t&                       liid);

/* Phsical-ID version */
static rc_t                  	vol_root_index(
    const vid_t&               	    v,
    stid_t&                   	    iid);
static rc_t                  	vol_root_index(
    const vid_t&               	    v,
    stid_t&                   	    iid);


// Volume space utilization statistics

static rc_t			get_du_statistics(
    lvid_t 			    vid,
    sm_du_stats_t&		    du,
    bool			    audit = TRUE);
static rc_t			get_du_statistics(
    const lvid_t& 		    vid,
    const serial_t&	 	    serial, 
    sm_du_stats_t& 	    	    du,
    bool			    audit = TRUE);
/* Physical-ID version */
static rc_t			get_du_statistics(
    vid_t 			    vid,
    sm_du_stats_t&		    du,
    bool			    audit = TRUE);
static rc_t			get_du_statistics(
    const stid_t& 		    stid,
    sm_du_stats_t& 	    	    du,
    bool			    audit = TRUE);

.EE
.SH DESCRIPTION

The above class
.FN ss_m
methods manage volumes.
.LP
Volumes are a logical unit of storage that are mapped
to devices, which are physical units of storage (corresponding
to disks or disk partitions).
.LP
A volume is identified
uniquely and persistently by a logical volume ID (lvid_t).
Volumes can be used whenever the device they are located
on is mounted by the SSM.  Volumes have a quota.  The
sum of the quotas of all the volumes on a device cannot
exceed the device quota.  Volumes are located on devices.
Device management methods are described in
.SA device(ssm).

.LP
The basic steps to begin using a new volume are:
.IP
.FN
format_dev():
 initialize the device
.IP
.FN
mount_dev():
allow use of the device
.IP
generate_new_lvid: generate a unique ID for the volume
.IP
create_vol: create a volume on the device
.IP
add_logical_id_index: add logical ID facility to the volume

.SH VOLUMES INITIALIZATION METHODS

.LP
.B "generate_new_lvid(lvid)"
.IP
The
.FN generate_new_lvid
method generates a universally unique volume id
and returns it via
.VA lvid.
Currently, the ID is generated using the network address of the
server combined with a timestamp.  

.LP
.B "create_vol(device_name, lvid, quota_KB, skip_raw_init, local_vid)"
.IP
The
.FN create_vol
method create_vol creates and formats a new volume on a device.
When a volume is stored on a raw device, formatting it
involves the time consuming step of zero-ing every page.  This is
necessary for correct operation of recovery.  In some situations
(during testing, for example),
this zeroing is unnecessary.  In
this case, setting
.VA skip_raw_init
to
.B true
disables the zeroing.
Creating a volume make the volume available for use.
The
.VA local_vid
parameter is only meant to be a temporary hack for those VASs using the
physical ID version of the SSM interface.  Local_vid is used to specify the
local handle that should be when a volume is mounted.  The default value
vid_t::null indicates that the SSM can use any number it wants to use.
.B Note:
currently there is a limit of one volume per device. 


.LP
.B "destroy_vol(lvid)"
.IP
The
.FN destroy_vol
method destroys a volume on a device.
After a 
.FN destroy_vol
the device remains mounted
and another volume can be created on the device.

.LP
.B "add_logical_id_index(lvid, reserved_local, reserved_remote)"
.IP
The
.FN add_logical_id_index
method sets up the logical ID index on volume
.VA lvid
and should be called after
.FN create_vol.
The logical ID index is used to map
.HR "logical ID serial numbers," "lid.ssm.html"
type
.B serial_t,
to physical locations on the volume or to IDs
on other volumes.  The 
.VA reserved_local
parameter reserves a certain number of intra-volume (local) serial
numbers.  The
.VA reserved_remote
parameter reserves
inter-volume serial numbers.  The reserved serial numbers will not be
allocated by any calls which generate serial numbers and therefore
can be used for other things by the VAS. 

.LP
.B "has_logical_id_index(lvid, has_index)"
.IP
The
.FN has_logical_id_index
method sets
.VA has_index
to 
.B true
if volume
.VA lvid
contains a logical ID index.

.LP
.B "print_lid_index(lvid)"
.IP
The
.FN print_lid_index
method is a
debugging function that prints the logical ID index
to standard output.

.SH ROOT INDEX METHODS

.LP
The root index of a volume is a special B+tree index available on every
volume.  It can be used to store hooks (roots) into the data on
a volume. A common use of a this index is
to  associate a string name with a record, index or file ID
containing information about the contents of the volume.  For example,
in a database system, this might be the ID for the catalog.
The index is accessed just like any other B+tree index.  See
.SA btree(ssm)
for more information.
.B Note:
keys with the prefix "SSM_RESERVED" are reserved for
use by the SSM.

.LP
.B "vol_root_index(lvid, serial)"
.IP
The
.FN vol_root_index
method returns (in 
.VA serial)
 the serial number (logical ID) of the
.B "root index"
for volume
.VA lvid.  


.SH SPACE UTILIZATION METHODS

.LP
The following methods provide disk space utilization
statistics for volumes, files, and indexes.

.LP
.B "get_volume_quota(lvid, quota_KB, quota_used_KB)"
.IP
The
.FN get_volume_quota
method returns the quota (in K-bytes) in
.VA quota_KB
and the amount of the quota allocated in
.VA quota_used_KB,
for volume
.VA lvid.


.LP
.B "get_du_statistics(lvid, du, audit)"
.IP
The
.FN get_du_statistics
method gathers space utilization statistics for volume
.VA lvid.
The use of "du" stems from similarity, in purpose, to the "du"
command found on some operating systems.
The statistics are returned in the
.VA du
parameter.
When the
.VA audit
parameter is set to
.B true,
 the entire volume is share (SH) locked and the statistics
are audited for correctness.  The error code
.B fcINTERNAL
will be returned at the first sign of an auditing problem.
If 
.B fcINTERNAL
is returned it indicates either there is a problem with
the integrity of the volumes data structures (possibly
indicating inaccessible garbage) or there is a bug in the
auditing code.  
When the
.VA audit
parameter is set to
.B false,
only an intention-share (IS) locks are obtained on the volume
and all files and indexes.  Therefore the statistics gathering
methods may not see a consistent version of the volume
as things can be changing while statistics are gathered.

.LP
.B "get_du_statistics(lvid, serial, du, audit)"
.IP
The
.FN get_du_statistics
method gathers space utilization statistics for a specific file
or index indicated by the logical ID:
.VA lvid,
.VA serial.
The statistics are returned in the
.VA du
parameter.
The
.VA audit
parameter works as described in the previous methods except
that it is the index or file that is SH locked when 
.VA audit
is
.B true.

.SH ERRORS

All of the above methods return a
.FN w_rc_t
error code.

.LP
See
.SA errors(ssm)
for more information on error handling.

.SH TRANSACTION ISSUES
.LP
Many of the above methods cannot be run within the scope of
a transaction.  The reason for this restriction is to avoid
the implication that rolling back (aborting) the transaction
would rollback the effect of the method.

TODO

.SH EXAMPLES
TODO

.DA
.SH "SEE ALSO"
.SA intro(ssm),
.SA device(ssm).

