.TH ss_m::lock ssm "Jan 1999" "Release \*(SV" "Shore Storage Manager" "Release 2.0" "Shore Storage Manager Reference Manual"
.so tmac.man.local
.SH NAME
lock, unlock, query_lock, set_lock_cache_enable, lock_cache_enabled \- Class ss_m Methods for Locking

.SH SYNOPSIS
.EX
#include <sm_vas.h>  // which includes sm.h

static rc_t                 lock(
    const lvid_t&               lvid,
    lock_mode_t                 mode,
    lock_duration_t             duration = t_long,
    long                        timeout = WAIT_SPECIFIED_BY_XCT);

static rc_t                 lock(
    const lvid_t&               lvid,
    const serial_t&             serial,
    lock_mode_t                 mode,
    lock_duration_t             duration = t_long,
    long                        timeout = WAIT_SPECIFIED_BY_XCT);

static rc_t                 unlock(
    const lvid_t&               lvid,
    const serial_t&             serial);

static rc_t                 query_lock(
    const lvid_t&               lvid,
    const serial_t&             serial,
    lock_mode_t&                mode,
    bool                        implicit = FALSE);

static rc_t                 set_lock_cache_enable(bool enable);
static rc_t                 lock_cache_enabled(bool& enabled);

static rc_t                 set_escalation_thresholds(
    int4                        toPage,
    int4                        toStore,
    int4                        toVolume);

static rc_t                 get_escalation_thresholds(
    int4&                       toPage,
    int4&                       toStore,
    int4&                       toVolume);

static rc_t                 dont_escalate(
    const lockid_t&             n,
    bool                        passOnToDescendants = true);
static rc_t                 dont_escalate(
    const lvid_t&               lvid,
    const serial_t&             serial,
    bool                        passOnToDescendants = true);
static rc_t                 dont_escalate(
    const lvid_t&               lvid,
    bool                        passOnToDescendants = true);

.EE
.SH DESCRIPTION

For a discussion of the locking done by the SSM is found in
.HR "An Overview of Shore." "../overview/overview.html"

.LP
Locks are acquired implicitly by many 
.FN ss_m
methods.  
For those situations where more precise control of locking is
desired, the following methods allow explicit locking and unlocking.

.LP
.B "lock(lvid, mode, duration, timeout)"
.LP
.B "lock(lvid, serial, mode, duration, timeout)"
.IP
The
.FN lock
method is used to acquire a lock on volume, index, file or record.
The first version of the method locks the volume specified by
.VA lvid.
The second version locks the index, file or record specified by
.VA lvid,serial.
The
.VA mode
parameter specifies the lock mode to acquire.
Valid lock_mode_t values are listed in
\fC basics.h\fR.
The
.VA duration
parameter specifies how long the lock will be held.
Valid values (among those listed in \fCbasics.h\fR) are:
t_instant, t_short and t_long.  The
.VA timeout
parameter specifies how long to wait for a lock.

.LP
.B "unlock(lvid, serial)"
.IP
The
.FN unlock
method releases the most recently acquired lock on the file,
index, or record identified by
.VA lvid,serial.
Note, that only locks with duration
.B t_short
can be released before end-of-transaction.

.LP
.B "query_lock(lvid, serial, mode, implicit)"
.IP
The
.FN query_lock
method the mode of the lock held on
.VA lvid,serial
by the current transaction.
The lock mode is returned in
.VA mode
and will be
.B NL
(no lock) if not locked.
If
.VA implicit
is 
.B false
then only explicit locks on 
.VA lvid,serial
will be considered.  For example, if file F is
.B SH
locked
and a query is made about a record in F, the mode returned
will be
.B NL.  However, if
.VA implicit
is
.B true,
then
.B SH
would be returned for this example.

.SS Lock Cache Control
.LP
Each transaction has a cache of recently acquired locks
The following methods control the use of the cache.
These are not supported methods and may be removed
in later versions of the software.
Note: that the methods only affect the transaction
associated with the current thread.

.LP
.B "set_lock_cache_enable(enable)"
.IP
The
.FN set_lock_cache_enable
method turns on the cache if
.VA enable 
is
.B true
and turns it off otherwise.

.LP
.B "lock_cache_enabled(enabled)"
.IP
The
.FN lock_cache_enabled
method sets
.VA enabled
to
.B true
if the lock cache is on.

.SS Escalation
.LP
The lock manager will escalate from a record lock to a page lock,
from a page lock to a store lock, and from a store lock to a volume
lock, to reduce the number of locks in the table.
You can control the thresholds for escalation throught the methods
.FN get_escalation_thresholds 
and
.FN set_escalation_thresholds.
The default values are as follows:
.IP record-to-page 5
5
.IP page-to-store 5
25
.IP store-to-volume 5
0 

.LP
In all cases, a threshold of 0 prevents escalation.

.LP
When escalation is in use, 
it be prevented on selected volumes or other lock-able
objects through the three 
.FN don_escalate
methods.
If the argument
.VA passOnToDescendants is 
.VA false,
locks acquired on objects below the volume (or given lockid)
in the lock hierarchy will still be escalated according to the
thresholds.

.SH ERRORS

TODO

.SH EXAMPLES

TODO

.DA
.SH "SEE ALSO"
.HR "An Overview of Shore" "../overview/overview.html"
,
.SA transaction(ssm)
and 
.SA intro(ssm).

