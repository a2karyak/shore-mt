<std-header style='plain' orig-src='shore'>

 $Id: nt_porting_notes,v 1.6 1999/06/07 19:09:22 kupsch Exp $

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

  -- do not edit anything above this line --   </std-header>

NT Porting Notes: (Don't 's for NT)

1. Boolean is NOT treated the same as Integer, try not using stuff
   like " int a = x(); if (a) {}; ". It's not an error, but generates
   tons of warnings.

2. No ::form() methods on streams -- look at the implementation of
   macro W_FORM2 for a way to get around it. Replace all W_FORM()
   macro with W_FORM2. (Note: the interface is slightly different,
   global replacement won't work)

3. Struct is NOT equivalent to Class with all public member/methods
   -- easiest way to fix it is to all ways use class.

4. RC assignment inside condition statement: following statement is
   somehow not recognized by VC++: "w_rc_t rc; if (rc = x()) {};".
   You have to change it to be "w_rc_t rc = x();  if (rc) {};".

5. Arithmetic operations are not allowed on void* pointers. You
   have to cast the pointer to the right type before you invoke the
   operations. (e.g. (char*)ptr + sizeof(int) ).

6. No const variable is allowed inside the class definition.
   You have to either declare a static const member and initialize
   the value in a .c file, or use enum instead. e.g.
   class a {			class a {
     const max = 10;   =====>  	  enum { max = 10 };
   }				}

7. Naming -- VC++ on NT treats filenames as case-insensitive. Don't
   rely on case-sensitivity to differentiate the file names.

8. Return value -- A return call with value is mandatory if the 
   method/function declaration has a return type.

9. File descriptor is DIFFERENT from socket descriptor. You cannot
   use open(), close(), read(), write() directly on socket, you have
   to use a separate WINSOCK interface: closesocket(), recv(), send()
   instead.  Select() can only be used on sockets, cannot be used on 
   file descriptors. 

10. Socket library (WINSOCK) is different on NT than UNIX. It requires
   that any first socket action is preceeded by the WSAStartup() call.
   see sevrer.c for an example.

11. Private class/struct declaration within a class is not visible to
   any publicly accessible methods including constructors. e.g.
   class a {
      private:
	struct c { ... }
      public:
	a(struct c x = CONSTA)
   }

12. Implicit dynamic allocated array is not supported in VC++. e.g.
    foo(int size) {  int int_array[size]; }
    You have to do the allocation explicitly (of course you 
    have to worry about deleting them as well). e.g.
    foo(int size) {  int* int_array = new int[size];  delete [] int_array; }

13. Zero element array is not accepted by VC++, it generate an exception
    when you try to delete them. Always check for element size before you
    do the allocation and deallocation.

