/*<std-header style='imake' orig-src='shore'>

 $Id: shore.def.example,v 1.95 1999/06/23 17:05:16 nhall Exp $

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

  -- do not edit anything above this line --   </std-header>*/

/********************************************************************
 Example shore.def

 This is an example of a shore.def file for the Shore sources and
 Imakefile's.  It is meant to be included (indirectly) in all sources
 and Imakefiles.

 The purpose of the shore.def file is to allow easy setting of
 configuration options that are often changed for a particular
 workspace.  Since shore.def is not checked in (only this example is)
 editting it is fairly safe.  The shore.def file is added to include/
 during "make install".

 To use this file, copy it to shore.def and edit per comments
 below.

********************************************************************/

/************************************************/
/*******  Mostly Imakefile related **************/
/************************************************/

/*
 * Define this if you want make to use something else to execute commands.
 */
#undef MAKE_SHELL

/*
 * Define BUILD_PARALLELISM to the number of simultaneous build processes.
 * If you just define it without specifying a number you will get an "unlimited"
 * number of parallel jobs (which will probably fail, due to a limitations in
 * the swap or tmp space available).
 */
#undef BUILD_PARALLELISM

/*
 * Define if you want one .source.d file per source file instead of a single
 * .depend per directory.  This will build faster on parallel machines in the
 * future and is useful if you also turn on USE_AUTOUPDATING_DEPENDS as it
 * will minimize the dependency rebuilding.
 */
#define USE_MULTIPLE_DEPENDS_PER_DIR

/*
 * Define if you want the dependency file updated whenever any of the sources
 * in needs updating, this will keep it from getting out of sync with the
 * sources and you should rarely need to run 'make depend'.
 */
#undef USE_AUTOUPDATING_DEPENDS

/*
 * Define if you want to provide your own directory scheme file.  The directory
 * scheme file consists of make macro definitions for the locations of tools.
 * The file must be enclosed in double quotes (") and must exist in the
 * config directory or be a fully qualified path to the file.
 */
#define USE_DIR_SCHEME_FILE "nt_standard.def"

/*
 * Define one of these to force the use of a specific compiler
 * in the Imakefiles.
 * NB: we haven't used anything but gcc (on Unix) and cl (on NT)
 * in so long that it's highly doubtful that FORCE_CC works.
 */
#undef FORCE_GCC
#undef FORCE_CC

/*
 * If you want to build with egcs,
 * #define FORCE_EGCS
 * #define EGCS_DIR (e.g., /s/egcs-1.1.1)
 * and
 * #define GCC_PATH EGCS_DIR/bin/gcc
 */
#undef FORCE_EGCS
#undef EGCS_DIR

/*
 * Define this if you want to specify a specific gcc to use,
 * otherwise just "gcc" will be used:
 */
#undef GCC_PATH

/*
 * These are only needed for some environments.  Don't set them
 * unless it looks like the makefile paths need them for the
 * gcc that is installed on your system.
 *
 * GCC_VER:
 * Define this to the "version string" (ex: 2.7.2.3) of gcc
 * that you are using.  This is only needed in some
 * environments that need to find various tools in
 * a gcc installation.
 *
 * GCC_TAG:
 * Define this with the "arch-vendor-version" tag used to
 * identify a particular gcc installation.  The build system
 * defines this for the platforms that it knows about, so
 * it only needs to be defined on new or odd systems.
 */
#undef GCC_VER
#undef GCC_TAG

/*
 * Define these to select non-default version of tcl.
 *
 * TCL_DIR_PATH
 * Define this to the root of the TCL installation, if it 
 * isn't in the default paradise/shore location.
 * This definition overrides any given as TCL_DIR in 
 * the other .def files.
 *
 * TCL_DIR_VERSION:
 * You must provide a version string for the TCL library (e.g., 8.0
 * on unix, 80 on Win32) so the real library can be found.
 *
 * TCL_LIB_EXTENSION:
 * If your Tcl installation has only one or the other of
 * .so, .a installed, set this accordingly.  The default is that
 * the static (.a) library is linked.  On NT, you might need
 * to set this to vc.lib or simply .lib
 * NB: this MUST include the dot part of the extension.
 * 
 */
#define TCL_DIR_PATH S:/tcl 
#define TCL_DIR_VERSION 80
#define TCL_LIB_EXTENSION .lib


/*
 * Define this to select non-default version of Perl.
 *
 * PERL_DIR_PATH
 * Define this to the root of the Perl installation.
 * This definition overrides any given as PERL_DIR in 
 * the other .def files.
 *
 */
#undef PERL_DIR_PATH 

/*
 * Define this to select non-default location for Visual C++ compiler,
 * linker, include files, etc.
 *
 * VCPP_DIR_PATH
 * Define this to the root of the VC++ installation.
 * This definition overrides any given as VCPP_DIR in 
 * the other .def files.
 *
 */
#undef VCPP_DIR_PATH 

/*
 * Define this to use a different RM (rm) program in make:
 */
#undef RMM 

/*
 * Define this when using Solaris since our solaris imake isn't
 * configured properly
 */
#undef FORCE_SOLARIS

/*
 * Define this if you are using aix-4.*, to differentiate aix 4
 * and aix 3 features
 */
#undef FORCE_AIX4

/*
 * Define this if you are using an SP/2 and want to build parallel
 * programs on it.
 */
#undef IS_SP2

/*
 * Define this if you are building on a large-file-capable
 * operating system with >2GB disks and you want to make the server
 * large-file aware.
 */
#define LARGEFILE_AWARE

/*
 * Define this if you only want to build the smlayer and not the
 * rest of paradise.
 */
#define BUILD_SMLAYER_ONLY

/*
 * Define these if you want to build ssh or smlayer tests 
 * by default.  You may will to configure TCL if you build ssh.
 */
#define BUILD_DEFAULT_SSH
#undef BUILD_DEFAULT_SMLAYER_TESTS

/**************************************************/
/*******  Mostly Source Code related **************/
/**************************************************/

/*
 * These compilation options are more fully described in
 * the "Compilation Options" section of Project.tmpl.
 */
/* turn ON/OFF generation of auditing, assert checking code */
#define DEBUGCODE OFF
/* turn ON/OFF use of shore tracing code */
#define TRACECODE OFF
/* turn ON/OFF generation of debugging symbols (ie. -g) */
#define DEBUGGERSYMBOLS ON
/* turn ON/OFF optimization */
#define OPTIMIZE ON

/*
 * Define to the size of an objects.  gcc will then warn you about objects
 * which are larger than this size.  Turns off treating warnings as errors.
 * gcc only.
 */
#undef WARN_OBJECTS_LARGER_THAN

/* 
 * Directory to install bin, lib, include, and documents 
 */
#undef INSTALL_PATH 

/*
 * Define if you want to install the .pdb files corresponding to .exe files
 * which are installed.
 */
#define INSTALL_PDB_WITH_EXE

/*
 * Define if you want .sbr files generated when using using cl (visual studio).
 */
#undef GENERATE_SBR_FILES

/*
 * The LOCAL_LOG compile-time option has been replaced with
 * the SM_LOG_LOCAL runtime options.  It is an environment
 * variable.  If it has a non-zero numeric value, a local
 * log will be used.
 */

/*
 * Undefine this if you want the recovery code to trust the page
 * lsn of pages on a raw device.  This requires that a raw
 * device have every page wirtten when it is formatted to
 * initialize the page lsn.  If you set this raw volume pages
 * won't have to be initialized, but there might be a bit more
 * expense during recovery since every log record for a page
 * after a page format will have to be redone.
 */
/* for sources */
#define DONT_TRUST_PAGE_LSN

/*
 * This defines the SM page size in bytes
 */
/* for sources */
#define SM_PAGESIZE 8192

/*
 * If you want 64 bit serial numbers (logical IDs)
 * rather that 32 bit, define this:
 */
/* for sources */
#undef BITS64

/*
 * Define this if you want to use the server-to-server coordination
 * stuff for two-phase commit.
 * This requires #undef USE_OCOMM, which is not available with
 * the public release, so external (non-UW-Madison CSD) users
 * cannot build anything with this defined.
 */
#undef USE_COORD

/*
 * Define this if you want to include crash test hooks in your
 * executable.  (For use with ssh, really).
 */
#undef USE_SSMTEST

/*
 * Say whether threads are preemptive or not.  This is a hack to
 * reduce the size of lock manager objects by changing the locking
 * hierarchy to take advantage of the non-preemptive threads.
 * NB: disregard
 */
#undef NOT_PREEMPTIVE

/*
 * Enable resource tracking independently of debug and other
 * intrusive stuff.  This tracks mutex and latches that a thread
 * owns for dumpthreads() style output.
 */
#undef SHORE_TRACE

/*
 * This controls how often "standard" thread stacks are checked
 * for overflow into the "red zone".  If something better is
 * available (that has no execution overhead) it will always
 * be used.  This is for the systems that don't have anything
 * better.
 *
 * This option has three levels.  0==undefined 1==defined|1, and 2:
 * 	0	no stack checks
 *	1	At each thread switch the stack of the running
 *		thread is checked to see if it has grown
 *		into the redzone.  This is a low-overhead
 *		inspection of stack pointer style check.
 *	2	Everything done for ==1, AND ... Invasive stack 
 *		checking controlled by the environement variable 
 *		of the same name.  If the variable is set to
 *		a non-zero value, the redzone of all stacks
 *		are inspected at EACH context swith to determine  
 *
 *		if something has corrupted them.
 # If DEBUGCODE is turned on, a stack check of level 2 is automatically
 * compiled into the system.  The default value for stack checking at
 * runtime is ON.  You can turn it off with the environment variable.
 * to This is the sames
 */
#define	STHREAD_STACK_CHECK	1

/*
 * Define this if you want to use thread cores which use Posix threads.
 * This is useful for debugging iff the debugger knows how to switch
 * between pthreads.  Should not be normally used as it changes
 * some of the "normal" behaviors of the threads package, as well
 * as being slower.
 *
 * You must also enable LINK_PTHREAD to use this option.
 */
#undef STHREAD_CORE_PTHREAD

/*
 * Define this if you want to use thread cores which use win32 threads.
 * Useful for debugging or using tools (such as PURIFY).  Should not
 * normally be used as it changes some of the "normal" behaviors of the
 * threads package.
 */
#undef STHREAD_CORE_WIN32

/*
 * Define this if you want to FORCE Win32 Exception handling
 * on a Win32 system.  If it isn't forced on, Win32 exception
 * handling is controlled at run-time by the 0/1 value of
 * an environment variable of the same name.
 *
 * Turning on STHREAD_WIN32_EXCEPTION means that you can NOT
 * click "yes" to have a debugger used on a process that is
 * crashing.
 */
#undef STHREAD_WIN32_EXCEPTION

/*
 * Define this to collect detailed statistics in the threads 
 * package.   This is a bit mis-named and will be renamed or
 * expanded in the future.  It is worth turning on.
 */
#define EXPENSIVE_STATS

/*
 * Define this to use Bolo's NewThreads I/O system that allows
 * native win32 support for OS objects.  While it is gaining
 * respectability, you may not want to use it.  Eventually it
 * will be the only game in town.
 *
 * Currently ...
 * This enables *both* the new Event Generation system, as well
 * as the new I/O system.  Disk R/W I/O and native win32
 * I/O can be selected at runtime by changing the environment
 * variables 
 *	STHREAD_IO_LOCAL
 * and	STHREAD_IO_ASYNC
 *
 * to be "unix" or "diskrw".
 */
#define	NEW_IO

/*
 * Define this if the New I/O facilities are being used on a
 * Win32 platform, and ONLY the new I/O facilities are wanted
 * to be included in the system (no diskrw or posix stuff at
 * all in the I/O system)
 */
#undef NEW_IO_ONLY

/*
 * turn on/off use of PURIFY, QUANTIFY, etc
 */
#undef USE_PURIFY
#undef USE_QUANTIFY
#undef USE_PURECOV

/*
 * If you USE_PURIFY, you probably want to turn this on.
 *
 * Enable zero-filled structure padding and memset's to zero
 * various data structures to keep purify happy.
 *
 * On NT, just enable this option, don't turn on USE_PURIFY
 */
#undef PURIFY_ZERO

/*
 * define this if you want expensive instrumentation
 * of the fastnew memory management.
 *
 * Currently required on NT/visual c++ due to a compiler bug
 * ** if fastnew is being used ***.  If NO_FASTNEW, this is not
 * required.
 */
#define INSTRUMENT_MEM_ALLOC

/*
 * Define this if you want expensive instrumentation of
 * the SM sort code.
 */
#undef INSTRUMENT_SORT

/*
 * Define this if you want to time the compilation of each file.
 */
#undef TIME_COMPILES

/*
 * Define this if you want to compile all files individually rather
 * than using the compile-as-a-group options defined in the
 * individual Imakefiles.  (see the gen_group_file macro in Imake.rules)
 */
#undef NO_COMPILE_GROUPS

/*
 * Define this if you DO NOT want generated (_gen) files to be
 * dependent on the Makefile.  This can cause inconsistencies
 * in the build environment if a makefile change would cause the
 * generated file to be rebuilt.  Why then would you want to 
 * ever use this?  Because you can change the *implementation*
 * (and Imakefile) of something in a directory without changing
 * the generated files ... which means you can relink everything
 * instead of RECOMPILING the entire system.
 */
#undef BUILD_NO_DEPEND_MAKEFILE_GEN


/* 
 * Define this if you want nano-second time resolution on
 * Solaris.  Needs LINK_POSIX4.
 */
#undef USE_POSIX_TIME

/*
 * Define this if you want the system to be compiled 
 * with _REENTRYANT on solaris.  This does not 
 * require linking with pthreads, but *does* get you
 * the various xxx_r reentrant versions of some library
 * functions.
 * You don't need to turn this on if you choose LINK_PTHREAD.
 */
#undef SOLARIS_REENTRANT

/*
 * Define this if you want the system to be useable with
 * posix threads.  This involves a clean compilation of the
 * entire system because different include files are used.
 *
 * This is needed if you want to build with the following
 * options:
 *	STHREAD_CORE_PTHREAD
 *	BUILD_OLAP_SERVER
 */
#undef LINK_PTHREAD

/*
 * Define this if you want the system to link with the
 * posix realtime libraries.
 *
 * This is needed on solaris if you want USE_POSIX_TIME.
 */
#undef LINK_POSIX4

/*
 * Define this if you want a Win32 system to be compiled for and
 * to link against the debug version of the visual c++ runtimes.
 *
 *  *** WARNING *** READ THIS SPACE *** DO NOT CHANGE THIS ***
 *
 * This is an explicit flag that needs to be turned on and
 * is not part of turning on DEBUGGERSYMBOLS or other such
 * flags.  The debug runtimes change the size of data structures
 * used by the system, change the performance of libraries,
 * and  otherwise adversly affect the operation of the system.
 * In addition, you ONLY use it if all the software you link
 * with has been compiled to use the debug runtimes.
 */
#undef USE_CL_RUNTIME_DEBUG

/*
 * Define this if you want a Win32 system to link against the 
 * library (static) version of the visual c++ libraries and runtimes.
 */
#undef USE_CL_RUNTIME_LIB

/*
 * Define this if you want a Win32 system to link against the
 * single threaded (static) library version of the visual c++
 * libraries and runtime.
 */
#undef USE_CL_RUNTIME_SLIB

/*
 * Define this if you want the visual c++ "stack checking" turned
 * on.   The name of this and the compiler option is actually
 * a misnomer by the way.  The compiler does or runtime does NOT
 * do any checking of the stack for validity.  What this option
 * does do is to slow the system down.  It write-probes the entire
 * stack frame of a function at every call, to make sure the stack
 * growth code in NT works correctly if a function allocates a large
 * stack frame.
 */
#undef USE_CL_STACK_CHECK

/*
 * Define this if you want a Win32 system to be compiled with
 * support for "Multi Byte Character Strings" aka Unicode.
 */
#undef USE_CL_MBCS

/*
 * Define this if you want a Win32 system to be compiled with
 * support for c++ exceptions.  It is actually forced on (without
 * a define) in Project.tmpl because shore/paradise currently links
 * against a library that needs but does not use exception handling.
 */
#undef USE_CL_EXCEPTIONS

/*
 * Define this if you want a Win32 system compiled with visual c++
 * to use a common read-only string pool.  
 */
#define USE_CL_STRING_POOL

/*
 * Define this if you want to use an external event-tracing scheme,
 * written by you for use with your value-added server.  For you to use
 * such a scheme, you must create a file src/smlayer/fc/extTraceEvents.h,
 * which can define trace macros as you please.
 * The Storage Manager does not provide any external tracing; it provides
 * only the tracing to an error log as defined in src/smlayer/fc/w_debug.h
 */
#undef USE_EXTERNAL_TRACE_EVENTS

/*
 * Define this if you want to use the original config file format.
 * The "new format" is incompatible with the old format.
 */
#undef USE_OLD_CONFIG_FILE

/*
 * Define this if you want to compile and link a Win32 system 
 * with the MFC (Microsoft Foundation Classes).  This is *NOT*
 * recommended, as it allows Win32 specific code, instead of
 * using portable c++ constructs.
 */
#undef USE_CL_MFC

/*
 * Define this if you do not want various classes to
 * use the "fastnew" facility.  If this is defined no classes
 * will use fastnew memory, relying upon the default allocator
 * instead.
 */
#undef	NO_FASTNEW

/*
 * Define this if you want the errlog code to do NT synchronization
 * on Win32.  You really don't want this, but I haven't yanked the
 * code yet.
 *
 * ...DEBUG is the same thing for the DBG code in fc.  You may want
 * to turn it on when not using NEW_IO on win32 and TRACECODE is
 * enabled, to catch the debug output of the disk r/w threads.
 */
#undef FC_ERRLOG_WIN32_LOCK
#undef FC_DEBUG_WIN32_LOCK

/*
 * The default number of sharers of a latch is 4.  If you want to 
 * allow more sharing of a latch, #define this to the integer value
 * of the maximum number of sharers allowed.  This has been tested
 * with 8 and 16 sharers for correctness.  Above 16 sharers is
 * not recommended .... the algorithms needs to be improved.
 */
#undef SM_LATCH_SHARE_MAX

/*
 * If this is defined, when a SM page is "formatted", its entire
 * content will be over-written with a "garbage" value.    This
 * is NOT necessary for system operation, but provides a consistent
 * default value to the page content.
 */
#undef SM_FORMAT_WITH_GARBAGE

/*
 * Define this if you want the system to be compatible
 * with the volume version 13 On Disk Structures (and the 
 * log version 1 log format).  Work is in progress to upgrade to a new
 * volume and log format which allow large "disk addresses".
 * However, even with "small" disk addresses, it is not compatible
 * with the old on-disk representation.
 */
#undef SM_ODS_COMPAT_13

/*
 * Define this if you want the system on-disk structures to have
 * "large" (64 bit) disk addresses in the on-disk structures.
 */
#undef SM_DISKADDR_LARGE

