/*<std-header style='imake' orig-src='shore'>

 $Id: Project.rules,v 1.56 2000/01/24 20:10:55 kupsch Exp $

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

  -- do not edit anything above this line --   </std-header>*/

CMNT begin Project.rules

gen_time_stamp_file(timestamp)

all:: automatic
	$(MAKE_W_OPT) all_no_automatic

tests_localdir: $(TEST_EXEC_FILES.with.suffix)

do_tags($(TAG_FILES))

GEN_SRCDIRINFO_OPT=--input=$(SRCDIRINFO_DAT) --output=$(SRCDIRINFO_TMPL)
#ifdef IS_DOSDEV
GEN_SRCDIRINFO_OPT += --dosPaths
#endif

$(SRCDIRINFO_TMPL): $(SRCDIRINFO_DAT)
	xlate_names($(GEN_SRCDIRINFO) $(GEN_SRCDIRINFO_OPT)) 

imakefile_depend_files($(IMAKEFILE) $(SRCDIRINFO_TMPL) $(SHORE_DEF))
imakefile_depend_files($(addprefix $(CONFIG_DIR)/, $(CONFIG_IMAKEFILE_DEPEND_FILES)))

MAKEMAKE_OPT = --topDir=$(TOP) --buildTopDir=$(BUILD_TOP) --curPath=$(THIS_PATH)
ifdef IMAKE_EXEC_NAME
    MAKEMAKE_OPT += --imakeExecName=$(IMAKE_EXEC_NAME)
endif
#ifdef IS_DOSDEV
MAKEMAKE_OPT += --dosPaths
#endif

make Makefile: $(IMAKEFILE_DEPEND_FILES)
	xlate_names($(MAKEMAKE) $(MAKEMAKE_OPT))

clean_files($(OBJ_FILES) $(ALL_EXEC_FILES.with.suffix) $(ALL_LIB_FILES) $(ALL_SHARED_LIB_FILES))
clean_files($(UNUSED_OBJ_FILES))
squeaky_files($(SRC.all.gen.all_types))
pristine_files(Makefile $(INSTALL_FILES))
#ifdef IS_NT
#ifdef GENERATE_SBR_FILES
clean_files($(SBR_FILES))
clean_files($(UNUSED_SBR_FILES))
#endif
clean_files($(PDB_FILES))
clean_files($(UNUSED_PDB_FILES))
clean_files($(addsuffix .exp, $(basename $(ALL_SHARED_LIB_FILES))))
clean_files($(addsuffix .lib, $(basename $(ALL_SHARED_LIB_FILES))))
clean_files(*.plk vc50.idb vc50.pdb)
#else
ifneq (, $(strip $(ALL_EXEC_FILES)))
clean_files(core)
endif
#endif
#if defined(USE_PURIFY) || defined(USE_PURECOV)
clean_files(.pure)
#endif
#if defined(USE_QUANTIFY)
clean_files(.quant)
#endif
#if defined(USE_PURE)
clean_files(real-ld li*pure*.OBJEXT lib*pure*.LIBEXT li*pure*)
#endif

do_clean_targets()

/*
 * the contents of these files is determined by the Makefile, so regenerating
 * them is the way to make things safe.  it does have the problem that
 * regenerating the generated files, causes a rebuild of everything :<
 */
#if defined(BUILD_NO_DEPEND_MAKEFILE_GEN)
DEPENDS_ON_MAKEFILE = $(ALL_EXEC_FILES.with.suffix) $(ALL_LIB_FILES)
DEPENDS_ON_MAKEFILE += $(ALL_SHARED_LIB_FILES)
#else
DEPENDS_ON_MAKEFILE = $(SRC.gen.all_types) $(ALL_EXEC_FILES.with.suffix) $(ALL_LIB_FILES)
DEPENDS_ON_MAKEFILE += $(ALL_SHARED_LIB_FILES)
#endif
ifneq (,$(strip $(DEPENDS_ON_MAKEFILE)))
$(DEPENDS_ON_MAKEFILE): Makefile
endif

depend_target($(DEPEND_SOURCE_FILES))

gen_cvsignore()
do_src_links()

NEED_DEPENDS_TARGETS = $(sort all_no_automatic_localdir $(C_CPP_OBJ_FILES) $(ALL_EXEC_FILES.with.suffix) $(ALL_LIB_FILES) $(ALL_SHARED_LIB_FILES))

ifdef INCLUDE_DEPEND
all_no_automatic_localdir: $(ALL_TARGET_FILES) $(DEFAULT_TARGETS)
else
local_depend: $(DEPEND_FILES)
$(NEED_DEPENDS_TARGETS): local_depend
	$(MAKE_W_OPT) INCLUDE_DEPEND=yes $@
endif

install_localdir::
install_links_localdir::
clean_install_localdir::

automatic_localdir: $(SRC.gen.all_types)

.PHONY: $(ALL_COMMANDS)
.DELETE_ON_ERROR:

fast: default_fast
%_fast:
	$(MAKE_W_OPT) INCLUDE_DEPEND=no $(patsubst %_fast, %, $@)

/***************************************************************************/

/* Each subdir defines SRC -- those files to be checked in */
#if IS_NT
sbrfiles:: $(SBR_FILES)
#else
sbrfiles::
	$(ECHO) 'sbr files not supported under non-NT systems.'
#endif

do_cvs_commands()

do_subdirs($(SUBDIR_COMMANDS), $(PRE_SUBDIRS), $(POST_SUBDIRS))
do_subdirs($(NONDEFAULT_SUBDIR_COMMANDS), $(PRE_SUBDIRS), $(POST_SUBDIRS) $(NONDEFAULT_SUBDIRS))
do_parallel_intrasubdirs($(PARALLEL_INTRASUBDIR_COMMANDS), $(PRE_SUBDIRS), $(POST_SUBDIRS))
do_parallel_subdirs($(DEFAULT_PARALLEL_SUBDIR_COMMANDS), $(PRE_SUBDIRS) $(POST_SUBDIRS))
do_parallel_subdirs($(NONDEFAULT_PARALLEL_SUBDIR_COMMANDS), $(PRE_SUBDIRS) $(POST_SUBDIRS) $(NONDEFAULT_SUBDIRS))

FILES_IN_DIR = $(wildcard $(WILD))
ifneq ($(TOP),$(BUILD_TOP))
FILES_IN_DIR += $(subst $(TOP)/$(THIS_PATH)/,,$(wildcard $(TOP)/$(THIS_PATH)/$(WILD)))
endif
#if IS_NT
CMNT remove .pdb files since cl changes the names to all lowercase and there's no way to check them
FILTERED_FILES_IN_DIR = $(filter-out %.pdb, $(FILES_IN_DIR))
#else
FILTERED_FILES_IN_DIR = $(FILES_IN_DIR)
#endif
BUILDSYS_FILES_IN_DIR = $(filter-out $(notdir $(filter-out $(LN_SRC_FILES) $(INSTALL_FILES), $(PRISTINE_FILES)) $(SQUEAKY_FILES) $(CLEAN_FILES) $(ALL_SUBDIRS)) CVS Imakefile, $(FILTERED_FILES_IN_DIR))
ALL_BUILDSYS_FILES = $(filter-out ../% /%, $(SRC.all.all_types) $(SRC.historical))
ALL_GROUP_NAMES = $(INIT_GROUP_NAMES) $(USED_GROUP_NAMES) $(IMPORTANT_GROUP_NAMES)
IN_DIR_NOT_BUILDSYS_FILES = $(filter-out $(notdir $(ALL_BUILDSYS_FILES)), $(BUILDSYS_FILES_IN_DIR))
IN_BUILDSYS_NOT_DIR_FILES = $(filter-out $(BUILDSYS_FILES_IN_DIR), $(ALL_BUILDSYS_FILES))
USED_AND_UNUSED_FILES = $(filter $(SRC.unused.perm_gen.all_types), $(SRC.perm_gen.all_types))
HISTORICAL_BUT_NOT_FILES = $(filter $(SRC.all.all_types), $(SRC.historical))
INIT_NOT_USED_GROUPS = $(filter-out $(USED_GROUP_NAMES), $(INIT_GROUP_NAMES))
USED_NOT_INIT_GROUPS = $(filter-out $(INIT_GROUP_NAMES), $(USED_GROUP_NAMES))
BAD_C_FILE_EXTS = $(filter-out %.c, $(SRC.perm_gen.c))
BAD_CPP_FILE_EXTS = $(filter-out %.cpp, $(SRC.perm_gen.cpp))

%.print:
	print_group($*)

%.print_wide:
	print_group_wide($*)

print_all_groups: $(addsuffix .print,$(sort $(ALL_GROUP_NAMES)))

print_important_groups: $(addsuffix .print,$(sort $(IMPORTANT_GROUP_NAMES)))

print_dir_name:
	$(ECHO) $(DIVIDER1)
	$(ECHO) '    dir$(COLON) $(THIS_PATH)'

print_historical:
	$(ECHO) $(DIVIDER2)
	print_var_list(SRC.historical)

print_build_bugs:
print_warning_if_not_empty("files in dir but not build system", $(IN_DIR_NOT_BUILDSYS_FILES))
print_warning_if_not_empty("files in build system but not dir", $(IN_BUILDSYS_NOT_DIR_FILES))
print_warning_if_not_empty("files in used and unused", $(USED_AND_UNUSED_FILES))
print_warning_if_not_empty("historical but used", $(HISTORICAL_BUT_NOT_FILES))
print_warning_if_not_empty("group name initialized but not used", $(INIT_NOT_USED_GROUPS))
print_warning_if_not_empty("group name used but not initialized", $(USED_NOT_INIT_GROUPS))
print_warning_if_not_empty("C source doesn't have a .c extension", $(BAD_C_FILE_EXTS))
print_warning_if_not_empty("C++ source doesn't have a .cpp extension", $(BAD_CPP_FILE_EXTS))

build_report_localdir: print_dir_name print_all_groups print_historical print_build_bugs ;

build_short_report_localdir: print_dir_name print_important_groups print_build_bugs ;

build_audit_localdir: print_dir_name print_build_bugs ;

nothing: ;

CMNT end Project.rules

