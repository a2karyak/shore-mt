/*<std-header style='imake' orig-src='shore'>

 $Id: shore.def.example,v 1.129 2003/12/31 03:45:51 bolo Exp $

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

  -- do not edit anything above this line --   </std-header>*/

/********************************************************************
 Example shore.def

 This is an example of a shore.def file for the Shore sources and
 Imakefile's.  It is meant to be included (indirectly) in all sources
 and Imakefiles.

 The purpose of the shore.def file is to allow easy setting of
 configuration options that are often changed for a particular
 workspace.  Since shore.def is not checked in (only this example is)
 editting it is fairly safe.  The shore.def file is added to include/
 during "make install".

 To use this file, copy it to shore.def and edit per comments
 below.

********************************************************************/

/************************************************/
/*******  Mostly Imakefile related **************/
/************************************************/

/*
 * Define this if you want make to use something else to execute commands.
 */
#undef MAKE_SHELL

/*
 * Define BUILD_PARALLELISM to the number of simultaneous build processes.
 * If you just define it without specifying a number you will get an "unlimited"
 * number of parallel jobs (which will probably fail, due to a limitations in
 * the swap or tmp space available).
 */
#undef BUILD_PARALLELISM

/*
 * Define if you want one .source.d file per source file instead of a single
 * .depend per directory.  This will build faster on parallel machines in the
 * future and is useful if you also turn on USE_AUTOUPDATING_DEPENDS as it
 * will minimize the dependency rebuilding.
 */
#define USE_MULTIPLE_DEPENDS_PER_DIR

/*
 * Define if you want the dependency file updated whenever any of the sources
 * in needs updating, this will keep it from getting out of sync with the
 * sources and you should rarely need to run 'make depend'.
 */
#undef USE_AUTOUPDATING_DEPENDS

/*
 * Define if you want to provide your own directory scheme file.  The directory
 * scheme file consists of make macro definitions for the locations of tools.
 * The file must be enclosed in double quotes (") and must exist in the
 * config directory or be a fully qualified path to the file.
 */
#undef USE_DIR_SCHEME_FILE

/*
 * If you use the "nt_unixstyle.def" DIR_SCHEME_FILE, you will need to set
 * this to the driver letter of the root of the "unix" partition on NT.
 * Just specify the drive-letter, not quotes or anything
 */
#undef UNIX_PATHS

/*
 * Define if you want a .cvsignore file generated which contains all the files
 * which this directory generates.  Makes cvs update not show these files as
 * unknown.
 */
#define GENERATE_CVSIGNORE

/*
 * Define one of these to force the use of a specific compiler
 * in the Imakefiles.
 * NB: we haven't used anything but gcc (on Unix) and cl (on NT)
 * in so long that it's highly doubtful that FORCE_CC works.
 */
#undef FORCE_GCC
#undef FORCE_CC

/*
 * If you want to compile with an EGCS compiler you will need
 * to define this.   It tweaks the build system a little so that
 * EGCS will work.
 *
 * *** Note that you MUST have OPTIMIZE==ON if you use EGCS.  EGCS
 * does not generate correct code unless optimization is enabled
 * and FORCE_EGCS is set.
 */
#undef FORCE_EGCS

/*
 * Define this if you want to specify a specific gcc to use,
 * otherwise just "gcc" will be used:
 */
#undef GCC_PATH

/*
 * These are only needed for some environments.  Don't set them
 * unless it looks like the makefile paths need them for the
 * gcc that is installed on your system.
 *
 * GCC_VER:
 * Define this to the "version string" (ex: 2.7.2.3) of gcc
 * that you are using.  This is only needed in some
 * environments that need to find various tools in
 * a gcc installation.
 *
 * GCC_TAG:
 * Define this with the "arch-vendor-version" tag used to
 * identify a particular gcc installation.  The build system
 * defines this for the platforms that it knows about, so
 * it only needs to be defined on new or odd systems.
 */
#undef GCC_VER
#undef GCC_TAG

/*
 * Define these to select non-default version of tcl.
 *
 * TCL_DIR_PATH
 * Define this to the root of the TCL installation, if it 
 * isn't in the default paradise/shore location.
 * This definition overrides any given as TCL_DIR in 
 * the other .def files.
 *
 * TCL_DIR_VERSION:
 * You must provide a version string for the TCL library (e.g., 8.0
 * on unix, 80 on Win32) so the real library can be found.
 *
 * TCL_LIB_EXTENSION:
 * If your Tcl installation has only one or the other of
 * .so, .a installed, set this accordingly.  The default is that
 * the static (.a) library is linked.  On NT, you might need
 * to set this to vc.lib or simply .lib
 * NB: this MUST include the dot part of the extension.
 * 
 */
#undef TCL_DIR_PATH 
#undef TCL_DIR_VERSION
#undef TCL_LIB_EXTENSION

/*
 * Define this if you want dependencies on the tcl library to exist
 * in the generated makefiles.   This only works if a _path_ to
 * the tcl library is provided, instead of a '-ltcl_lib' directive.
 */
#undef TCL_LIB_DEPENDENCY


/*
 * Define this to select non-default version of Perl.
 *
 * PERL_DIR_PATH
 * Define this to the root of the Perl installation.
 * This definition overrides any given as PERL_DIR in 
 * the other .def files.
 *
 */
#undef PERL_DIR_PATH 

/*
 * Define this to select non-default location for Visual C++ compiler,
 * linker, include files, etc.
 *
 * VCPP_DIR_PATH
 * Define this to the root of the VC++ installation.
 * This definition overrides any given as VCPP_DIR in 
 * the other .def files.
 *
 */
#undef VCPP_DIR_PATH 

/*
 * Define this to use a different RM (rm) program in make:
 */
#undef RMM 

/*
 * Define this if your 'rm -f' with no args generates a non-0 return code.
 * You can fix it either by specifying a better RM via RMM, or this
 * which specifies a bogus filename so that the broken RMs work.
 */
#undef RM_F_BROKEN

/*
 * Define this when using Solaris since our solaris imake isn't
 * configured properly
 */
#define FORCE_SOLARIS

/*
 * Define this if you are using aix-4.*, to differentiate aix 4
 * and aix 3 features
 */
#undef FORCE_AIX4

/*
 * Define this if you are using an SP/2 and want to build parallel
 * programs on it.
 */
#undef IS_SP2

/*
 * Define this if you are building on a large-file-capable
 * operating system with >2GB disks and you want to make the server
 * large-file aware.
 */
#define LARGEFILE_AWARE

/*
 * Define this if you only want to build the smlayer and not the
 * rest of paradise.
 */
#undef BUILD_SMLAYER_ONLY

/*
 * Define these if you want to build ssh or smlayer tests 
 * by default.  You may will to configure TCL if you build ssh.
 */
#undef BUILD_DEFAULT_SSH
#undef BUILD_DEFAULT_SMLAYER_TESTS

/**************************************************/
/*******  Mostly Source Code related **************/
/**************************************************/

/*
 * These compilation options are more fully described in
 * the "Compilation Options" section of Project.tmpl.
 */
/* turn ON/OFF generation of auditing, assert checking code */
#define DEBUGCODE ON
/* turn ON/OFF use of shore tracing code */
#define TRACECODE OFF
/* turn ON/OFF generation of debugging symbols (ie. -g) */
#define DEBUGGERSYMBOLS ON
/* turn ON/OFF optimization */
#define OPTIMIZE OFF

/*
 * Define to the size of an objects.  gcc will then warn you about objects
 * which are larger than this size.  Turns off treating warnings as errors.
 * gcc only.
 */
#undef GCC_WARN_OBJECTS_LARGER_THAN

/*
 * Enable this to prevent gcc from bitching about virtual function
 * mismatches.  Newer compilers have a slightly different way of
 * treating virtual functions with the same name ... if one is
 * redefined the other is lost.  I plan on "fixing" the "problems"
 * in the source that this causes soon, but it is on by default
 * so gcc-2.95.2 (and newer) will just work.
 */
#define	GCC_NO_WARN_VIRTUAL

/*
 * Enable this if you are using the brain-damaged "gcc-2.96" which
 * shipped with various versions of Linux.  That compiler is not a
 * real gcc release and is broken in many aspects.  Among them, it
 * ignores a lot of warning arguments.
 */
#undef GCC_BROKEN_WARNINGS

/*
 * Enable THIS if you are using the default gcc on Linux Redhat 7.3
 * boxes, with version string:
 *	gcc version 2.96 20000731 (Red Hat Linux 7.3 2.96-110)
 * This compiler has brain-damage which prevents it from compiling
 * one (count it 1) statement in the source code.  To get around that
 * problem, you will need to enable this option.  Note that this will
 * cause system performance to be reduced a bit.   I would suggest 
 * getting a better compiler.
 */
#undef	GCC_BROKEN_LINUX_2_96_110

/*
 * XXX this belongs in the sthread section, but is here because of
 * the relavence to GCC_BROKEN_WARNINGS.
 *
 * If this is defined, uses of sthread_t::yield() in sm and ssh
 * code will use yield() as a static method instead of a instance method.
 * Aka sthread_t::yield() versus sthread_t::me()->yield().
 *
 * Yield is a static method ... but calling a static method as a instance
 * method is a valid use ... what if you want to change method between
 * static and instance at some point?    Because this change is ONLY
 * needed for this ONE broken version of this ONE broken compiler,
 * I am going to leave everything as it is, and just do all the changes
 * inline for now.   Don't fix something that isn't broken.   For
 * example, yield() could be made virtual so that different thread types
 * could 'yield()' other resources when they themselves are yield()ing.
 */
#ifdef GCC_BROKEN_WARNINGS
#define STHREAD_YIELD_STATIC
#endif

/*
 * Enable this to have gcc generate templates implicitly.  The 
 * default is to generate template instantiations explicitly.
 * This does NOT work on all platforms and all toolchains.  It
 * may increase executable sizes.
 */
#undef GCC_IMPLICIT_TEMPLATE

/*
 * Enable this if you are using a gcc-3 series compiler.  The set of
 * warning options needed is different than the gcc-2 series compilers.
 */
#undef GCC_VER_3_WARNINGS

/* 
 * Directory to install bin, lib, include, and documents 
 */
#undef INSTALL_PATH 

/*
 * Define if you want to install the .pdb files corresponding to .exe files
 * which are installed.
 */
#define INSTALL_PDB_WITH_EXE

/*
 * Define if you want .sbr files generated when using using cl (visual studio).
 */
#undef GENERATE_SBR_FILES

/*
 * The LOCAL_LOG compile-time option has been replaced with
 * the SM_LOG_LOCAL runtime options.  It is an environment
 * variable.  If it has a non-zero numeric value, a local
 * log will be used.
 */

/*
 * Undefine this if you want the recovery code to trust the page
 * lsn of pages on a raw device.  This requires that a raw
 * device have every page wirtten when it is formatted to
 * initialize the page lsn.  If you set this raw volume pages
 * won't have to be initialized, but there might be a bit more
 * expense during recovery since every log record for a page
 * after a page format will have to be redone.
 */
/* for sources */
#define DONT_TRUST_PAGE_LSN

/*
 * This defines the SM page size in bytes.   The smallest page
 * size currently allowed is 1024 bytes.   A smaller page size could
 * be specified if some assumptions in arithmetic that a page size is
 * a multiple of 1024 were fixed.    The largest page size that is
 * allowed is 32768.   This is caused by limitations of the 2 byte
 * values used in the on-page record or slot descriptions.
 */
/* for sources */
#define SM_PAGESIZE 8192

/*
 * Define this if you want to change the number of pages in a extent.
 * The normal number of pages in an extent is 8.
 * NOTE that this completely changes the on-disk format (depends on
 * how many pages/extent you use) and is not well tested.  It does 
 * work, however.
 *
 * The one case where you may want to use this is if you want to have
 * larger volumes (> 10GB).   By increasing the number of pages per extent
 * you'll reduce some overheads in shore and have better allocation speeds.
 * In other words, a temporary fix until the underlying problem is fixed
 */
/* #define SM_EXTENTSIZE	8 */

/*
 * Define this if you want clients aborted when the percent threshold of
 * log in use by all clients is exceeded.  should be less than 50.
 */
#define SM_LOG_WARN_EXCEED_PERCENT 40

/*
 * Define this if you want to change the number of partitions in the
 * shore log.  The default is 8.
 * This can be a factor if you are using log-in-files.  Each log partition
 * is currently limited to 2GB.  However you can have a larger log by
 * increasing the number of partitions.
 * This code has not been tested to any great extent :)
 */
/* #define SM_LOG_PARTITIONS	8 */

/*
 * If you want 64 bit serial numbers (logical IDs)
 * rather that 32 bit, define this:
 */
/* for sources */
#undef SERIAL_BITS64

/*
 * Define this if you want to use the server-to-server coordination
 * stuff for two-phase commit.
 * This requires #define USE_OCOMM, which is not available with
 * the public release, so external (non-UW-Madison CSD) users
 * cannot build anything with this defined.
 */
#define USE_COORD

/*
 * Define this if you want to include crash test hooks in your
 * executable.  (For use with ssh, really).
 */
#undef USE_SSMTEST

/*
 * Say whether threads are preemptive or not.  This is a hack to
 * reduce the size of lock manager objects by changing the locking
 * hierarchy to take advantage of the non-preemptive threads.
 * NB: disregard
 */
#undef NOT_PREEMPTIVE

/*
 * Enable resource tracking independently of debug and other
 * intrusive stuff.  This tracks mutex and latches that a thread
 * owns for dumpthreads() style output.
 */
#undef SHORE_TRACE

/*
 * This controls how often "standard" thread stacks are checked
 * for overflow into the "red zone".  If something better is
 * available (that has no execution overhead) it will always
 * be used.  This is for the systems that don't have anything
 * better.
 *
 * This option has three levels.  0==undefined 1==defined|1, and 2:
 * 	0	no stack checks
 *	1	At each thread switch the stack of the running
 *		thread is checked to see if it has grown
 *		into the redzone.  This is a low-overhead
 *		inspection of stack pointer style check.
 *	2	Everything done for ==1, AND ... Invasive stack 
 *		checking controlled by the environement variable 
 *		of the same name.  If the variable is set to
 *		a non-zero value, the redzone of all stacks
 *		are inspected at EACH context swith to determine  
 *
 *		if something has corrupted them.
 # If DEBUGCODE is turned on, a stack check of level 2 is automatically
 * compiled into the system.  The default value for stack checking at
 * runtime is ON.  You can turn it off with the environment variable.
 * to This is the sames
 */
#define	STHREAD_STACK_CHECK	1

/*
 * Define this if you want to use thread cores which use Posix threads.
 * This is useful for debugging iff the debugger knows how to switch
 * between pthreads.  Should not be normally used as it changes
 * some of the "normal" behaviors of the threads package, as well
 * as being slower.
 *
 * You must also enable LINK_PTHREAD to use this option.
 */
#undef STHREAD_CORE_PTHREAD

/*
 * Define this if you want to use thread cores which use win32 threads.
 * Useful for debugging or using tools (such as PURIFY).  Should not
 * normally be used as it changes some of the "normal" behaviors of the
 * threads package.
 */
#undef STHREAD_CORE_WIN32

/*
 * Define this if you want to use thread cores which use win32 fibers.
 * Useful for debugging or using tools (such as PURIFY).  Should not
 * normally be used as it changes some of the "normal" behaviors of the
 * threads package.
 */
#undef STHREAD_CORE_WIN32F

/*
 * Define this if you want pthread spinlock's to be used for syncrhonization
 * purposed.   This was added to allow an all-pthread implementation to 
 * aid ports of shore to unsupported architectures which do have pthreads
 * implemented.    To use this LINK_PTHREAD will probably be needed.
 */
#undef STHREAD_TSL_PTHREAD

/*
 * Define this if you want sthreads to work with C++ exception
 * handling.  You need to have a compiler which supports C++
 * try/catch/throw exceptions for this to be turned on.  What
 * this option does is to provide a "dead stop" try/catch for
 * any exceptions a thread's run method does not catch.  That
 * prevents the exception throw from breaking things.
 *
 * If your compiler does have C++ exception support, turning this on
 * isn't bad, and it will catch any unexpected exceptions that would
 * otherwise screw the system up.  However, it won't abort execution
 * of the system as a whole.
 *
 * It is not enabled by default because neither Shore nor Paradise
 * use exceptions.  Also, some of the compilers that are supported
 * don't support exceptions themselves.
 */
#undef STHREAD_CXX_EXCEPTION

/*
 * Define this if you want to FORCE Win32 Exception handling
 * on a Win32 system.  If it isn't forced on, Win32 exception
 * handling is controlled at run-time by the 0/1 value of
 * an environment variable of the same name.
 *
 * Turning on STHREAD_WIN32_EXCEPTION means that you can NOT
 * click "yes" to have a debugger used on a process that is
 * crashing.
 */
#undef STHREAD_WIN32_EXCEPTION

/*
 * Define this to collect detailed statistics in the threads 
 * package.   This is a bit mis-named and will be renamed or
 * expanded in the future.  It is worth turning on.
 */
#define EXPENSIVE_STATS

/*
 * Define this to use Bolo's NewThreads I/O system that allows
 * native win32 support for OS objects.  While it is gaining
 * respectability, you may not want to use it.  Eventually it
 * will be the only game in town.
 *
 * Currently ...
 * This enables *both* the new Event Generation system, as well
 * as the new I/O system.  Disk R/W I/O and native win32
 * I/O can be selected at runtime by changing the environment
 * variables 
 *	STHREAD_IO_LOCAL
 * and	STHREAD_IO_ASYNC
 *
 * to be "unix" or "diskrw".
 */
#define	NEW_IO

/*
 * Define this if the New I/O facilities are being used on a
 * Win32 platform, and ONLY the new I/O facilities are wanted
 * to be included in the system (no diskrw or posix stuff at
 * all in the I/O system)
 */
#undef NEW_IO_ONLY

/*
 * Define this if you want the old "static" sdisk table in
 * the threads package.   The new default is to allocate file
 * table entries on demand.  This will go away soon, it is just
 * here in case some odd dependency occurs.
 */
#undef STHREAD_FDS_STATIC

/*
 * Define this to an >0 integer value if you want to change the
 * default number of files in the diskRW I/O segment.   The
 * default is 20.  This limit can also be changed at runtime
 * by setting the environment variable of the same name.
 */
#undef SDISK_DISKRW_OPEN_MAX

/*
 * Define this to a  >0 integer value if you want to change
 * the default number of multiple outstanding I/O operations
 * available on a sdisk_win32_async_t disk class.  The default
 * is 8 (in the include file).  An environment variable 
 * of the same name can be used to tune this parameter at
 * run-time (range == 1 to the maximum specified at compile time)
 *
 * Be careful tuning this, since systems with lots of active disk I/O
 * can increase the number of waited events considerably, and the
 * system will need to use the "event multiplexer", which does add
 * a bit of overhead to I/O.  On the other hand, having multiple out
 * standing I/Os helps a lot on a busy system.
 */
#undef	SDISK_WIN32_ASYNC_MAX

/*
 * Define this to enable "asynchronous" (as far as the threads package
 * is concerned) sdisk_t::sync() operations on a win32 async sdisk.
 * This enables the CPU thread to continue running while a sync occurs,
 * instead of blocking the entire process.  If this option is built
 * into the system it can be disabled by setting the environment
 * variable of the same name to an integer value, 0 for disabled,
 * non-zero to have 'asynchronous  syncs' occur.
 *
 * You will not really see any performance improvments when this
 * is enabled, because the part of the system that most benefits
 * from it (the SM log) is not capable of taking advantage of it.
 */
#define	SDISK_WIN32_ASYNC_ASYNC

/*
 * turn on/off use of PURIFY, QUANTIFY, etc
 */
#undef USE_PURIFY
#undef USE_QUANTIFY
#undef USE_PURECOV

/*
 * If you USE_PURIFY, you probably want to turn this on.
 *
 * Enable zero-filled structure padding and memset's to zero
 * various data structures to keep purify happy.
 *
 * On NT, just enable this option, don't turn on USE_PURIFY
 */
#undef PURIFY_ZERO

/*
 * Configure Pure software products to use the "new" per-product
 * stub libs instead of the older "pure_stubs" lib.  This issue is
 * incomplete, because the individual stub files don't have the same
 * semantics as the "global" stubs do.  In particular, the "generic"
 * pure functions may not be stubbed correctly.  However, this fix is
 * enough to allow Pure software to work until a better solution is
 * developed.
 * 
 * This will work with the -2002 and -5.3 Pure Software releases.  It
 * may work correctly with some earlier releases too.
 */
#define PURE_STUBS_NEW

/*
 * define this if you want expensive instrumentation
 * of the fastnew memory management.
 *
 * Currently required on NT/visual c++ due to a compiler bug
 * ** if fastnew is being used ***.  If NO_FASTNEW, this is not
 * required.
 */
#undef INSTRUMENT_MEM_ALLOC

/*
 * Define this if you want expensive instrumentation of
 * the SM sort code.
 */
#undef INSTRUMENT_SORT

/*
 * Define this if you want to time the compilation of each file.
 */
#undef TIME_COMPILES

/*
 * Define this if you want to compile all files individually rather
 * than using the compile-as-a-group options defined in the
 * individual Imakefiles.  (see the gen_group_file macro in Imake.rules)
 */
#undef NO_COMPILE_GROUPS

/*
 * Define this if you DO NOT want generated (_gen) files to be
 * dependent on the Makefile.  This can cause inconsistencies
 * in the build environment if a makefile change would cause the
 * generated file to be rebuilt.  Why then would you want to 
 * ever use this?  Because you can change the *implementation*
 * (and Imakefile) of something in a directory without changing
 * the generated files ... which means you can relink everything
 * instead of RECOMPILING the entire system.
 */
#undef BUILD_NO_DEPEND_MAKEFILE_GEN


/* 
 * Define this if you want nano-second time resolution on
 * Solaris.  Needs LINK_POSIX4.
 */
#undef USE_POSIX_TIME

/*
 * Define this if you want the system to be compiled 
 * with _REENTRYANT on solaris.  This does not 
 * require linking with pthreads, but *does* get you
 * the various xxx_r reentrant versions of some library
 * functions.
 * You don't need to turn this on if you choose LINK_PTHREAD.
 */
#undef SOLARIS_REENTRANT

/*
 * Define this if you want the system to be useable with
 * posix threads.  This involves a clean compilation of the
 * entire system because different include files are used.
 *
 * This is needed if you want to build with the following
 * options:
 *	STHREAD_CORE_PTHREAD
 *	BUILD_OLAP_SERVER
 *
 * Note that LINK_PTHREAD will break native threads on some platforms, such
 * as Linux.
 */
#undef LINK_PTHREAD

/*
 * Define this if you want the system to link with the
 * posix realtime libraries.
 *
 * This is needed on solaris if you want USE_POSIX_TIME.
 */
#undef LINK_POSIX4

/*
 * Previous to shore-interim-3, shore automagically linked against
 * -liberty on most platforms.   It is no longer required by default,
 * at least on the systems I could currently test against.  In addition,
 * some _linux_ distributions no longer have it.   I've changed
 * it to a shore.def option incase it is still required on some systems.
 * 
 * This only affects builds using gcc.
 */
#undef LINK_LIBERTY

/*
 * Define this to add '-lg++' to the link list when using gcc.
 * Shore hasn't been linking against it for some time, and this
 * could probably just go away.
 */
#undef LINK_LGXX

/*
 * Define this if you want a Win32 system to be compiled for and
 * to link against the debug version of the visual c++ runtimes.
 *
 *  *** WARNING *** READ THIS SPACE *** DO NOT CHANGE THIS ***
 *
 * This is an explicit flag that needs to be turned on and
 * is not part of turning on DEBUGGERSYMBOLS or other such
 * flags.  The debug runtimes change the size of data structures
 * used by the system, change the performance of libraries,
 * and  otherwise adversly affect the operation of the system.
 * In addition, you ONLY use it if all the software you link
 * with has been compiled to use the debug runtimes.
 */
#undef USE_CL_RUNTIME_DEBUG

/*
 * Define this if you want a Win32 system to link against the 
 * library (static) version of the visual c++ libraries and runtimes.
 */
#undef USE_CL_RUNTIME_LIB

/*
 * Define this if you want a Win32 system to link against the
 * single threaded (static) library version of the visual c++
 * libraries and runtime.
 */
#define USE_CL_RUNTIME_SLIB

/*
 * Define this if you want the visual c++ "stack checking" turned
 * on.   The name of this and the compiler option is actually
 * a misnomer by the way.  The compiler does or runtime does NOT
 * do any checking of the stack for validity.  What this option
 * does do is to slow the system down.  It write-probes the entire
 * stack frame of a function at every call, to make sure the stack
 * growth code in NT works correctly if a function allocates a large
 * stack frame.
 */
#undef USE_CL_STACK_CHECK

/*
 * Define this if you want a Win32 system to be compiled with
 * support for "Multi Byte Character Strings" aka Unicode.
 */
#undef USE_CL_MBCS

/*
 * Define this if you want a Win32 system to be compiled with
 * support for c++ exceptions.  It is actually forced on (without
 * a define) in Project.tmpl because shore/paradise currently links
 * against a library that needs but does not use exception handling.
 */
#undef USE_CL_EXCEPTIONS

/*
 * Define this if you want a Win32 system compiled with visual c++
 * to use a common read-only string pool.  
 */
#define USE_CL_STRING_POOL

/*
 * Define this if you want to use an external event-tracing scheme,
 * written by you for use with your value-added server.  For you to use
 * such a scheme, you must create a file src/smlayer/fc/extTraceEvents.h,
 * which can define trace macros as you please.
 * The Storage Manager does not provide any external tracing; it provides
 * only the tracing to an error log as defined in src/smlayer/fc/w_debug.h
 */
#undef USE_EXTERNAL_TRACE_EVENTS

/*
 * Define this if you want to use the original config file format.
 * The "new format" is incompatible with the old format.
 */
#undef USE_OLD_CONFIG_FILE

/*
 * Define this if you want to compile and link a Win32 system 
 * with the MFC (Microsoft Foundation Classes).  This is *NOT*
 * recommended, as it allows Win32 specific code, instead of
 * using portable c++ constructs.
 */
#undef USE_CL_MFC

/*
 * Define this if you do not want various classes to
 * use the "fastnew" facility.  If this is defined no classes
 * will use fastnew memory, relying upon the default allocator
 * instead.
 */
#undef	NO_FASTNEW

/*
 * Define this if you want the errlog code to do NT synchronization
 * on Win32.  You really don't want this, but I haven't yanked the
 * code yet.
 *
 * ...DEBUG is the same thing for the DBG code in fc.  You may want
 * to turn it on when not using NEW_IO on win32 and TRACECODE is
 * enabled, to catch the debug output of the disk r/w threads.
 */
#undef FC_ERRLOG_WIN32_LOCK
#undef FC_DEBUG_WIN32_LOCK

/*
 * Defined this if you want u_long to be 'unsigned' instead of
 * 'unsigned long'.  This is ONLY for 64 bit machines.  It keeps
 * the sizes of some statistics that are declared as u_long the
 * same size as on a 32 bit machine.   The system works correctly
 * without it ... though it has been tested extensively with it
 * turned on before a bunch of u_longs that were problems were
 * eliminated.
 *
 * This will go away once the statistics types are typedefed and 
 * controlled in some sane manor -- instead of with ad-hoc types.
 */
#undef FC_COMPAT_32BIT_ULONG

/*
 * Defines this if bolo's version of 'const char *form(const char *,...)'
 * should be added to the FC library.   Some systems lack a stanalone
 * form() function.   This one is also somewhat thread safe and such,
 * though it is more optimistic than anything else.
 *
 * This happens automatically (seperate of the option) on systems with
 * gcc-3.2 and Visual Studio; they lack the function or access to it.
 */
#undef FC_USE_FORM

/*
 * Define this if you want to specify a different size than
 * the default (40 bytes) for global transaction IDs, gtids.
 */
#undef COMMON_GTID_LENGTH

/*
 * Define this if you want to specify a different size than
 * the default (100 bytes) for server handle IDs.
 */
#undef COMMON_SERVER_HANDLE_LENGTH

/*
 * Define this if your system's memcmp() function makes _signed_
 * comparisons on each character, instead of unsigned comparisons.
 * This most likely corresponds to whether the default character
 * type on your system is 'signed char'.   The symptom you'll see if
 * this is needed is that key comparisons will go wacky.
 *
 * This option is enabled automagically on Sparc platforms in
 * common/umemcmp.h, as the memcmp function on SunOS use signed comparison.
 * All other systems shore runs on have a memcmp() which provides unsigned
 * comparisons already, and that is used.
 */
#undef COMMON_USE_UMEMCMP

/*
 * The default number of sharers of a latch is 4.  If you want to 
 * allow more sharing of a latch, #define this to the integer value
 * of the maximum number of sharers allowed.  This has been tested
 * with 8 and 16 sharers for correctness.  Above 16 sharers is
 * not recommended .... the algorithms needs to be improved.
 *
 * XXX this really changes common/latch parameters, but is labelled
 * 'SM' as that is where latches really exist.
 */
#undef SM_LATCH_SHARE_MAX

/*
 * If this is defined, when a SM page is "formatted", its entire
 * content will be over-written with a "garbage" value.    This
 * is NOT necessary for system operation, but provides a consistent
 * default value to the page content.
 */
#undef SM_FORMAT_WITH_GARBAGE

/*
 * Define this if you want the system to be compatible
 * with the volume version 13 On Disk Structures (and the 
 * log version 1 log format).  Work is in progress to upgrade to a new
 * volume and log format which allow large "disk addresses".
 * However, even with "small" disk addresses, it is not compatible
 * with the old on-disk representation.
 *
 * This only works with 32 bit versions of the system, it can not be
 * used with 64 bit versions.   It also can not be used on systems that
 * need/want 8 byte memory alignment.   The On Disk 13 format doesn't go
 * along with that.
 *
 * You will also need to specify SM_ODS_COMPAT_XX for  versions XX greater
 * than 13 to make things work correctly.
 *
 * IN OTHER WORDS, DON'T USE THIS UNLESS YOU HAVE A VERSION 13 SHORE LOG AND
 * VOLUME WHICH YOU NEED TO USE.   YOU WON'T BE ABLE TO USE NEWER SHORE 
 * FEATURES AND IT MAY NOT WORK ANYWAY.  :)
 */
#undef SM_ODS_COMPAT_13

/*
 * Define this if you want the system to be compatible with volume
 * version (14,15) On-Disk-Structures used in the first two interim 
 * snapshots and the broken "SM 2.0" release.   Briefly the data bytes
 * on the page were NOT 8 byte aligned in ODS 14 and earlier.   This
 * causes problems on 64 bit architectures and also on 32 bit architectures
 * which want to have doubles and 8 byte integers be aligned to their
 * native size.
 *
 * Typically you would only want to use this if you have existing shore
 * volumes which you want to keep using until you can find time to reload
 * them into a shore with a more recent on-disk-structure version.
 */
#undef SM_ODS_COMPAT_14

/*
 * Define this if you want records to be aligned to 8 byte boundaries
 * instead of 4 byte boundaries.   This increases the pre-record overhead
 * from 12 to 16 bytes.   However it allows for fp. doubles and quad word
 * integers to be properly aligned.   Without this you would need to
 * memcpy structures and types that required x8 alignment from the pin
 * to be accessed correctly.
 *
 * The option doesn't do anything on 64 bit architectures, they require
 * 8 byte alignment.   Note that changing the record alignment will change
 * the size of the on-disk structures -- this is not reflected in the
 * volume version number.   Note that if you use 8 byte alignment with
 * any of the compatability modes that you will break the on-disk alignment
 * anyway.
 *
 * In general this is a mess and once it is fixed in a general way the
 * the on-disk format will be stabilized and a lot of this stuff will
 * go away or be generalized.   Backwards compatability will be removed too,
 * since the old volumes really are broken.
 *
 * Note that this will not work correctly on win32.  Due to previous
 * assumptions (which are being removed slowly, see above) record alignment  
 * is tied to the alignment of natural data types.   On unix boxes this
 * assumption holds true (doubles are 8x aligned).  However win32 only
 * aligns 8 byte quantities to 4x alignments.   So, the data structures
 * will be setup for x8 alignment, but checks in the code for proper
 * in-memory (versus in-record) alignment will fail.
 */
#undef SM_RECORD_ALIGN_8

/*
 * Define this if you want the system on-disk structures to have
 * "large" (64 bit) disk addresses in the on-disk structures.  The
 * default size of a disk address is 32 bits.
 *
 * Using "large disk addresses" will allow individual log partitions
 * to exceed the 2GB limit ... assuming that the underlying OS is capable
 * of using files larger than 2GB.   Changing this is orthogonal to
 * largefile support.
 *
 * This changes both the on-disk format of the log and volumes; the
 * system adjusts the version number to prevent incompatibilities from
 * occuring.
 */
#undef SM_DISKADDR_LARGE

/*
 * Define this if you want ssh to use the old, event semaphore 
 * driven sychronization.  It is slower and can have race conditions,
 * but there may be timing dependencies in it tests can
 * depend upon in some cases.
 */
#undef SSH_SYNC_OLD

/* Options for Paradise follow.  do not edit this line */

#define PARA_DEBUGCODE ON

/*
 * PARA_VERBOSE_x where x >= PARA_VERBOSE_MIN_LEVEL are compiled in.
 * leaving it undefined sets it to 1 unless USE_EXTERNAL_TRACE_EVENTS
 * is turned on, in which case it is set to 2 and 1's are traced by
 * a different mechanism.
 */
#undef PARA_VERBOSE_MIN_LEVEL

/*
 * PARA_VERBOSE_x where x <= PARA_VERBOSE_MAX_LEVEL are compiled in.
 * leaving it undefined includes up to the max level.
 */
#undef PARA_VERBOSE_MAX_LEVEL

/* 
 * Enable compression of array tiles.
 */
#define PARA_COMPRESS

/* 
 * Set limit to the number of parathread_t's.  if undefined the value is
 * determined by the sources.
 */
#undef PARA_MAX_PARATHREADS

/*
 * Turning this on makes each query client thread have its own
 * attribute schema cache.  This can allow threads to have different
 * schemas, such as when a system upgrade is in progress.  At
 * this time, no facility exists, nor is it possible for anyone
 * to use a seperate schema cache.  But the facility exists if it
 * is needed.
 */
#undef CATALOG_SCHEMA_CACHE_PER_THREAD


/*
 * The new object-oriented communications system.
 */
#define USE_OCOMM
#define OCOMM_USE_TCP
#define OCOMM_USE_TCP_XXX
#undef OCOMM_USE_PVM
#undef OCOMM_USE_UDP
#undef OCOMM_USE_MYRINET
#undef OCOMM_USE_MPI

/*
 * Define this if you want the quick bug fix for a multi-node/multi-disk problem 
 * related to an exceptional error condition when the receving operator exits 
 * before the message that starts the local sending operator gets received.
 * This is turned on by default until the lower level complete fix is done.
 */
#define NETSTREAM_ABORT_HACK

/*
 * Define this if you want top/middle operators to wait for bottom
 * operators to connect before aborting.  This fixes a hang bug where a
 * middle or top operator aborts before a bottom operator has a chance to
 * start up and connect.  The bottom operator then starts up, sends a
 * couple of pages and waits on flow control.  Since the middle/top
 * operator is gone, the bottom operator hangs, possibly with locks held.
 * This fix also modifies the HashJoin operator.  The second input stream
 * isn't created and opened until the second phase is started because
 * this two phase operator can abort after the first phase.  This fix
 * can be disabled when the ability to abort bottom operators directly
 * is implemented.  See TAR 124967 for more info on this fix.
 */
#define BOTTOM_OP_ABORT_FIX

/*
 * Define this if you want Object Comm to panic the system
 * when it detects a condition that may cause a system hang
 * later.  This is a shore.def option because it may be too
 * aggressive, but it generates correct results.
 */
#define	OCOMM_ABORT_HACK

/*
 * Define these if you want to build ptk or tests/ctests
 * respectively by default.  You may need to configure TCL if it isn't
 * in the standard paradise location.
 */
#undef BUILD_DEFAULT_PTK
#undef BUILD_DEFAULT_CTESTS
#undef BUILD_EVERYTHING

/*
 * Define this if you want to build the OLAP Server
 *
 * Needs LINK_PTHREAD.
 */
#undef BUILD_OLAP_SERVER

/*
 * Define this if you want to use the old executable names instead
 * of the "TOR" junk names.
 */
#undef USE_OLD_EXEC_NAMES

