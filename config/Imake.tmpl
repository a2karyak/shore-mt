#define CMNT #

CMNT begin Imake.tmpl

CMNT
CMNT WARNING: Do not edit this Makefile.  It is generated by Imake,
CMNT          so edit the Imakefile instead.
CMNT

CMNT <std-header style='imake_cmnt' orig-src='shore'>
CMNT
CMNT  $Id: Imake.tmpl,v 1.36 2000/01/14 05:35:19 bolo Exp $
CMNT
CMNT SHORE -- Scalable Heterogeneous Object REpository
CMNT
CMNT Copyright (c) 1994-99 Computer Sciences Department, University of
CMNT                       Wisconsin -- Madison
CMNT All Rights Reserved.
CMNT
CMNT Permission to use, copy, modify and distribute this software and its
CMNT documentation is hereby granted, provided that both the copyright
CMNT notice and this permission notice appear in all copies of the
CMNT software, derivative works or modified versions, and any portions
CMNT thereof, and that both notices appear in supporting documentation.
CMNT
CMNT THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
CMNT OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
CMNT "AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
CMNT FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
CMNT
CMNT This software was developed with support by the Advanced Research
CMNT Project Agency, ARPA order number 018 (formerly 8230), monitored by
CMNT the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
CMNT Further funding for this work was provided by DARPA through
CMNT Rome Research Laboratory Contract No. F30602-97-2-0247.
CMNT
CMNT   -- do not edit anything above this line --   </std-header>

#if defined(ExtTop) || defined(ExtBuildTop)
#define xlate_names(x) $(subst $(TOP),$(EXT_TOP),$(subst $(BUILD_TOP),$(EXT_BUILD_TOP),x))
#else
#define xlate_names(x) x
#endif

CMNT Force --print-directories unless --silent, not the default in cygwin
MAKEFLAGS := -r --warn-undefined-variable $(MAKEFLAGS)
ifneq 's' '$(findstring s, $(filter-out --%, $(MAKEFLAGS)))'
MAKEFLAGS := -w $(MAKEFLAGS)
endif

/* define this here since Platform gets defined as a macro :( */
CONFIG_IMAKEFILE_DEPEND_FILES = Imake.rules Imake.tmpl Platform.select Project.rules    \
	Project.tmpl local.def local.tmpl local.rules

/*
 * Provide a default definition of the variable.  It is mostly
 * unused, except in a few configurations.  But when it is not
 * set, it causes make errors.
 */
MAKE_OPT=

SLASH = /

/* always include shore.def first */
#include <shore.def>
#include <local.def>

#include <Platform.select>

/*
 * This is the "derived configuration" section, where
 * potential configuration ERRORS are avoided.  There are
 * really 2 things which need to be done ..
 *  - common configuration (makes it into #include in the source)
 *  - makefile configuration
 */
#if defined(IS_IX86_NT) &&  !defined(MAKE_SHELL)
/* #define MAKE_SHELL  D:/usr/local/bin/tcsh  */
/* MUST pass environment variables through $(MAKE) because
 * make uses $Path from the environment, but looks it up
 * as a make variable.  
 */
MAKE_OPT += -e
#endif

/*
 *  The solaris /bin/sh is broken.
 *  The AIX test in the aix /bin/sh is broken, well ... it doesn't
 *       work with the shore makefiles.
 */
#if (defined(IS_SOLARIS2) || defined(IS_RS6000_AIX32) || defined(IS_RS6000_AIX41))  &&  !defined(MAKE_SHELL)
#define	MAKE_SHELL	/bin/ksh
#endif

#ifdef MAKE_SHELL
SHELL=MAKE_SHELL
MAKE_OPT += SHELL=MAKE_SHELL
#endif

/* 
 * META-MACROS: OBJEXT for object-file extensions
 * META-MACROS: EXEEXT for executable-file extensions
 * META-MACROS: LIBEXT for library-file extensions
 */
#if IS_DOSDEV
#	define OBJEXT obj
#	define EXEEXT exe
#	define LIBEXT lib
#	define DLLEXT dll
#else /* IS_UNIX */
#	define OBJEXT o
#	define EXEEXT
#	define LIBEXT a
#	define DLLEXT so
#endif /* IS_UNIX */

CMNT
CMNT This Makefile is generated specifically for Platform machines.
CMNT

#include <SrcDirInfo.tmpl>
#include <Project.tmpl>
#include <local.tmpl> 

default: all

#include <Imake.rules>
#include <local.rules> 

.SUFFIXES: $(NEWSUFFIXES) $(SUFFIXES)
#include INCLUDE_IMAKEFILE
#include <Project.rules> 

CMNT end Imake.tmpl
