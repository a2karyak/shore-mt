/* --------------------------------------------------------------- */
/* -- Copyright (c) 1994, 1995 Computer Sciences Department,    -- */
/* -- University of Wisconsin-Madison, subject to the terms     -- */
/* -- and conditions given in the file COPYRIGHT.  All Rights   -- */
/* -- Reserved.                                                 -- */
/* --------------------------------------------------------------- */

/*********************************************************************

This file contains SHORE Project build options.  A few of these
options commonly need to be set by installers of the software.

*********************************************************************/

/* Directory to install bin, lib, include, and documents */
/* Comes from shore.def */
#ifdef INSTALL_PATH
INSTALL_DIR = INSTALL_PATH
#else
INSTALL_DIR = $(TOP)/installed
#endif


/* Location of Tcl -- REQUIRED */ 
TCL_DIR = /s/tcl

/* Location of Bison  -- REQUIRED*/
#ifdef SUP_DIRS
BISON_DIR = /usr/psup/bin
#else
BISON_DIR = /s/std/bin
#endif
BISON = $(BISON_DIR)/bison

/* Location of Flex -- REQUIRED */
#ifdef SUP_DIRS
FLEX = /usr/psup/bin/flex
FLEXLIB = /usr/psup/lib/libfl.a
#else
FLEX = /s/flex/bin/flex
FLEXLIB = /s/flex/lib/libfl.a
#endif

/* Location of gdbm (Gnu version of ndbm) -- NOT REQUIRED */
/* (directory contain lib/ and include/ */ 
#ifdef SUP_DIRS
GDBM_DIR = /usr/psup
#else
GDBM_DIR = /s/gdbm
#endif

#ifdef IS_SPARC_SUNOS41
PURE_GOPT=\
        -inuse-at-exit -ignore-signals=0x40000000 -first-only -leaks-at-exit \
        -pointer-mask=0xfffffffe -copy-fd-output-to-logfile=1,2
#else
#  ifdef IS_SNAKE_HPUX8
PURE_GOPT=\
        -inuse-at-exit -ignore-signals=0x00010000 -first-only -leaks-at-exit \
        -pointer-mask=0xfffffffe -copy-fd-output-to-logfile=1,2
#  endif
#endif

/* Location of Purify  -- NOT REQUIRED */
#if defined(USE_PURIFY)||defined(USE_QUANTIFY)||defined(USE_PURECOV)
#ifdef SUP_DIRS
PURIFY_COLLECTOR =/usr/psup/gcc-2.6.3/lib/gcc-lib/sparc-sun-sunos4.1.3/2.6.3/ld
#else
#if defined(IS_SPARC_SOLARIS2) || defined(IS_I386_SOLARIS2)
PURIFY_COLLECTOR =/usr/ccs/bin/ld 
#else
PURIFY_COLLECTOR =/s/gcc-2.6.3/lib/gcc-lib/sparc-sun-sunos4.1.3/2.6.3/ld
#endif
#endif
/* Note that thread-stack-change is 12K and stack size is 64K.
   This is necessary since purify will not always notice stack
   changes if the change-size is near the stack size.
*/
#endif /*USE_PURIFY or .... */
#ifdef USE_PURIFY
#define _PURIFY_ 1
#ifdef SUP_DIRS
PURIFY_DIR = /usr/sup/purify-3.0a
#else
PURIFY_DIR = /s/purify/bin
#endif
PURE_3_OPT=$(PURE_GOPT) -threads -thread-stack-change=0x3000 -max_threads=64
PURE_OPT = $(PURE_3_OPT)
#endif /*USE_PURIFY*/

#ifdef USE_QUANTIFY
/* Location of Quantify  -- NOT REQUIRED */
/* To get basic block analysis, -g is required */

QUANT_COMPILE_OPTS = -g

#define _QUANTIFY_ 1
#ifdef SUP_DIRS
QUANT_DIR = /usr/sup/quantify
#else
QUANT_DIR = /s/quantify/bin
#endif
QUANTIFY_COLLECTOR =$(PURIFY_COLLECTOR)
QUANT_OPT = 
#else
QUANT_COMPILE_OPTS = 
#endif /*USE_QUANTIFY*/

#ifdef USE_PURECOV
/* Location of Purecov  -- NOT REQUIRED */
#define _PURECOV_ 1
PURECOV_DIR = /usr/sup/purecov-1.0
PURECOV_COLLECTOR =$(PURIFY_COLLECTOR)
PURECOV_OPT = 
#endif /*USE_PURECOV*/

/* Location of ctags  -- NOT REQUIRED */
#ifdef SUP_DIRS
CTAGS_DIR = /usr/psup/emacs19/bin
#else
CTAGS_DIR = /s/emacs/bin
#endif

/**************** End of commonly set options ********************/

TOP = Top

#define ON 1
#define OFF 0

#if defined(RMM)
CMNT RMM
RM = RMM
#else
CMNT NO RMM
CMNT make sure it's not rm -f, since
CMNT the makefiles specify -f
RM = rm
#endif

PLATFORM = Platform
ARCH = Arch
OPSYS = OpSys

/*
 * Common libraries and their include locations
 */

#ifdef IS_I860_OSF1AD
TCL_INCL = -I/usr/gnu/include
TCL_LIB = /usr/gnu/lib/libtcl.a
#define	TCL_DEF
#endif
#ifndef TCL_DEF
/* TCL_DIR = $(TCL_DIR)  this is defined at the top now */
TCL_INCL = -I$(TCL_DIR)/include
TCL_LIB = $(TCL_DIR)/lib/libtcl.a
#else
#undef TCL_DEF
#endif

FC_DIR = $(TOP)/src/fc
FC_INCL = -I$(FC_DIR)
FC_LIB = $(FC_DIR)/libfc.a
COMMON_DIR = $(TOP)/src/common
COMMON_INCL = -I$(COMMON_DIR)
COMMON_LIB = $(COMMON_DIR)/libcommon.a
SM_DIR = $(TOP)/src/sm
SM_INCL = -I$(SM_DIR)
SM_LIB = $(SM_DIR)/libsm.a
STHREAD_DIR = $(TOP)/src/sthread
STHREAD_INCL = -I$(STHREAD_DIR)
STHREAD_LIB = $(STHREAD_DIR)/libst.a

#if defined(IS_SPARC_SOLARIS2) || defined(IS_I386_SOLARIS2)
RPC_DIR =  $(TOP)/src/rpc4.0
RPC_LIB =  -lnsl
RPC_INCL =  
RPC_SVC_LIB = -lnsl
RPCGEN = $(RPC_DIR)/rpcgen/rpcgen
#else
RPC_DIR =  $(TOP)/src/rpc4.0
RPC_LIB =  $(RPC_DIR)/rpc/librpclib.a
RPC_INCL =  -I$(RPC_DIR)
RPC_SVC_LIB = $(RPC_DIR)/rpcsvc/librpcsvc.a
RPCGEN = $(RPC_DIR)/rpcgen/rpcgen

#endif 

VAS_DIR =  $(TOP)/src/vas
#ifdef USE_CC
/* GROT: final executables need all these -Is for CC ptlink phase. */
VAS_INCL = -I. -I$(VAS_DIR)/include -I$(VAS_DIR)/common -I$(VAS_DIR)/client
#else
VAS_INCL = -I. -I$(VAS_DIR)/include -I$(VAS_DIR)/common
#endif
VAS_APP_LIB = $(VAS_DIR)/client/libvas.a $(VAS_DIR)/common/libcommon.a
OC_DIR =  $(TOP)/src/lil/oc
OC_INCL = -I$(OC_DIR) 
OC_LIB = $(OC_DIR)/liboc.a
SDL_DIR =  $(TOP)/src/sdl
SDL_INCL = -I$(SDL_DIR)/include
SDL_LIB = $(SDL_DIR)/libsdl.a

GDBM_INCL = -I$(GDBM_DIR)/include

#ifdef IS_SNAKE_HPUX8
#ifdef FORCE_GCC
GDBM_LIB = /usr/unsup/lib/libgdbm-gcc.a
#else
GDBM_LIB = $(GDBM_DIR)/lib/libgdbm.a
#endif
#else
GDBM_LIB = $(GDBM_DIR)/lib/libgdbm.a
#endif

#ifdef USE_VERIFY
VERIFY_DIR = $(TOP)/src/verify
VERIFY_INCL = -I$(VERIFY_DIR)
VERIFY_LIB = $(VERIFY_DIR)/libverify.a
#else
VERIFY_DIR = 
VERIFY_INCL = 
VERIFY_LIB = 
/* remove demand for gdbm library if not using verify */
GDBM_LIB = 
#endif


TRANSPORT_LIB=
TRANSPORT_INCL=

#ifdef USE_PVM3
#if defined(IS_MIPS_ULTRIX42) || defined(IS_SPARC_SUNOS41) || defined(IS_SNAKE_HPUX8) || defined(IS_SPARC_SOLARIS2) || defined(IS_I386_SOLARIS2)
PVM3= /p/shore/pvm3.2
PVM3INC=$(PVM3)/include
PVM3_INCL=-I$(PVM3INC)

#ifdef IS_MIPS_ULTRIX42
PVM3LIB=$(PVM3)/lib/PMAX
#endif

#ifdef IS_SPARC_SUNOS41
PVM3LIB=$(PVM3)/lib/SUN4
#endif

#if defined(IS_SPARC_SOLARIS2) || defined(IS_I386_SOLARIS2)
PVM3LIB=$(PVM3)/lib/SUN4SOL2
#endif

#ifdef IS_SNAKE_HPUX8
PVM3LIB=$(PVM3)/lib/HPPA
#endif

PVM3_LIB= $(PVM3LIB)/libgpvm3.a $(PVM3LIB)/libpvm3.a
#endif
#endif /* USE_PVM3 */

/*
 * XXX TRANSPORT_LIB is for the comm system; casual pvm users
 * should use PVM3_LIB and PVM3_INCL
 *
 * This remains defined on USE_PVM3 for temporary backward compatibility
 */
#if defined(USE_PVM3) || defined(OCOMM_USE_PVM)
TRANSPORT_LIB+= $(PVM3_LIB)
TRANSPORT_INCL+= $(PVM3_INCL)
#endif /* OCOMM_USE_PVM */

/* XXX needs to be integrated into new configuration */
#if defined(IS_I860_OSF1AD)
#define	USE_INTELNX
TRANSPORT_LIB+= -lnx -lmach
TRANSPORT_INCL+=
#endif

#if defined(USE_MYRINET)
MYRINET=/s/myrinet
MYRINET_INCL= -I$(MYRINET)/include
MYRINET_LIB= $(MYRINET)/lib/libMyriApi.a $(MYRINET)/lib/libLanaiDevice.a
#ifdef IS_SPARC_SOLARIS2
MYRINET_LIB+= $(MYRINET)/lib/libMyriCompat.a
#endif /* IS_SPARC_SOLARIS2 */
#endif /* USE_MYRINET */

#ifdef OCOMM_USE_MYRINET
TRANSPORT_INCL+= $(MYRINET_INCL)
TRANSPORT_LIB+= $(MYRINET_LIB)
#endif /* OCOMM_USE_MYRINET */

#ifdef USE_MPI
#ifdef MPI_FLAVOR_MPICH
MPI=/p/shore/mpi
MPI_INCL= -I$(MPI)/include
#ifdef IS_SPARC_SUNOS41
MPI_LIB= $(MPI)/lib/sun4/ch_p4/libmpi.a
#endif
#ifdef IS_SPARC_SOLARIS2
MPI_LIB= $(MIP)/lib/sun4/ch_p4/libmpi.a
#endif
#endif /* MPI_FLAVOR_MPICH */

#ifdef MPI_FLAVOR_SP2
MPI=	/usr/lpp/ppe.poe
MPI_INCL= -I$(MPI)/include
MPI_LIB_DIRS= -L$(MPI)/lib -L$(MPI)/lib/ip
MPI_LIB_LIBS= -lmpi -lvtd
MPI_LIB= $(MPI)/lib/libmpi.a $(MPI)/lib/libvtd.a $(MPI)/lib/libppe.a
#endif /* MPI_FLAVOR_SP2 */

#endif /* USE_MPI */


#ifdef OCOMM_USE_MPI
TRANSPORT_INCL+= $(MPI_INCL)
TRANSPORT_LIB+= $(MPI_LIB)
#endif /* OCOMM_USE_MYRINET */

#if defined(USE_OCOMM)
OCOMM= $(TOP)/src/object_comm
OCOMM_INCL= -I$(OCOMM)/include
OCOMM__LIB= $(OCOMM)/src/libcomm.a
OCOMM_NS_LIB= $(OCOMM)/ns/libns.a
OCOMM_LIB= $(OCOMM__LIB) $(OCOMM_NS_LIB)
#endif


/*
 * Compilation Options
 */
CMNT 
CMNT Compilers
CMNT
/* 
 * FORCE_GCC and FORCE_CC are taken from the environment variables.
 * NB: ALL .tmpl files must respect these FORCE variables!
 *
 *
 *
 * DEBUGFLAGS: used for source debugging levels  -DDEBUG or -NDEBUG
 * 		use -DDEBUG by #define-ing DEBUGCODE ON
 * 		use -NDEBUG by #undef-ing DEBUGCODE OFF (below)
 * DEBUGSYMBOLS: controls generation of symbol table info, i.e., 
 * 		whether the compiler generates a symbol table
 *		generate symbols by #define-ing DEBUGGERSYMBOLS ON
 *		don't generate symbols by #undef-ing DEBUGGERSYMBOLS OFF (below)
 * OPTFLAGS:	optimization level -- necessarily tied to debugging level
 *				for some compilers
 *      optimize by #define-ing OPTIMIZE ON
 *      don't optimize by #undef-ing OPTIMIZE OFF (below)
 *
 * NATIVECCFLAGS: flags for native cc always
 * GCCFLAGS: flags for gcc always
 * CCFLAGS is derived from {NATIVECCFLAGS,GCCFLAGS} after choice
 *           of compiler is made
 *
 * CFRONTFLAGS: flags for ATT or native CC always
 *
 * CCDEBUGSYMBOLS: debugflags for cc, determined by DEBUGSYMBOLS
 * CFRONTDEBUGSYMBOLS: debugflags for CC, determined by DEBUGSYMBOLS
 * GCCDEBUGSYMBOLS: debugflags for gcc, determined by DEBUGSYMBOLS
 * CPLUSDEBUGSYMBOLS is derived from {CFRONTDEBUGSYMBOLS,GCCDEBUGSYMBOLS}
 *          after it's determined which C++ compiler is in use
 *
 * CCOPTIMIZE: debugflags for cc, determined by OPTIMIZE
 * CFRONTOPTIMIZE: debugflags for CC, determined by OPTIMIZE
 * GCCOPTIMIZE: debugflags for gcc, determined by OPTIMIZE
 * CPLUSOPTIMIZE is derived from {CFRONTOPTIMIZE,GCCOPTIMIZE}
 *          after it's determined which C++ compiler is in use
 *
 */

/*
 * DEBUGCODE, DEBUGGERSYMBOLS, OPTIMIZE  are set at the top of this file
 */

/*  GCC flags are the same for each architecture */
/*  NB: if you want to make with -fexternal-templates, you MUST
 *  do this:
 *  #define GCCFLAGS -fexternal-templates -DEXTERNAL_TEMPLATES
 *  in order to avoid duplicate definitions (link errors).
 */
#define USE_GCC
#define GCCFLAGS   -fno-implicit-templates

#if DEBUGCODE == ON
DEBUGFLAGS = -DDEBUG
#else
DEBUGFLAGS = -DNDEBUG
#endif

#if DEBUGGERSYMBOLS == OFF
/* the ON cases are handled differently for each architeture, below */
CCDEBUGSYMBOLS = 
CFRONTDEBUGSYMBOLS = 
GCCDEBUGSYMBOLS = 
#endif /* DEBUGGERSYMBOLS */

#if OPTIMIZE==OFF
CCOPTIMIZE = 
CFRONTOPTIMIZE = 
/*
 * The default optimization level for gcc is -O as recommended
 * by Gnu folks.  Plus, this allows things to actually link on the
 * HPs, otherwise some .o's can lead to errors like:
 *    Target of unconditional branch is out of range
 * Of course, this can following the code in the debugger a little
 * tricky
 */
GCCOPTIMIZE = -O
#else
CCOPTIMIZE =  -O
CFRONTOPTIMIZE =  -O 
GCCOPTIMIZE =  -finline-functions -fexpensive-optimizations -O2
#endif /* OPTIMIZE */

#if IS_SNAKE_HPUX8
	/* Use GCC on HPUX */
#   undef USE_CC
#   define USE_GCC

    /*  HP cc does not know about "//"  */
    /*  HP cc defines __STDC__ if -Aa is set. */
#   define NATIVECCFLAGS -Aa 

	/* If we're using HP's unbundled CC */
    /*  HP CC knows about "//" */
    /*  HP CC's cpp seems to be ansi compatible wrt # and ##, 
     *  (as long as -Aa is on) even though 	it does 
     *  not define __STDC__, so we have to define it. gak
     */
#   define CFRONTFLAGS -Aa -D__ANSI_CPP__ -z

#if DEBUGGERSYMBOLS == ON
CCDEBUGSYMBOLS =  -g
CFRONTDEBUGSYMBOLS =  -g1
GCCDEBUGSYMBOLS = -g3 -fno-inline
#endif

#endif

#if IS_I860_OSF1AD
	/* no CC on paragon */
#   undef USE_CC
#   define USE_GCC

#	undef GCCFLAGS
#	define GCCFLAGS -fno-builtin
#   define NATIVECCFLAGS 
#   define CFRONTFLAGS 

/*
 * The compiler's symbols when using c++ templates screw up the 
 * assembler.  The short term fix for this is not to compile
 * with -g.
 */
CMNT CCDEBUGSYMBOLS = -g
CMNT CFRONTDEBUGSYMBOLS = none
CMNT GCCDEBUGSYMBOLS = -g3 
CCDEBUGSYMBOLS =
CFRONTDEBUGSYMBOLS =
GCCDEBUGSYMBOLS = -fno-inline

#endif

#if IS_MIPS_ULTRIX42
	/* CC on ultrix is ATT (cfront) */
	/* default is to use GCC */
#   define USE_GCC
#   undef USE_CC

#   define NATIVECCFLAGS  -std1
#   define CFRONTFLAGS +a1 -D__ANSI_CPP__

#if DEBUGGERSYMBOLS == ON
CCDEBUGSYMBOLS =  -g
CFRONTDEBUGSYMBOLS = -g
GCCDEBUGSYMBOLS = -g3 -fno-inline
#endif

#endif

#if IS_SPARC_SUNOS41 || IS_SPARC_SOLARIS2 || IS_I386_LINUX || IS_R6000_AIX32 || IS_RS6000_AIX41
    /*  SUN ATT CC does not seem to know about //, ansi cpp #, ## 
     *  so we use gcc.  SUN cc also doesn't seem to handle any of 
     *  the above, so we use gcc for everything
     */
#   define USE_GCC
#   undef USE_CC

#   define NATIVECCFLAGS
#   define CFRONTFLAGS  +a1 -D__ANSI_CPP__

#if DEBUGGERSYMBOLS == ON
CCDEBUGSYMBOLS =  -g
CFRONTDEBUGSYMBOLS = -g 
GCCDEBUGSYMBOLS = -g3 -fno-inline
#endif


#endif

#if IS_I386_SOLARIS2
    /*  SUN ATT CC does not seem to know about //, ansi cpp #, ##
     *  so we use gcc.  SUN cc also doesn't seem to handle any of
     *  the above, so we use gcc for everything
     */
#   define USE_GCC
#   undef USE_CC

#   define NATIVECCFLAGS
#   define CFRONTFLAGS  +a1 -D__ANSI_CPP__

#if DEBUGGERSYMBOLS == ON
CCDEBUGSYMBOLS =  -g
CFRONTDEBUGSYMBOLS = -g
GCCDEBUGSYMBOLS = -gstabs -fno-inline
#endif

#endif

#if defined(FORCE_GCC)
CMNT	Force use of gcc
#	undef  USE_GCC
#	undef  USE_CC
#	define USE_GCC
#endif
#if defined(FORCE_CC)
CMNT	Force use of CC
#	undef  USE_GCC
#	undef  USE_CC
#	define USE_CC
#endif

#ifdef USE_CC

CPLUSPLUS = CC CFRONTFLAGS
CPLUSDEBUGSYMBOLS = $(CFRONTDEBUGSYMBOLS)
CPLUSOPTIMIZE = $(CFRONTOPTIMIZE)
CPLUSLIB = 

CCFLAGS =
CC = CC -x c 
CPP = CC -E -P -ansi  -x c-header -U__cplusplus 

LD = CC CFRONTFLAGS $(DEBUGSYMBOLS)

#if defined(PTREP)
PTREPOSITORY = PTREP
#else
PTREPOSITORY = $(TOP)/ptrepository 
#endif
TEMPLATEDEF = -ptr$(PTREPOSITORY) -pta 

#endif /* USE_CC */

#ifdef GCC_PATH
GCC = GCC_PATH
#else
GCC = gcc
#endif

#ifdef USE_GCC
GCCDEBUGSYMBOLS += $(QUANT_COMPILE_OPTS)

CPLUSPLUS = $(GCC) -x c++
CPLUSDEBUGSYMBOLS = $(GCCDEBUGSYMBOLS)
CPLUSLIB =  -liberty -lg++ -lstdc++ 
CPLUSOPTIMIZE = $(GCCOPTIMIZE)

CCFLAGS = GCCFLAGS
CC = $(GCC) -x c 
CMNT	gcc w/o -x option knows that .o is object file
CPP = $(GCC) -E -P -ansi  -x c-header -U__cplusplus

CMNT "-static" MUST APPEAR EARLY on the LD command if it's to work.
CMNT It  cannot go in the LDFLAGS because it is position-dependent.
CMNT
CMNT Static linking can cause problems if libraries are out
CMNT of date, so we no longer use it.
CMNT
LD = $(GCC)

PTREPOSITORY = 
TEMPLATEDEF =

#endif



CMNT global ld flags - NOT to be redefined in local Imakefile
CMNT Use LOCAL_LDFLAGS to change flags for the local Imakefile
#if defined(IS_RS6000_AIX41) && defined(USE_MPI)
GLOBAL_LDFLAGS = -lm $(MPI_LIB_DIRS)
#elif defined(IS_SPARC_SOLARIS2) || defined(IS_I386_SOLARIS2)
CMNT -lsocket is really only needed if you touch the network
GLOBAL_LDFLAGS = -lm -lnsl -lsocket -lposix4
#else
GLOBAL_LDFLAGS = -lm 
#endif

GLOBAL_LDFLAGS += -lstdc++ 

#ifdef IS_I386_LINUX
CMNT On linux, without -lg, the symbol "___uflow" from libg++ is undefined
GLOBAL_LDFLAGS += -lg
#endif

CMNT auxilliary flags- to be redefined in local Imakefile
CMNT Not to be set in Project.tmpl
AUXFLAGS =



/*
 * Tools
 */
CMNT 
CMNT Tools
CMNT 
PROTOIZE = protoize
/*
* NB: it's faster to remove a library and re-make it from
* scratch using "ar qv ..." than to use the $(ARFLAGS) below
* But we're not changing ARFLAGS to be qv because you *must*
* first remove the library to make it work properly with qv. 
* The Imake.rules explicitly use rv or qv depending on the context.
*/

#if defined(IS_SPARC_SOLARIS2) || defined(IS_I386_SOLARIS2)
AR = /usr/ccs/bin/ar
#else
#  ifdef USE_CC
AR = /bin/ar
#  else
#    ifdef IS_I386_LINUX
AR = ar
#    else
AR = /bin/ar
#    endif
#  endif /* USE_CC */
#endif /* SOLARIS2 */

ARFLAGS = rv
MKDEPEND = $(PERL) -s $(TOP)/tools/w4
#ifdef USE_CC
MKDEPFLAGS = 'CC -E'
#endif
#ifdef USE_GCC
MKDEPFLAGS = '$(GCC) -x c++ -E'
#endif
PERL = perl
RANLIB = ranlib
CO = cvs update
ERRORPL =$(TOP)/tools/errors.pl
STATPL = $(TOP)/tools/stats.pl
CTAGS = $(CTAGS_DIR)/ctags -d --typedefs-and-c++  --c++

#if IS_SNAKE_HPUX8 || IS_I860_OSF1AD

    RANLIB_IFNEEDED = echo skipping ranlib 
    /* Posix grep */
    GREP = grep -E
    PROTOIZE_IFNEEDED = echo skipping function prototyping for Platform 

#else
#  if IS_SPARC_SOLARIS2 || IS_I386_SOLARIS2

   RANLIB_IFNEEDED = echo skipping ranlib
   GREP = egrep
   PROTOIZE_IFNEEDED = $(PROTOIZE)

#  else

    RANLIB_IFNEEDED = $(RANLIB)
    /* original grep */
    GREP = egrep
    PROTOIZE_IFNEEDED = $(PROTOIZE)
#  endif /* SOLARIS */
#endif /* SNAKE || 860 */

SYMLINKS =
PROFILE= 
INCLUDE = -I. -I$(TOP)/config

#ifdef _PURIFY_
INCLUDE += -I$(PURIFY_DIR) 
#endif

#ifdef _QUANTIFY_
INCLUDE += -I$(QUANT_DIR) 
#endif

#ifdef _PURECOV_
INCLUDE += -I$(PURECOV_DIR)
#endif

CPPFLAGS=

CFLAGS = $(CCFLAGS) $(INCLUDE) $(AUXINCL) $(DEBUGFLAGS) -D$(ARCH) -D$(OPSYS) $(PROFILE) \
	 $(AUXFLAGS) $(PURIFY_SUPPORTED) $(LOCAL_CFLAGS)
CPLUSFLAGS = $(CFLAGS) $(TEMPLATEDEF) $(CPLUSOPTIMIZE)

COMPILE_NOSYMBOL.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(CCOPTIMIZE) -c
COMPILE.c = $(COMPILE_NOSYMBOL.c) $(CCDEBUGSYMBOLS) 

COMPILE_NOSYMBOL.C = $(CPLUSPLUS) $(CPLUSFLAGS) $(CPPFLAGS) -c
COMPILE.C = $(COMPILE_NOSYMBOL.C) $(CPLUSDEBUGSYMBOLS) 

COMPILE_NOSYMBOL.cc = $(CPLUSPLUS) $(CPLUSFLAGS) $(CPPFLAGS) -c
COMPILE.cc = $(COMPILE_NOSYMBOL.cc) $(CPLUSDEBUGSYMBOLS) 

EXECS =
ALLTARGETS =
SUBDIR=
NEWSUFFIXES =
SUBDIRCOMMANDS = \
	tags clean clean_symlinks symlinks \
	add depend install clean_install all


TAGFILES = $(SRCS) $(HFILES)
