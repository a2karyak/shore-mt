/*<std-header style='imake' orig-src='shore'>

 $Id: Project.tmpl,v 1.272 2003/12/20 01:16:07 bolo Exp $

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

  -- do not edit anything above this line --   </std-header>*/

CMNT Project.tmpl begins here

/*********************************************************************

This file contains build options.  A few of these options commonly
need to be set by installers of the software.

*********************************************************************/
/* empty preprocessor macros */
#ifndef IS_NT
#define NA
#define EMPTY
#define NONE
#else	/* let gnumake make them empty since VC++'s preprocessor is broke */
#define NA $(EMPTY_VAR)
#define EMPTY $(EMPTY_VAR)
#define NONE $(EMPTY_VAR)
#endif

#ifndef USE_DIR_SCHEME_FILE
#if IS_NT
#ifdef UNIX_PATHS
#define USE_DIR_SCHEME_FILE "nt_unixstyle.def"
#else
#define USE_DIR_SCHEME_FILE "nt_standard.def"
#endif
#elif IS_LINUX
#define USE_DIR_SCHEME_FILE "linux_uwcs.def"
#else
#define USE_DIR_SCHEME_FILE "unix_uwcs.def"
#endif /* IS_UNIX */
#endif /* USE_DIR_SCHEME_FILE */

DIR_SCHEME_FILE = USE_DIR_SCHEME_FILE

/* Directory to install bin, lib, include, and documents */
/* Comes from shore.def */
ifndef INSTALL_DIR
#ifdef INSTALL_PATH
INSTALL_DIR = INSTALL_PATH
#else /* !INSTALL_PATH */
INSTALL_DIR = $(BUILD_TOP)/installed
#endif /* !INSTALL_PATH */
endif

BISON = $(BISON_DIR)/bison

FLEX = $(FLEX_DIR)/flex
FLEXLIB = $(FLEX_DIR)/../lib/libfl.LIBEXT

#ifdef GCC_PATH
GCC = GCC_PATH
#else
GCC = gcc
#endif

/*
 * The dir scheme should only contain make macro definitions and may override
 * anything defined above.
 */
#ifdef USE_DIR_SCHEME_FILE
#include USE_DIR_SCHEME_FILE
#endif

#ifdef TCL_DIR_PATH
TCL_DIR = TCL_DIR_PATH
#elif defined(TCLDIR)
TCL_DIR = TCLDIR
#ifndef IS_NT
#define	TCL_DIR_VERSION 8.0
#endif
#endif

#ifdef VCPP_DIR_PATH
VCPP_DIR = VCPP_DIR_PATH
#endif

#if defined(USE_PURIFY) || defined(USE_QUANTIFY) || defined(USE_PURECOV)
#define	USE_PURE
#endif

#ifdef USE_PURE
#if defined(IS_SPARC_SUNOS41) || defined(IS_SPARC_SOLARIS2)
PURE_GOPT = \
	-chain-length=10 \
        -inuse-at-exit -ignore-signals=0x40000000 -first-only -leaks-at-exit \
        -pointer-mask=0xfffffffe -copy-fd-output-to-logfile=1,2
#elif defined(IS_SNAKE_HPUX8)
PURE_GOPT = \
        -inuse-at-exit -ignore-signals=0x00010000 -first-only -leaks-at-exit \
        -pointer-mask=0xfffffffe -copy-fd-output-to-logfile=1,2
#endif /* SNAKE */
/* Options common to all pure software tools 
   Note that thread-stack-change is 12K and stack size is 64K.
   This is necessary since purify will not always notice stack
   changes if the change-size is near the stack size.
*/
PURE_COPT = -threads -thread-stack-change=0x3000 -max_threads=64
#endif /* USE_PURE */

/* An attempt to gracefully take care of pathname changes with
   differing gcc versions and architectures.
   XXX Some attempt could be made to synchronize this with GCC_PATH;
   for now GCC_VER and GCC_TAG need to be changed too 
*/

#ifndef GCC_VER
#define	GCC_VER	2.7.2.3
#endif

#ifndef GCC_TAG
#if defined(IS_SPARC_SUNOS41)
#define	GCC_TAG	sparc-sun-sunos4.1.3
#elif defined(IS_SPARC_SOLARIS2)
#define GCC_TAG sparc-sun-solaris2.5.1
#elif defined(IS_I386_SOLARIS2)
#define	GCC_TAG	i386-sun-solaris2.5
#else
#define	GCC_TAG	unknown-unknown-unknown
#endif
#endif /* GCC_TAG */

#ifdef USE_PURE
#if defined(IS_SOLARIS2)
PURE_COLLECTOR = /usr/ccs/bin/ld 
#elif defined(IS_MIPS_ULTRIX42)
PURE_COLLECTOR = $(PURIFY_DIR)/collect2
PURE_COLLECTOR = $(UTIL_DIR)/gcc-GCC_VER/lib/gcc-lib/GCC_TAG/GCC_VER/ld
#endif /* IS_MIPS_ULTRIX42 */
#endif /*USE_PURE*/

/* Location of Purify  -- NOT REQUIRED */
#ifdef USE_PURIFY
#define _PURIFY_ 1
ifndef PURIFY_DIR
PURIFY_DIR = /s/purify-4.1
endif
PURIFY = $(PURIFY_DIR)/bin/purify
PURIFY_COLLECTOR = $(PURE_COLLECTOR)
PURE_OPT = $(PURE_GOPT) $(PURE_COPT)
#endif /*USE_PURIFY*/

#ifdef USE_QUANTIFY
/* Location of Quantify  -- NOT REQUIRED */
/* To get basic block analysis, -g is required */
/* turning DEBUGGERSYMBOLS ON does a -g... */
#undef DEBUGGERSYMBOLS
#define DEBUGGERSYMBOLS ON

#define _QUANTIFY_ 1
ifndef QUANT_DIR
QUANT_DIR = $(UTIL_DIR)/quantify
endif
QUANTIFY = $(QUANT_DIR)/bin/quantify
QUANTIFY_COLLECTOR = $(PURE_COLLECTOR)
QUANT_OPT = $(PURE_COPT)
#endif /*USE_QUANTIFY*/

#ifdef USE_PURECOV
/* Location of Purecov  -- NOT REQUIRED */
#define _PURECOV_ 1
ifndef PURECOV_DIR
PURECOV_DIR = $(UTIL_DIR)/purecov
endif
PURECOV = $(PURECOV_DIR)/bin/purecov
PURECOV_COLLECTOR = $(PURE_COLLECTOR)
PURECOV_OPT = 
#endif /*USE_PURECOV*/

/* Location of ctags  -- NOT REQUIRED */
CTAGS_DIR = $(UTIL_DIR)/emacs/bin

/**************** End of commonly set options ********************/

ifndef TOP
TOP = Top
endif
ifndef BUILD_TOP
BUILD_TOP = BuildTop
endif
ifndef THIS_PATH
THIS_PATH = ThisPath
endif

#ifdef ExtTop
EXT_TOP = ExtTop
#endif
#ifdef ExtBuildTop
EXT_BUILD_TOP = ExtBuildTop
#endif

ifneq ($(TOP),$(BUILD_TOP))
VPATH = $(TOP)/$(THIS_PATH)
endif

#define ON 1
#define OFF 0

#if defined(RMM)
CMNT RMM
RM = RMM
#else
CMNT NO RMM
CMNT make sure it is not rm -f, since
CMNT RM_F specifies -f and is used by the Makefiles
RM = rm
#endif

#if defined(RMM_F)
RM_F = RMM_F
#else
RM_F = $(RM) -f
#endif

#ifdef RM_F_BROKEN
/* hack for rm where rm -f with no args is an error; supply a bogus file */
RM_F += _BaD_Rm_F_
#endif

MKDIR = mkdir
MKDIR_P = $(MKDIR) -p

MV = mv
CP = cp
#ifndef IS_NT
CP_P = $(CP) -p
#else
/* don't add -p on NT, it is really slow if you have a slow domain controller */
CP_P = $(CP)
#endif

LN = ln
LN_S = $(LN) -s

TOUCH = touch

#if defined(BUILD_PARALLELISM)
ifndef MAKE_PARALLELISM
MAKE_PARALLELISM = BUILD_PARALLELISM
endif
MAKE_PARALLEL_OPT = -j $(MAKE_PARALLELISM)
#else
MAKE_PARALLELISM = 1
MAKE_PARALLEL_OPT =
#endif

MAKE_NO_PARALLEL_W_OPT = $(MAKE) $(MAKE_OPT)
MAKE_W_OPT = $(MAKE) $(MAKE_PARALLEL_OPT) $(MAKE_OPT)

MAKEMAKE = $(PERL) $(TOOLS_DIR)/makemake.pl

IMAKEFILE = $(TOP)/$(THIS_PATH)/Imakefile
GEN_SRCDIRINFO = $(PERL) $(TOOLS_DIR)/GenSrcDirInfo.pl
SRCDIRINFO_DAT = $(CONFIG_DIR)/SrcDirInfo.dat
SRCDIRINFO_TMPL = $(CONFIG_BUILD_DIR)/SrcDirInfo.tmpl
SHORE_DEF = $(CONFIG_BUILD_DIR)/shore.def

ECHO_NO_AT = echo
ECHO = @$(ECHO_NO_AT)
ECHO_NO_NL = $(ECHO) -n
ECHO_NO_AT_NO_NL = $(ECHO_NO_AT) -n

DIVIDER1 = '************************************************************'
DIVIDER2 = '    ********************************************************'

CAT = cat

SORT = sort
SORT_U = $(SORT) -u

LEX = flex
LEX_OPT = -L
LEX_W_OPT = $(LEX) $(LEX_OPT)

YACC = yacc
YACC_OPT = -d
YACC_W_OPT = $(YACC) $(YACC_OPT)

FLEX_OPT = -L -d -S$(TOP)/$(THIS_PATH)/flex.skl
FLEX_W_OPT = $(FLEX) $(FLEX_OPT)

BISON_OPT = -l -n -d -t
BISON_W_OPT = $(BISON) $(BISON_OPT)

TAR = tar

ifeq ($(TOP),$(BUILD_TOP))
CVS = cvs -q
else
CVS = cd $(TOP)/$(THIS_PATH) && cvs -q
endif
CVS_N = $(CVS) -n
CVS_UPDATE = $(CVS) update
CVS_UPDATE_A = $(CVS) update -A
CVS_N_UPDATE = $(CVS_N) update
CVS_N_UPDATE_A = $(CVS_N) update -A
CVS_COMMIT = $(CVS) commit
CVS_STATUS = $(CVS) status
CVS_STATUS_V = $(CVS) status -v
CVS_DIFF = -$(CVS) diff
CVS_DIFF_C = $(CVS_DIFF) -c

PWD = $(shell pwd)

PLATFORM = Platform
ARCH = Arch
OPSYS = OpSys
ARCHMODE = ArchMode

/*
 * Common libraries and their include locations
 */

#ifdef TCL_DIR_VERSION
TCL_VER=TCL_DIR_VERSION
#elif defined(IS_NT) && defined(_MSC_VER) && _MSC_VER < 1200
TCL_VER=80vc
#elif defined(IS_NT)
TCL_VER=80
#else
TCL_VER=
#endif

#ifdef TCL_LIB_EXTENSION
TCL_LIBEXT=TCL_LIB_EXTENSION
#elif defined(IS_DOSDEV)
TCL_LIBEXT=.lib
#else
TCL_LIBEXT=.a
#endif


#if IS_NT
TCL_INCL = -I$(TCL_DIR)/include
#ifdef UNIX_PATHS
/* provide DOS style filename to linker :-( */
TCL_LIB = $(UNIX_DSK):$(TCL_DIR)/lib/tcl$(TCL_VER)$(TCL_LIBEXT) 
#else
TCL_LIB = $(TCL_DIR)/lib/tcl$(TCL_VER)$(TCL_LIBEXT)
#endif
#define	TCL_DEF
#endif

#ifndef TCL_DEF
/* TCL_DIR = $(TCL_DIR)  this is defined at the top now */
TCL_INCL = -I$(TCL_DIR)/include
TCL_LIB = $(TCL_DIR)/lib/libtcl$(TCL_VER)$(TCL_LIBEXT)
#else
#undef TCL_DEF
#endif

TRANSPORT_LIB =
TRANSPORT_INCL =

#ifdef USE_PVM3
#if defined(IS_MIPS_ULTRIX42) || defined(IS_SPARC_SUNOS41) || defined(IS_SNAKE_HPUX8) || defined(IS_SPARC_SOLARIS2)
PVM3 = /p/shore/pvm3.2
PVM3INC = $(PVM3)/include
PVM3_INCL = -I$(PVM3INC)

#ifdef IS_MIPS_ULTRIX42
PVM3LIB = $(PVM3)/lib/PMAX
#endif

#ifdef IS_SPARC_SUNOS41
PVM3LIB = $(PVM3)/lib/SUN4
#endif

#if defined(IS_SPARC_SOLARIS2)
PVM3LIB = $(PVM3)/lib/SUN4SOL2
#endif

#ifdef IS_SNAKE_HPUX8
PVM3LIB = $(PVM3)/lib/HPPA
#endif

PVM3_LIB = $(PVM3LIB)/libgpvm3.LIBEXT $(PVM3LIB)/libpvm3.LIBEXT
#endif
#endif /* USE_PVM3 */

/*
 * XXX TRANSPORT_LIB is for the comm system; casual pvm users
 * should use PVM3_LIB and PVM3_INCL
 *
 * This remains defined on USE_PVM3 for temporary backward compatibility
 */
#if defined(USE_PVM3) || defined(OCOMM_USE_PVM)
TRANSPORT_LIB += $(PVM3_LIB)
TRANSPORT_INCL += $(PVM3_INCL)
#endif /* OCOMM_USE_PVM */

/* XXX needs to be integrated into new configuration */
#if defined(IS_I860_OSF1AD)
#define	USE_INTELNX
TRANSPORT_LIB += -lnx -lmach
TRANSPORT_INCL +=
#endif

#if defined(USE_MYRINET)
MYRINET = /s/myrinet
MYRINET_INCL = -I$(MYRINET)/include
MYRINET_LIB = $(MYRINET)/lib/libMyriApi.LIBEXT $(MYRINET)/lib/libLanaiDevice.LIBEXT
#ifdef IS_SPARC_SOLARIS2
MYRINET_LIB += $(MYRINET)/lib/libMyriCompat.LIBEXT
#endif /* IS_SPARC_SOLARIS2 */
#endif /* USE_MYRINET */

#ifdef OCOMM_USE_MYRINET
TRANSPORT_INCL += $(MYRINET_INCL)
TRANSPORT_LIB += $(MYRINET_LIB)
#endif /* OCOMM_USE_MYRINET */

#ifdef USE_MPI
#ifdef MPI_FLAVOR_MPICH
MPI = /p/shore/mpi
MPI_INCL = -I$(MPI)/include
#ifdef IS_SPARC_SUNOS41
MPI_LIB = $(MPI)/lib/sun4/ch_p4/libmpi.LIBEXT
#endif
#ifdef IS_SPARC_SOLARIS2
MPI_LIB = $(MIP)/lib/sun4/ch_p4/libmpi.LIBEXT
#endif
#endif /* MPI_FLAVOR_MPICH */

#ifdef MPI_FLAVOR_SP2
MPI =	/usr/lpp/ppe.poe
MPI_INCL = -I$(MPI)/include
MPI_LIB_DIRS = -L$(MPI)/lib -L$(MPI)/lib/ip
MPI_LIB_LIBS = -lmpi -lvtd
MPI_LIB = $(MPI)/lib/libmpi.LIBEXT $(MPI)/lib/libvtd.LIBEXT $(MPI)/lib/libppe.LIBEXT
#endif /* MPI_FLAVOR_SP2 */

#endif /* USE_MPI */


#ifdef OCOMM_USE_MPI
TRANSPORT_INCL += $(MPI_INCL)
TRANSPORT_LIB += $(MPI_LIB)
#endif /* OCOMM_USE_MYRINET */



/*
 * Compilation Options
 */
CMNT 
CMNT Compilers
CMNT
/* 
 * FORCE_GCC and FORCE_CC are taken from the environment variables.
 * NB: ALL .tmpl files must respect these FORCE variables!
 *
 *
 *
 * DEBUGFLAGS: used for source debugging levels  -DDEBUG or -NDEBUG
 * 		use -DDEBUG by #define-ing DEBUGCODE ON
 * 		use -NDEBUG by #undef-ing DEBUGCODE OFF (below)
 * DEBUGSYMBOLS: controls generation of symbol table info, i.e., 
 * 		whether the compiler generates a symbol table
 *		generate symbols by #define-ing DEBUGGERSYMBOLS ON
 *		don't generate symbols by #undef-ing DEBUGGERSYMBOLS OFF (below)
 * OPTFLAGS:	optimization level -- necessarily tied to debugging level
 *				for some compilers
 *      optimize by #define-ing OPTIMIZE ON
 *      don't optimize by #undef-ing OPTIMIZE OFF (below)
 *
 * NATIVECCFLAGS: flags for native cc always
 * GCCFLAGS: flags for gcc always
 * CCFLAGS is derived from {NATIVECCFLAGS,GCCFLAGS} after choice
 *           of compiler is made
 *
 * CFRONTFLAGS: flags for ATT or native CC always
 *
 * CCDEBUGSYMBOLS: debugflags for cc, determined by DEBUGSYMBOLS
 * CFRONTDEBUGSYMBOLS: debugflags for CC, determined by DEBUGSYMBOLS
 * GCCDEBUGSYMBOLS: debugflags for gcc, determined by DEBUGSYMBOLS
 * CPLUSDEBUGSYMBOLS is derived from {CFRONTDEBUGSYMBOLS,GCCDEBUGSYMBOLS}
 *          after it's determined which C++ compiler is in use
 *
 * CCOPTIMIZE: debugflags for cc, determined by OPTIMIZE
 * CFRONTOPTIMIZE: debugflags for CC, determined by OPTIMIZE
 * GCCOPTIMIZE: debugflags for gcc, determined by OPTIMIZE
 * CPLUSOPTIMIZE is derived from {CFRONTOPTIMIZE,GCCOPTIMIZE}
 *          after it's determined which C++ compiler is in use
 *
 */

/*
 * DEBUGCODE, DEBUGGERSYMBOLS, OPTIMIZE  are set at the top of this file
 */

/*  GCC flags are the same for each architecture */
/*  NB: if you want to make with -fexternal-templates, you MUST
 *  do this:
 *  #define GCCFLAGS -fexternal-templates -DEXTERNAL_TEMPLATES
 *  in order to avoid duplicate definitions (link errors).
 *
 * NB: re: -pedantic: every once-in-a-while add -pedantic to GCCFLAGS,
 * and try to re-build. sthread/stcore.cpp won't build, but everything
 * else should.  (The problem with stcore.cpp has to do with newlines inside
 * the asm strings.)
 */
#define USE_GCC
#ifdef GCC_IMPLICIT_TEMPLATE
#define GCCFLAGS
#else
#define GCCFLAGS  -fno-implicit-templates  -DEXPLICIT_TEMPLATE
#endif

#ifndef TRACECODE
#define	TRACECODE DEBUGCODE
#endif

#if DEBUGCODE == ON  ||  TRACECODE == ON
DEBUGFLAGS = -DDEBUG -DW_DEBUG
#else
DEBUGFLAGS = -DNDEBUG
#endif

#if TRACECODE == ON
DEBUGFLAGS += -DW_TRACE
#endif

#if DEBUGGERSYMBOLS == OFF
/* the ON cases are handled differently for each architeture, below */
#  if IS_DOSDEV
   /* needs to seperate cl support from dos support */
    CMNT Options for DEBUGGERSYMBOLS == OFF
    CMNT Must specify the library on the COMPILATION to get the
    CMNT correct library reference in the object file !!! grot
    CMNT -MD : for msvcrt.lib  (multi-threaded dll)
    CMNT -ML : for libc.lib  (single-threaded lib)
    CMNT -MT : for libcmt.lib (multi-threaded lib)
    CMNT

#ifdef USE_CL_RUNTIME_SLIB
    CCDEBUGSYMBOLS = -ML
#elif defined(USE_CL_RUNTIME_LIB)
    CCDEBUGSYMBOLS =  -MT
#else
    CCDEBUGSYMBOLS =  -MD
#endif
    CFRONTDEBUGSYMBOLS =  $(CCDEBUGSYMBOLS)
    GCCDEBUGSYMBOLS = $(CCDEBUGSYMBOLS)
#  else /* IS_UNIX */
    CCDEBUGSYMBOLS = 
    CFRONTDEBUGSYMBOLS = 
    GCCDEBUGSYMBOLS = 
#  endif/* IS_UNIX */
#endif /* DEBUGGERSYMBOLS == OFF */

#if OPTIMIZE == OFF
#  if IS_DOSDEV
    /* needs to seperate cl support from dos support */
    CMNT Options for OPTIMIZE == OFF
    CMNT -Od : disable optimizations
    CMNT -Ob0 : disable inline expansion (used with -DDEBUG)
    CMNT -WX : treat warnings as errors
    CMNT
    CCOPTIMIZE = -Od -Ob0
    CFRONTOPTIMIZE =  $(CCOPTIMIZE)
    GCCOPTIMIZE =  $(CCOPTIMIZE)
#  else /* IS_UNIX */
    CCOPTIMIZE = 
    CFRONTOPTIMIZE = 
    /*
     * The default optimization level for gcc is -O as recommended
     * by Gnu folks.  Plus, this allows things to actually link on the
     * HPs, otherwise some .o's can lead to errors like:
     *    Target of unconditional branch is out of range
     * Of course, this can following the code in the debugger a little
     * tricky
     */
    GCCOPTIMIZE = -fno-inline
#  endif /* IS_UNIX */
#else
#  if IS_DOSDEV
    /* needs to seperate cl support from dos support */
    CMNT Options for OPTIMIZE == ON
    CMNT -Og : enable global optimization
    CMNT -Oi : enable intrinsic functions
    CMNT -Ot : favor code speed
    CMNT -Oy : enable frame pointer omission
    CMNT -Ob1 : expand only those marked as inline
    CMNT -Ob2 : auto-inline at compiler discretion
    CMNT -Ox : enable max optimizations: synonymous with -Ogityb1
    CMNT
#ifdef BUILD_SMLAYER_ONLY
    CMNT Shore compiles and tests with optimization on visual c++
    CCOPTIMIZE =  -Ox
#else
    CMNT Paradise fails with full-blown optimization enabled.
    CMNT A middle ground of inlining is known to work.
    CCOPTIMIZE =  -Ob1 -Ot
#endif
    CFRONTOPTIMIZE =  $(CCOPTIMIZE)
    GCCOPTIMIZE =  $(CCOPTIMIZE)
#  else	/* IS_UNIX */
    CCOPTIMIZE =  -O
    CFRONTOPTIMIZE =  -O 
#ifdef FORCE_EGCS
    CMNT Egcs croaks with O2 but not with O1/O
    GCCOPTIMIZE =  -O1 -finline-functions -fexpensive-optimizations
#elif defined(BUILD_SMLAYER_ONLY)
    CMNT Shore compiles and tests with optimization on g++
    GCCOPTIMIZE =  -O2 -finline-functions -fexpensive-optimizations
#else
    CMNT Paradise fails with full-blown optimization enabled.
    CMNT A middle ground of inlining is known to work.
    GCCOPTIMIZE =  -O2 -finline-functions -fno-strength-reduce
#endif
#  endif /* IS_UNIX */
#endif /* OPTIMIZE */


/*
 * BEGIN per-platform stuff, including setting compiler 
 * options for DEBUGGERSYMBOLS == ON
 */
#if IS_IX86_NT && IS_DOSDEV

#   undef USE_GCC
#   undef USE_CC
#   define USE_CL

#   define NATIVECCFLAGS
#   define CFRONTFLAGS  

CMNT is ix86 nt
#if DEBUGGERSYMBOLS == ON
    CMNT Options for DEBUGGERSYMBOLS == ON
    CMNT Must specify the library on the COMPILATION to get the
    CMNT correct library reference in the object file !!! grot
    CMNT -MD	: msvcrt.lib (multi-threaded DLL)
    CMNT -ML    : libc.lib (single-threaded LIB)
    CMNT -MT	: libcmt.lib (multi-threaded LIB)
    CMNT 
    CMNT -MDd   : msvcrtd.lib  (debug multi-threaded dll)
    CMNT -MLd   : libcd.lib  (debug single-threaded lib)
    CMNT -MTd   : libcmtd.lib (debug multi-threaded lib)
    CMNT
    CMNT -Zi -Fd$* : generate debugging info, and put in a file-per-
    CMNT  		compilation-unit, to enable make -j2 w/o clashing
    CMNT		on vc50.pdb
    CMNT -Ge : enable stack checking calls
    CMNT -FR : generate browser info (.sbr files)

    CCDEBUGSYMBOLS =  -Zi -Fd$*
#ifdef GENERATE_SBR_FILES
    CCDEBUGSYMBOLS += -FR
#endif
#ifdef USE_CL_STACK_CHECK
    CMNT extreme cost increase to any function invocation
    CCDEBUGSYMBOLS += -Ge
#endif

#ifdef USE_CL_RUNTIME_DEBUG
    CL_LINK_LIB_DEBUG=d
#else
    CL_LINK_LIB_DEBUG=
#endif
#if defined(USE_CL_RUNTIME_SLIB)
    CL_LINK_LIB = -ML$(CL_LINK_LIB_DEBUG)
#elif defined(USE_CL_RUNTIME_LIB)
    CL_LINK_LIB = -MT$(CL_LINK_LIB_DEBUG)
#else
    CL_LINK_LIB = -MD$(CL_LINK_LIB_DEBUG)
#endif
    CCDEBUGSYMBOLS += $(CL_LINK_LIB)
    CFRONTDEBUGSYMBOLS = $(CCDEBUGSYMBOLS)
    GCCDEBUGSYMBOLS = $(CCDEBUGSYMBOLS)
#endif

    /* define things for using the resource compiler on nt */
    RC = rc
    RC_FLAGS = -D NDEBUG -l 0x409 -Fo "$@"
    COMMON_NCR_RC_FILE = $(UTILS_DIR)/torver.rc
    compile.RC = $(RC) $(RC_FLAGS)

#endif /* IS_IX86_NT */ 


#if IS_SNAKE_HPUX8
    /* Use GCC on HPUX */
#   undef USE_CC
#   define USE_GCC

    /*  HP cc does not know about "//"  */
    /*  HP cc defines __STDC__ if -Aa is set. */
#   define NATIVECCFLAGS -Aa 

    /* If we're using HP's unbundled CC */
    /*  HP CC knows about "//" */
    /*  HP CC's cpp seems to be ansi compatible wrt # and ##, 
     *  (as long as -Aa is on) even though 	it does 
     *  not define __STDC__, so we have to define it. gak
     */
#   define CFRONTFLAGS -Aa -D__ANSI_CPP__ -z

#if DEBUGGERSYMBOLS == ON
CCDEBUGSYMBOLS =  -g
CFRONTDEBUGSYMBOLS =  -g1
GCCDEBUGSYMBOLS = -g3
#endif /* DEBUGGERSYMBOLS == ON */

#endif /* HPUX */

#if IS_I860_OSF1AD
    /* no CC on paragon */
#   undef USE_CC
#   define USE_GCC

#	undef GCCFLAGS
#	define GCCFLAGS -fno-builtin
#   define NATIVECCFLAGS 
#   define CFRONTFLAGS 

/*
 * The compiler's symbols when using c++ templates screw up the 
 * assembler.  The short term fix for this is not to compile
 * with -g.
 */
CMNT CCDEBUGSYMBOLS = -g
CMNT CFRONTDEBUGSYMBOLS = none
CMNT GCCDEBUGSYMBOLS = -g3 
CCDEBUGSYMBOLS =
CFRONTDEBUGSYMBOLS =
GCCDEBUGSYMBOLS =

#endif

#if IS_MIPS_ULTRIX42
    /* CC on ultrix is ATT (cfront) */
    /* default is to use GCC */
#   define USE_GCC
#   undef USE_CC

#   define NATIVECCFLAGS  -std1
#   define CFRONTFLAGS +a1 -D__ANSI_CPP__

#if DEBUGGERSYMBOLS == ON
CCDEBUGSYMBOLS =  -g
CFRONTDEBUGSYMBOLS = -g
GCCDEBUGSYMBOLS = -g3
#endif

#endif

/* XXXX this should probably be the fallback if nothing else is defined */
#if IS_SPARC_SUNOS41 || IS_SPARC_SOLARIS2 || IS_LINUX || IS_R6000_AIX32 || IS_RS6000_AIX41 || IS_NETBSD || IS_OSF1 || IS_CYGWIN || IS_MACOSX
    /*  SUN ATT CC does not seem to know about //, ansi cpp #, ## 
     *  so we use gcc.  SUN cc also doesn't seem to handle any of 
     *  the above, so we use gcc for everything
     */
#   define USE_GCC
#   undef USE_CC

#   define NATIVECCFLAGS
#   define CFRONTFLAGS  +a1 -D__ANSI_CPP__

#if DEBUGGERSYMBOLS == ON
CCDEBUGSYMBOLS =  -g
CFRONTDEBUGSYMBOLS = -g 
GCCDEBUGSYMBOLS = -g3
#endif


#endif

#if IS_I386_SOLARIS2
    /*  SUN ATT CC does not seem to know about //, ansi cpp #, ##
     *  so we use gcc.  SUN cc also doesn't seem to handle any of
     *  the above, so we use gcc for everything
     */
#   define USE_GCC
#   undef USE_CC

#   define NATIVECCFLAGS
#   define CFRONTFLAGS  +a1 -D__ANSI_CPP__

#if DEBUGGERSYMBOLS == ON
CCDEBUGSYMBOLS =  -g
CFRONTDEBUGSYMBOLS = -g
/* -gstabs because some gcc versions need it */
GCCDEBUGSYMBOLS = -gstabs
#endif

#endif

#if defined(FORCE_GCC)
CMNT	Force use of gcc
#	undef  USE_GCC
#	undef  USE_CC
#	define USE_GCC
#endif
#if defined(FORCE_CC)
CMNT	Force use of CC
#	undef  USE_GCC
#	undef  USE_CC
#	define USE_CC
#endif

#ifdef USE_CL
#ifdef VCPP_DIR_PATH
    CPLUSPLUS = '$(VCPP_DIR)/bin/cl' CFRONTFLAGS
#else
    CPLUSPLUS = cl CFRONTFLAGS
#endif
    CPLUSDEBUGSYMBOLS = $(CFRONTDEBUGSYMBOLS)
    CPLUSOPTIMIZE = $(CFRONTOPTIMIZE)
    CPLUSLIB = 

    CMNT VC++ compiler options:
    CMNT -D_WINDOWS : bogus SHORE flag for win32 code stuff in shore
    CMNT -D_AFXDLL : Needed if MSVCRT DLL run-time is to be used
    CMNT -D_MBCS : Add support for Multi Byte Character Strings
    CMNT
    CMNT
    CMNT -nologo : turn off ms logo
    CMNT -Zm200 : so cl doesn't croak compiling some files.
    CMNT -GX : enable C++ exception handling - NEEDED if you use
    CMNT       the standard template library (e.g., for new iostreams)
    CMNT       Must always be enabled; compiler broken w/out it!
    CMNT -W3 : warning level
    CMNT -GF : enable read-only string pooling
    CMNT	Can't use this ... M$ iostream can't handle it!
    CMNT -Zl : omit default library name in .OBJ

    CCFLAGS = -D_WINDOWS -nologo -Zm200
#if defined(USE_CL_MFC) && !defined(USE_CL_RUNTIME_LIB)
    CCFLAGS += -D_AFXDLL
#endif
#if defined(USE_CL_MBCS)
    CCFLAGS += -D_MBCS
#endif
#if 1 || defined(USE_CL_EXCEPTIONS)
    CCFLAGS += -GX
#endif
#if defined(USE_CL_STRING_POOL)
    CCFLAGS += -GF
#endif
    WARN_FLAGS = -W3
#ifdef VCPP_DIR_PATH
    CC = '$(VCPP_DIR)/bin/cl
    LD = '$(VCPP_DIR)/bin/link
#else
    CC = cl
    LD = link
#endif
#endif /* USE_CL */

#ifdef USE_CC

CPLUSPLUS = CC CFRONTFLAGS
CPLUSDEBUGSYMBOLS = $(CFRONTDEBUGSYMBOLS)
CPLUSOPTIMIZE = $(CFRONTOPTIMIZE)
CPLUSLIB = 

CCFLAGS =
CC = CC -x c 

LD = CC CFRONTFLAGS $(DEBUGSYMBOLS)

#endif /* USE_CC */

#ifdef USE_GCC
CPLUSPLUS = $(GCC) -x c++
CPLUSDEBUGSYMBOLS = $(GCCDEBUGSYMBOLS)
CPLUSLIB=
#ifdef LINK_LIBERTY
CPLUSLIB +=  -liberty
#endif
#ifdef LINK_LGXX
CPLUSLIB +=  -lg++
#endif
CPLUSOPTIMIZE = $(GCCOPTIMIZE)

CCFLAGS = GCCFLAGS
CC = $(GCC) -x c 
GCC_ERROR_FLAG=
#ifdef GCC_BROKEN_WARNINGS
WARN_FLAGS += -Wall -W -Wpointer-arith -Wwrite-strings -Wmissing-prototypes 
#elif defined(GCC_VER_3_WARNINGS)
/* GCC 3.2 doesn't like -Wmissing-declarations and -Wnested-externs */
WARN_FLAGS += -Wall -W -Wpointer-arith -Wwrite-strings -Wstrict-prototypes 
WARN_FLAGS += -Wmissing-prototypes
/* Need this to stop warnings of normal (old) standard c++ facilities use. */
WARN_FLAGS += -Wno-deprecated
#else
WARN_FLAGS += -Wall -W -Wpointer-arith -Wwrite-strings -Wstrict-prototypes 
WARN_FLAGS += -Wmissing-prototypes -Wmissing-declarations -Wnested-externs
#endif
#ifndef GCC_NO_WARN_VIRTUAL
WARN_FLAGS += -Woverloaded-virtual 
#endif
#ifdef GCC_WARN_OBJECTS_LARGER_THAN
WARN_FLAGS += -Wlarger-than-GCC_WARN_OBJECTS_LARGER_THAN
#elif !defined(GCC_NO_ERROR)
GCC_ERROR_FLAG = -Werror
#endif
WARN_FLAGS += $(GCC_ERROR_FLAG)

CMNT	gcc w/o -x option knows that .o is object file

CMNT "-static" MUST APPEAR EARLY on the LD command if it is to work.
CMNT It  cannot go in the LDFLAGS because it is position-dependent.
CMNT
CMNT Static linking can cause problems if libraries are out
CMNT of date, so we no longer use it.
CMNT
LD = $(GCC)

#endif

LDFLAGS =
LOCAL_LDFLAGS =


CMNT global ld flags - NOT to be redefined in local Imakefile
CMNT Use LOCAL_LDFLAGS to change flags for the local Imakefile
#if defined(IS_RS6000_AIX41) && defined(USE_MPI)
GLOBAL_LDFLAGS = -lm $(MPI_LIB_DIRS)
#elif defined(IS_SOLARIS2)
CMNT -lsocket is really only needed if you touch the network
GLOBAL_LDFLAGS = -lm -lnsl -lsocket 
CMNT -lposix4 is only needed for posix real-time stuff
#if defined(LINK_POSIX4) || defined(USE_POSIX_TIME)
GLOBAL_LDFLAGS += -lposix4
#endif
CMNT -ldl is really only needed if you use tcl, need dependencies
GLOBAL_LDFLAGS += -ldl
#if defined(LINK_PTHREAD)
GLOBAL_LDFLAGS += -lpthread
#endif
#elif IS_LINUX
CMNT -ldl is really only needed if you use tcl, need dependencies
GLOBAL_LDFLAGS += -lm -ldl
#if defined(LINK_PTHREAD)
GLOBAL_LDFLAGS += -lpthread
#endif
#elif IS_NT && IS_DOSDEV
#ifdef OLD_WINSOCK
WINSOCK = wsock32.LIBEXT
#else
WINSOCK = ws2_32.LIBEXT
#endif
GLOBAL_LDFLAGS = $(WINSOCK) -nologo -subsystem:console -incremental:no -debug -machine:I386
#if 1 || defined(USE_QUANTIFY)
GLOBAL_LDFLAGS += -fixed:no
#endif
#else
GLOBAL_LDFLAGS = -lm 
#endif

#ifndef IS_DOSDEV
GLOBAL_LDFLAGS += -lstdc++ 
#endif

/* Programs using Pure products need some include files and stub libraries */
#if defined(USE_PURE)
PURE_INCLS =
PURE_STUBS =
#ifdef USE_PURIFY
PURE_INCLS += -I$(PURIFY_DIR)/include
#ifdef PURE_STUBS_NEW
PURE_STUBS += $(PURIFY_DIR)/lib/libpurify_stubs.LIBEXT
#else
PURE_STUBS += $(PURIFY_DIR)/lib/pure_stubs.LIBEXT
#endif
#endif /* PURIFY */
#ifdef USE_QUANTIFY
PURE_INCLS += -I$(QUANT_DIR)/include
#ifdef PURE_STUBS_NEW
PURE_STUBS += $(QUANT_DIR)/lib/libquantify_stubs.LIBEXT
#else
PURE_STUBS += $(QUANT_DIR)/lib/pure_stubs.LIBEXT
#endif
#endif /* QUANTIFY */
#ifdef USE_PURECOV
PURE_INCLS += -I$(PURECOV_DIR)/include
#ifdef PURE_STUBS_NEW
PURE_STUBS += $(PURECOV_DIR)/lib/libpurecov_stubs.LIBEXT
#else
PURE_STUBS += $(PURECOV_DIR)/lib/pure_stubs.LIBEXT
#endif
#endif /* PURE COVERAGE */
#endif /* USE_PURE */

#ifdef USE_PURE
/* Programs using Purify products need a set of function stubs
   to use when they aren't running under the pure product. */
GLOBAL_LDFLAGS += $(PURE_STUBS)
#endif

#if defined(IS_HPUX8) && DEBUGGERSYMBOLS == ON
/* This must be the last object linked */
GLOBAL_LDFLAGS += /opt/langtools/lib/end.o
#endif

GLOBAL_WINDOWS_LDFLAGS = $(subst -subsystem:console, -subsystem:windows, $(GLOBAL_LDFLAGS))

/* Flags for creating shared/dll libraries */
#if IS_NT 
DLL_FLAGS = -DLL 
#elif defined(IS_SOLARIS2)
DLL_FLAGS = -G
#endif

#if PARA_DEBUGCODE == ON
DEBUGFLAGS	+= -DPARA_DEBUG
#endif

#ifdef PARA_COMPRESS
CCFLAGS		+= -DCOMPRESS
#else
CCFLAGS		+= -UCOMPRESS
#endif


#if defined(LARGEFILE_AWARE)
#if defined(IS_SOLARIS2)
/* Allow access to both normal file words and 64-bit aware variants */
CCFLAGS += -D_LARGEFILE64_SOURCE=1
#endif
#if defined(IS_LINUX)
/* Just use the native 64bit interface, don't mix-n-match */
CCFLAGS += -D_FILE_OFFSET_BITS=64
#endif
#endif	/* LARGEFILE_AWARE */

#if defined(STHREAD_TSL_PTHREAD) &&  defined(IS_LINUX)
/* XXX need to configure include files when using posix spinlocks on
   Linux; need to have the posix 2K variant, plus normal BSD includes. */
CCFLAGS += -D_XOPEN_SOURCE=600 -D_BSD_SOURCE
#endif

/*
 * Tools
 */
CMNT 
CMNT Tools
CMNT 
/*
* NB: it's faster to remove a library and re-make it from
* scratch using "ar qv ..." than to use the $(ARFLAGS) below
* But we're not changing ARFLAGS to be qv because you *must*
* first remove the library to make it work properly with qv. 
* The Imake.rules explicitly use rv or qv depending on the context.
*/

#if IS_DOSDEV
AR = lib
#elif defined(IS_SOLARIS2)
AR = /usr/ccs/bin/ar
#elif defined(USE_CC)
AR = /bin/ar
#else
AR = ar
#endif

ARFLAGS = rv

#ifdef PERL_DIR_PATH
PERL_DIR = PERL_DIR_PATH
#endif

PERL = $(PERL_DIR)/bin/perl -w
PERL_XS_DIR  = $(PERL_DIR)/lib/CORE
PERL_XS_INCL = -I$(PERL_XS_DIR)

COMBINELIBS = $(PERL) $(TOOLS_DIR)/combinelibs.pl
SHARELIB = $(PERL) $(TOOLS_DIR)/sharelib.pl

RANLIB = ranlib
ERRORPL = $(TOOLS_DIR)/errors.pl
STATPL = $(TOOLS_DIR)/stats.pl
MKERRORPL = $(TOOLS_DIR)/Error.pl
GENADTFUNCREGPL = $(TOOLS_DIR)/GenAdtFuncReg.pl
GENGROUPFILEPL = $(TOOLS_DIR)/GenGroupFile.pl
GENTIMESTAMPPL = $(TOOLS_DIR)/GenTimeStamp.pl
GENDEFINESPL = $(TOOLS_DIR)/GenDefines.pl
GENVERSIONPL = $(TOOLS_DIR)/GenVersion.pl
GENVSTUDIO = $(TOOLS_DIR)/GenVStudio.pl
TIMESTAMP.cpp = TimeStamp_gen.cpp
TIMESTAMP.o   = TimeStamp_gen.OBJEXT

EVENTFMTPL = $(TRACE_EVENTS_TOOLS_DIR)/eventfmt.pl
MAKEFILEFUNCPL = $(TRACE_EVENTS_TOOLS_DIR)/makefilefunc.pl
MAKETRACEFMTPL = $(TRACE_EVENTS_TOOLS_DIR)/maketracefmt.pl
MERGEEEDAPL = $(TRACE_EVENTS_TOOLS_DIR)/mergeeda.pl

CTAG_FLAGS = -d --typedefs-and-c++ --c++ --no-warn
ETAG_FLAGS =
CTAGS = $(CTAGS_DIR)/ctags $(CTAG_FLAGS)
ETAGS = $(CTAGS_DIR)/etags $(ETAG_FLAGS)

#if IS_I860_OSF1AD || IS_DOSDEV
RANLIB_IFNEEDED = $(ECHO) skipping ranlib 
/* Posix grep */
GREP = grep -E
#elif defined(IS_SOLARIS2)
RANLIB_IFNEEDED = $(ECHO) skipping ranlib
GREP = egrep
#else
RANLIB_IFNEEDED = $(RANLIB)
GREP = egrep
#endif

PROFILE = 

ifneq ($(TOP),$(BUILD_TOP))
INCLUDE_DIRS += -I$(TOP)/$(THIS_PATH)
endif
INCLUDE_DIRS += -I. $(CONFIG_INCL)

#ifdef USE_EXTERNAL_TRACE_EVENTS
INCLUDE_DIRS += $(TRACE_EVENTS_INCL) $(UTILS_INCL)
#endif

#if IS_NT && IS_DOSDEV
CMNT  If you have spaces in your path names, do this:
CMNT  Be sure to use single quotes, e.g.,
CMNT  INCLUDE_DIRS += -I$(VCPP_DIR)/include -I$(VCPP_DIR)/mfc/include

#ifdef VCPP_DIR_PATH
#ifdef UNIX_PATHS
INCLUDE_DIRS += -I'/apps/DevStudio/VC/include'
#ifdef USE_CL_MFC
INCLUDE_DIRS += -I'/apps/DevStudio/VC/mfc/include'
#endif
#else
INCLUDE_DIRS += -I'$(VCPP_DIR)/include'
#ifdef USE_CL_MFC
INCLUDE_DIRS += -I'$(VCPP_DIR)/mfc/include'
#endif
#endif
#endif
#endif

#ifdef USE_PURE
INCLUDE_DIRS += $(PURE_INCLS)
#endif

#ifdef TIME_COMPILES
TIME = time
#else
TIME =
#endif

CPPFLAGS =

PLATFORM_FLAGS = -D$(ARCH) -D$(OPSYS)
#ifdef ArchMode
PLATFORM_FLAGS += -D$(ARCHMODE)
#endif

LOCAL_CFLAGS =
PURIFY_FLAGS =

CFLAGS = $(CCFLAGS) $(INCLUDE_DIRS) $(DEBUGFLAGS) $(PLATFORM_FLAGS) \
	$(PURIFY_FLAGS) $(WARN_FLAGS)
/* XXX coupling of solaris and pthreads versus pthreads */
#if defined(LINK_PTHREAD) || defined(SOLARIS_REENTRANT)
CFLAGS += -D_REENTRANT
#endif
CFLAGS_NODEFINES = $(filter-out -D% -U%, $(CFLAGS)) $(LOCAL_CFLAGS)
CCDEFINES = $(filter -D% -U%, $(CFLAGS))
CPLUSFLAGS = $(CFLAGS_NODEFINES) $(CPLUSOPTIMIZE)
#if defined(USE_EXTERNAL_TRACE_EVENTS)
CCDEFINES += $(strip $(shell $(PERL) -x xlate_names($(TOP)/tools/platform.pl) -DTOR))
#endif

/*jk CCOPTIMIZE is broke */
COMPILE_NOSYMBOL.c = $(TIME) $(CC) $(CFLAGS_NODEFINES) $(CPPFLAGS) $(CCOPTIMIZE) -c 
COMPILE.c = $(COMPILE_NOSYMBOL.c) $(CCDEBUGSYMBOLS) 

COMPILE_NOSYMBOL.cpp = $(TIME) $(CPLUSPLUS) $(CPLUSFLAGS) $(CPPFLAGS) -c
COMPILE.cpp = $(COMPILE_NOSYMBOL.cpp) $(CPLUSDEBUGSYMBOLS) 

CPP_FLAGS =
CPP = $(CPLUSPLUS) $(CFLAGS_NODEFINES) -E $(CPP_FLAGS)
#ifdef USE_CL
CPP += -Zs
#endif
GENDEPENDPL = $(PERL) $(TOOLS_DIR)/GenDepend.pl
GENDEPENDFLAGS = --objExtension=.OBJEXT --cppCmd='$(strip $(subst ','"'"', $(CPP)))'
#ifdef USE_AUTOUPDATING_DEPENDS
GENDEPENDFLAGS += --autoUpdating
#endif
#ifdef IS_DOSDEV
GENDEPENDFLAGS += --dosPaths
#endif
GENDEPEND = $(GENDEPENDPL) $(GENDEPENDFLAGS)

INIT_GROUP_NAMES =
USED_GROUP_NAMES =
IMPORTANT_GROUP_NAMES =

ALL_TARGET_FILES =
PRE_SUBDIRS =
POST_SUBDIRS =
NONDEFAULT_SUBDIRS =
MISC_SUBDIRS =
ALL_SUBDIRS = $(PRE_SUBDIRS) $(POST_SUBDIRS) $(NONDEFAULT_SUBDIRS) $(MISC_SUBDIRS)
NEWSUFFIXES =
SUBDIR_COMMANDS = \
	automatic local_ctags local_etags
NONDEFAULT_SUBDIR_COMMANDS = \
	build_report build_short_report build_audit
PARALLEL_INTRASUBDIR_COMMANDS = \
	all_no_automatic tests
NONDEFAULT_PARALLEL_SUBDIR_COMMANDS = \
	clean squeaky pristine clean_install clean_depends src_links clean_src_links
DEFAULT_PARALLEL_SUBDIR_COMMANDS = \
	depend_no_automatic install install_links
PARALLEL_SUBDIR_COMMANDS = $(NONDEFAULT_PARALLEL_SUBDIR_COMMANDS) $(DEFAULT_PARALLEL_SUBDIR_COMMANDS)
OTHER_COMMANDS = \
	all tags ctags etags depend make local_depend fast \
	print_all_groups print_important_groups print_dir_name print_historical print_build_bugs

ALL_SUBDIR_COMMANDS = $(PARALLEL_INTRASUBDIR_COMMANDS) $(PARALLEL_SUBDIR_COMMANDS) $(OTHER_COMMANDS)
DERIVED_SUBDIR_COMMANDS = $(foreach i, _presubdir _localdir _postsubdir, $(addsuffix $(i), $(ALL_SUBDIR_COMMANDS)))
ALL_COMMANDS = $(ALL_SUBDIR_COMMANDS) $(DERIVED_SUBDIR_COMMANDS) $(OTHER_COMMANDS)

CMNT SRC<collection><generated><used><file_type>
CMNT   <collection> := [ <empty> | S ] 
CMNT                     <empty> - user defined value, only non-collection
CMNT                               values in other productions
CMNT                     S       - collection type, at least one non-collection
CMNT                               value must in other productions
CMNT   <generated>  := [ _perm | _gen | <empty> ]
CMNT                     _perm   - file which resides in repository
CMNT                     _gen    - generated file from script
CMNT                     <empty> - collection of both _gen and _perm
CMNT   <used>       := [ <empty> | _unused | _all ]
CMNT                     <empty> - file which is used in build
CMNT                     _unused - file which is unused in build
CMNT                     _all    - collection of both <empty> and _unused
CMNT   <file_type>  := [ .h | .c | .cpp | .asm | .java | .other | .c_cpp | <empty> ]
CMNT                     .h      - C/C++ header file, does not produce object file
CMNT                     .c      - C file which produces object file
CMNT                     .cpp    - C++ file which produces object file
CMNT                     .asm    - assembly source file which produces object file
CMNT                     .java   - java source file
CMNT                     .other  - other misc file
CMNT                     .c_cpp  - collection of .c and .cpp
CMNT                     <empty> - collection of .h, .c, .cpp and .other

CMNT These are to be defined in the Imakefiles
CMNT
CMNT a source file must belong to exactly one of the categories

SRC.h =
SRC.c =
SRC.cpp =
SRC.asm =
SRC.java =
SRC.other =
SRC.gen.h =
SRC.gen.c =
SRC.gen.cpp =
SRC.gen.asm =
SRC.gen.java =
SRC.gen.other =
SRC.unused.h =
SRC.unused.c =
SRC.unused.cpp =
SRC.unused.asm =
SRC.unused.java =
SRC.unused.other =
SRC.unused.gen.h =
SRC.unused.gen.c =
SRC.unused.gen.cpp =
SRC.unused.gen.asm =
SRC.unused.gen.java =
SRC.unused.gen.other =
SRC.historical =

CMNT Collections of files

SRC.c_cpp = $(SRC.c) $(SRC.cpp)
SRC.unused.c_cpp = $(SRC.unused.c) $(SRC.unused.cpp)
SRC.gen.c_cpp = $(SRC.gen.c) $(SRC.gen.cpp)
SRC.unused.gen.c_cpp = $(SRC.unused.gen.c) $(SRC.unused.gen.cpp)

SRC.perm_gen.h = $(SRC.h) $(SRC.gen.h)
SRC.perm_gen.c = $(SRC.c) $(SRC.gen.c)
SRC.perm_gen.cpp = $(SRC.cpp) $(SRC.gen.cpp)
SRC.perm_gen.c_cpp = $(SRC.c_cpp) $(SRC.gen.c_cpp)
SRC.perm_gen.asm = $(SRC.asm) $(SRC.gen.asm)
SRC.perm_gen.java = $(SRC.java) $(SRC.gen.java)
SRC.perm_gen.other = $(SRC.other) $(SRC.gen.other)
SRC.unused.perm_gen.h = $(SRC.unused.h) $(SRC.unused.gen.h)
SRC.unused.perm_gen.c = $(SRC.unused.c) $(SRC.unused.gen.c)
SRC.unused.perm_gen.cpp = $(SRC.unused.cpp) $(SRC.unused.gen.cpp)
SRC.unused.perm_gen.c_cpp = $(SRC.unused.c_cpp) $(SRC.unused.gen.c_cpp)
SRC.unused.perm_gen.asm = $(SRC.unused.asm) $(SRC.unused.gen.asm)
SRC.unused.perm_gen.java = $(SRC.unused.java) $(SRC.unused.gen.java)
SRC.unused.perm_gen.other = $(SRC.unused.other) $(SRC.unused.gen.other)
SRC.all.h = $(SRC.h) $(SRC.unused.h)
SRC.all.c = $(SRC.c) $(SRC.unused.c)
SRC.all.cpp = $(SRC.cpp) $(SRC.unused.cpp)
SRC.all.c_cpp = $(SRC.c_cpp) $(SRC.unused.c_cpp)
SRC.all.asm = $(SRC.asm) $(SRC.unused.asm)
SRC.all.java = $(SRC.java) $(SRC.unused.java)
SRC.all.other = $(SRC.other) $(SRC.unused.other)
SRC.all.gen.h = $(SRC.gen.h) $(SRC.unused.gen.h)
SRC.all.gen.c = $(SRC.gen.c) $(SRC.unused.gen.c)
SRC.all.gen.cpp = $(SRC.gen.cpp) $(SRC.unused.gen.cpp)
SRC.all.gen.c_cpp = $(SRC.gen.c_cpp) $(SRC.unused.gen.c_cpp)
SRC.all.gen.asm = $(SRC.gen.asm) $(SRC_gen_unused.asm)
SRC.all.gen.java = $(SRC.gen.java) $(SRC_gen_unused.java)
SRC.all.gen.other = $(SRC.gen.other) $(SRC.unused.gen.other)
SRC.all_types = $(SRC.h) $(SRC.c_cpp) $(SRC.asm) $(SRC.java) $(SRC.other)
SRC.unused.all_types = $(SRC.unused.h) $(SRC.unused.c_cpp) $(SRC.unused.asm) $(SRC.unused.java) $(SRC.unused.other)
SRC.gen.all_types = $(SRC.gen.h) $(SRC.gen.c_cpp) $(SRC.gen.asm) $(SRC.gen.java) $(SRC.gen.other)
SRC.unused.gen.all_types = $(SRC.unused.gen.h) $(SRC.unused.gen.c_cpp) $(SRC.unused.gen.asm) $(SRC.unused.gen.java) $(SRC.unused.gen.other)

SRC.all.all_types = $(SRC.all_types) $(SRC.unused.all_types)
SRC.all.gen.all_types = $(SRC.gen.all_types) $(SRC.unused.gen.all_types)
SRC.perm_gen.all_types = $(SRC.all_types) $(SRC.gen.all_types)
SRC.unused.perm_gen.all_types = $(SRC.unused.all_types) $(SRC.unused.gen.all_types)
SRC.all.perm_gen.h = $(SRC.all.h) $(SRC.all.gen.h)
SRC.all.perm_gen.c = $(SRC.all.c) $(SRC.all.gen.c)
SRC.all.perm_gen.cpp = $(SRC.all.cpp) $(SRC.all.gen.cpp)
SRC.all.perm_gen.c_cpp = $(SRC.all.c_cpp) $(SRC.all.gen.c_cpp)
SRC.all.perm_gen.asm = $(SRC.all.asm) $(SRC.all.gen.asm)
SRC.all.perm_gen.java = $(SRC.all.java) $(SRC.all.gen.java)
SRC.all.perm_gen.other = $(SRC.all.other) $(SRC.all.gen.other)

SRC.all.perm_gen.all_types = $(SRC.all.all_types) $(SRC.all.gen.all_types)


LIB_FILES =
TEST_LIB_FILES =
MISC_LIB_FILES =
ALL_LIB_FILES = $(LIB_FILES) $(TEST_LIB_FILES) $(MISC_LIB_FILES)
SHARED_LIB_FILES =
TEST_SHARED_LIB_FILES =
MISC_SHARED_LIB_FILES =
ALL_SHARED_LIB_FILES = $(SHARED_LIB_FILES) $(TEST_SHARED_LIB_FILES) $(MISC_SHARED_LIB_FILES)

C_CPP_OBJ_FILES = $(addsuffix .OBJEXT, $(basename $(SRC.perm_gen.c_cpp)))
OBJ_FILES = $(C_CPP_OBJ_FILES) $(addsuffix .OBJEXT, $(basename $(SRC.perm_gen.asm)))
SBR_FILES = $(addsuffix .sbr, $(basename $(OBJ_FILES) $(ALL_LIB_FILES) $(ALL_SHARED_LIB_FILES)))
PDB_FILES = $(addsuffix .pdb, $(basename $(OBJ_FILES)))
PDB_FILES += $(addsuffix .pdb, $(basename $(ALL_SHARED_LIB_FILES)))
PDB_FILES += $(addsuffix .pdb, $(basename $(ALL_EXEC_FILES.with.suffix)))

UNUSED_OBJ_FILES = $(addsuffix .OBJEXT, $(basename $(SRC.unused.perm_gen.c_cpp) $(SRC.unused.perm_gen.asm)))
UNUSED_SBR_FILES = $(addsuffix .sbr, $(basename $(UNUSED_OBJ_FILES)))
UNUSED_PDB_FILES = $(addsuffix .pdb, $(basename $(UNUSED_OBJ_FILES)))

CLEAN_FILES =
SQUEAKY_FILES =
PRISTINE_FILES =
INSTALL_FILES =

EXE_SUFFIX = $(addprefix ., EXEEXT)
EXEC_FILES =
EXEC_FILES.with.suffix = $(addsuffix $(EXE_SUFFIX), $(EXEC_FILES))
TEST_EXEC_FILES =
TEST_EXEC_FILES.with.suffix = $(addsuffix $(EXE_SUFFIX), $(TEST_EXEC_FILES))
MISC_EXEC_FILES =
MISC_EXEC_FILES.with.suffix = $(addsuffix $(EXE_SUFFIX), $(MISC_EXEC_FILES))
ALL_EXEC_FILES = $(EXEC_FILES) $(TEST_EXEC_FILES) $(MISC_EXEC_FILES)
ALL_EXEC_FILES.with.suffix = $(addsuffix $(EXE_SUFFIX), $(ALL_EXEC_FILES))

DEFAULT_TARGETS = $(LIB_FILES) $(SHARED_LIB_FILES) $(EXEC_FILES.with.suffix)

TAG_FILES = $(SRC.perm_gen.h) $(SRC.perm_gen.c_cpp)
CTAG_FILE = tags
LOCAL_CTAG_FILE = $(CTAG_FILE).local
GLOBAL_CTAG_FILE = $(BUILD_TOP)/$(CTAG_FILE)
TEMP_CTAG_FILE = $(GLOBAL_CTAG_FILE).unsorted
ETAG_FILE = TAGS
LOCAL_ETAG_FILE = $(ETAG_FILE).local
GLOBAL_ETAG_FILE = $(BUILD_TOP)/$(ETAG_FILE)

DEPEND_SOURCE_FILES = $(sort $(SRC.perm_gen.c_cpp))

DONT_SRC_LINK_FILES =

CMNT Project.tmpl ends here

