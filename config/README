<std-header style='imake' orig-src='shore'>

 $Id: README,v 1.8 1999/06/07 19:07:25 kupsch Exp $

SHORE -- Scalable Heterogeneous Object REpository

Copyright (c) 1994-99 Computer Sciences Department, University of
                      Wisconsin -- Madison
All Rights Reserved.

Permission to use, copy, modify and distribute this software and its
documentation is hereby granted, provided that both the copyright
notice and this permission notice appear in all copies of the
software, derivative works or modified versions, and any portions
thereof, and that both notices appear in supporting documentation.

THE AUTHORS AND THE COMPUTER SCIENCES DEPARTMENT OF THE UNIVERSITY
OF WISCONSIN - MADISON ALLOW FREE USE OF THIS SOFTWARE IN ITS
"AS IS" CONDITION, AND THEY DISCLAIM ANY LIABILITY OF ANY KIND
FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.

This software was developed with support by the Advanced Research
Project Agency, ARPA order number 018 (formerly 8230), monitored by
the U.S. Army Research Laboratory under contract DAAB07-91-C-Q518.
Further funding for this work was provided by DARPA through
Rome Research Laboratory Contract No. F30602-97-2-0247.

  -- do not edit anything above this line --   </std-header>

This file contain support for configuring a Paradise source workspace.
It contains only those files that differ (for Paradise's sake) from the
config stuff used to build the Shore SM.

There are two sets of configuration rules and templates used by
imake.  The defaults are in the shore/config directory, and these
are used as is when building the lower layers.  In there, you
must 
	cp shore.def.example shore.def 
and edit shore.def to determine the global build configuration 
(i.e., that which applies to the storage manager and to paradise).

After that, cd back here and 
	cp local.def.example local.def
and edit that to get the paradise options that you want.

If you want to add/delete/change templates or rules that paradise uses,
do so in local.tmpl, local.rules here. (Do not touch those files in the
shore/config directory).

When all that's done, follow the rest of these steps:

After checking out a workspace perform the following steps in
the top level directory:

tools/makemake .	// to generate the makefiles
tools/depend		// to make .depend files

Makefile files should never be updated.  Instead, edit the
corresponding Imakefile.  To generate the new Makefile, run
	make make
if the Makefile already exists.
If it does not already exist run:
	DOT/tools/makemake DOT
where DOT is the path to the top level directory.

If you make .depend files you can generate new ones with 
	make depend
Otherwise, use (as decribed above)
	DOT/tools/makemake DOT

